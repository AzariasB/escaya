import * as t from 'assert';
import { recovery } from '../../src/escaya';

describe('Recovery - Misc', () => {
  // Testing function declartations to make sure we don't
  // fail short
  for (const arg of [
    'function x',
    'function x (',
    'function x ()',
    'function x () {',
    'function x () {}',
    'function x (y {}',
    'function x (y z {}',
    'function x (y z ',
    'function x (y z {',
    'function x y z {}',
    'function x () {}',
    'function x () {}',
    'function x (= {}',
    'function x (x = {}',
    'function x ( = y) {}',
    'function x ( (/ 67)) {}',
    'function x (y = z - ) {}',
    'function x (y = z -  {}',
    'function a() {"}',
    'function a() {"string"}',
    'function a() {"directive"',
    'function a() {"use strict";',
    'function a() {"use strict;',
    'function a() {"use strictt";',
    'function a() {"use strictt"}',
    'function a() {"recovery"}',
    'function a() "recovery"',
    'function a() {"recovery"',
    'function a() "recovery"}',
    'function a() "recovery" = foo}',
    'function a(.) {}',
    'function a(..) {}',
    'function a(...) {}',
    'function a(..a) {}',
    'function a({},a) {}',
    'function a({},a {}',
    'function x ([a]) {}',
    'function x ([a=) {}',
    'function x ([a= {}',
    'function x (}',
    'function (}',
    'function x (',
    'function function'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
  }

  // Import / Export in both module goal and script

  for (const arg of [
    'export {',
    'export from !',
    'export from 1',
    'export !!{',
    'export {//// comment and more',
    'export {!',
    'export }',
    'export £',
    'import [ foo ] from "foo.js"',
    'import * foo from "foo.js";;',
    'import { foo as bar',
    'export * as',
    'export * from 1',
    'export * as x from abc',
    'export * as ',
    'export * as ****** 89779 ',
    'export %&/()=?',
    'export * as {[]@£',
    'export * as ;;;;',
    'export * as **',
    'import { [123] } from "foo"',
    'export * as x from',
    'export * as x as ****** from 1',
    'export * as x from abc',
    'import { [12 } from "foo"',
    'import { [123[[[ } from "foo"',
    'export function async() { }',
    'export function func() { };',
    'export { };',
    'export function set(x) { value = x };',
    'export let value = 0;',
    'export default function*() {}',
    'export default function*() ',
    'export function foo() { return 42 }',
    'export default 42;',
    'export let  1;',
    'export function s) { a ',
    'export function get_a() { return a };',
    'export {get}; function get() {};',
    'export default x;',
    'export lt async function *f(){} foo',
    'export async f40 }',
    'export var w = 41;',
    'expo42;',
    'export const z = "hello world";',
    'function f()port { f };',
    'export let x = 0;',
    "export { .js';",
    'export * from',
    'export var foo;',
    'export function goo() {};',
    'export let hoo;',
    'export const joo = 42;',
    'export default (function koo() {});',
    'export var y = 0;',
    'export const z = 0;',
    'export function func() { };',
    'export { };',
    'export function foo () { return "foo"; }',
    'export { };',
    'export f};',
    'export let= 0;',
    'export default}',
    'export functio()  return 42 }',
    'export  42;',
    'export let  1;',
    'export fu { a ',
    'export function get_a() { return a };',
    'export {get',
    'export default ;',
    'export lt async ){ foo',
    'export async }',
    'export  = 41;',
    'export const z = hello world";',
    'function { f };',
    'exportt x = 0;',
    "export {{{{{{{{{{{{ .js';}}}}",
    '!!! export from switch(export x from "y") {',
    'export * from',
    'export var foo;',
    'export function };',
    'export function ;',
    'export function {;}',
    'export {;}',
    'export /&()=[{][{{8[]}89[{8909lkj/    j]{[]let hoo;',
    'export const joo = 42;',
    'export default (function koo() {});',
    'export var y = 0;',
    'export const z = 0;',
    'export function func() { };',
    'export { };',
    'export function foo () { return "foo"; }',
    'import { x as 1 } from "x";',
    'import [ foo ] from "foo.js"',
    'import * foofrom "foo.js";;',
    'import { foo as bar',
    'import { foo, , } from "module";',
    'import { };',
    'import {;',
    'import {x}, {y} from "foo";',
    'import * as x, {y} from "foo";',
    'import / as a from "foo";',
    'import * as a from 12;',
    'import { x }, def from "foo";',
    'import {};',
    'import { foo as switch from "module";',
    'import { 123 } from "foo";',
    'import a, *= from foo"',
    'import a, ** from "foo"',
    'import ghost from [];',
    'import { [123 from foo',
    'import { x as   from "x";',
    'import [ foo  from "foo.js"',
    'import * foo ;;',
    'import { ',
    'import { foo, , } from "module";',
    'import { ;',
    'import {;',
    'import {x}, {y} from "foo";',
    'import * as x, {y} from "foo";',
    'import / foo";',
    'import / ;',
    'import * as a from 12;',
    'import { x }, def from "foo";',
    'import {};',
    'import { foo as switch } from "module";',
    'import { 123 } from "foo";',
    'import a, *= from "foo"',
    'importa, ** from "foo"',
    'import ghost from [];',
    'import { [123] } from "foo"',
    "import { a ,,, from 'foo';",
    "import { , c, } from 'baz';",
    "import * as fobar.js';",
    'import {,t, from } from "baz"',
    "import {} from 'x'",
    'import {a} ',
    "import {a as b} from 'x'",
    "import {a,b,} from 'x'",
    "import m ;;'baz';",
    'import $o"',
    'import ;{} from "foo";',
    "import n from 'n.js';",
    'import at async from "foo";',
    "import { 'm.js';",
    "import { a } from 'foo';",
    "import { a, b ,,,,,,, !!!!! //} from 'baz';",
    "import * as foob from 'bar.js';",
    'import { aset, set,;; from } from "baz"',
    "import {}x'",
    "import {a} from 'x'",
    "import {a as b} from 'x'",
    "import {a,,n from 'x'",
    "import foo, * as bar from 'baz';",
    'import $ from "foo"',
    'importv [ { from "foo";',
    "import **//  from 'n.js';",
    'import a from "module";',
    'import async from "foo";',
    "import { } from 'm.js';",
    "import { a } from 'foo';",
    "import { a, b as d, c, } ;;from 'baz';",
    "import * as;;;;;;;;;;;;;; foob from 'bar.js';",
    'import { as, get, s from  from "baz',
    "import {} from 'x'",
    "import a} from 'x'",
    "import a as b} from 'x'",
    "import {a,[[[[[[[[[[------2b,} from 'x'",
    'import foo, * as ',
    'import foo, * as $s',
    'import $ ',
    'import { foo";',
    "import }}}}}}}{ /*asdf*/ a / ? : c n from 'n.js';",
    'import "module";',
    'import module";',
    'import async from "foo";',
    "import { } from 'm.js';",
    'export const boo = 5;',
    'import {ns hree";',
    'export let = 0;',
    'export var y = 0;',
    'export const z = 0;',
    'export default x;',
    'export function func() { };',
    'var x; export default x = ',
    'export {  } from  ||',
    "export * from 'soms;",
    'var foo; export { foo as for };',
    'export { arguments }}}}} from @$£€€$£@',
    "export { for } from 'm.js';",
    "export { yield '",
    "export { yield '",
    "export { yield '",
    'export {{{{{ yield ',
    'export {{{{{ }}}} yield ',
    'export { static',
    "export { let } from 'm.js'",
    "export * as arguments from 'm.js'",
    "export * as await from 'm.js'",
    "export * as default from '",
    "export * as  from 'm.js'",
    "export * as '",
    'export * as defaul',
    'function _default() { }; export ',
    'function* g(',
    "export { a as b } from 'm.js';",
    "export { a as b  from 'm.js';",
    "export  a as b } from 'm.js';",
    "export  a as b  from 'm.js';",
    "export  a as b  ';",
    'export { a as b } from ',
    "export { a as b } from ';",
    "export * from / +'p.js';",
    'export var ----foo;',
    'export !!function goo() {};',
    'export let hoo;',
    'export const joo = 42;',
    'export default (;;;;;;;;',
    'export var 0;',
    'export cons',
    'export function func() { };',
    'export { };',
    'export function foo () { return "foo"; }',
    'export function *g() {',
    'export let x = y, {...',
    'export ;;;;',
    'export default function (',
    'export var {x} = a, {y',
    'export  = obj;',
    'export default () => {}',
    'export { encrypt }\nvar encrypt',
    'function encrypt() {} let decrypt; export { encrypt, decrypt }',
    'export const const5 = { ',
    'export const const6 =  ]',
    'function x() {  "a" ? ((this',
    'export {',
    "export var var1 = 'string';",
    "export default 'default';",
    'export var var2;',
    'export var var',
    'function _default() { }; export default _default',
    'function* g() { }; export default g',
    'export function *g() { } if (true) { }',
    'export let x = y, {...z} = y;',
    'export let x = y, [...z] = y;',
    'export default function () {}',
    'export var {x = a, {y} = obj;',
    'export var {x} = a, y = obj;',
    'export var {x',
    'export default () => {',
    'export `{',
    'export `',
    'export { encrypt }\nvar encrypt',
    'export * as default from m.js',
    'function encrypt() { { encrypt, decrypt }',
    'export const const5 = { }',
    'export const const6 = [ ]',
    'function x() {  "a" ? ((this)) : ((true));  }',
    'export {};',
    "export var ';",
    "export defaault';",
    'export var var2;',
    'export = 5, var4'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js', { module: true });
      });
    });

    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
  }

  // Misc test cases

  for (const arg of [
    'let {',
    'let a = {',
    'let !!()=',
    'let /asdfasdf',
    'let a[',
    'let }',
    'const let {',
    'let /(&)=',
    'const ....',
    'const ...',
    'YT',
    '¤',
    'let {',
    'let }',
    'try () {',
    'try (',
    'try {}',
    'switch',
    'switch(',
    'switch()',
    'switch {',
    'for',
    'for {',
    'for( {',
    'for( {}',
    'for( }',
    'break !!',
    'function',
    'function (',
    'function {}',
    'function {',
    'function }',
    '"use strict"; for(let in foo) {}',
    '"use strict"; for(let !) {}',
    'for({x = y} in foo',
    'for({x = y} in foo);',
    'for(let {x = y} in foo',
    'for(const {x = y} in foo);',
    'for(let a,b,c in x) {}',
    'for(let a,{,c in x) {}',
    'for(var a,c in x) {}',
    'for(var a,,c in x) {}',
    'for(var a,,,,,,,,,,,,,,,c in x) {}',
    'for(a,{,c in x) {}',
    'for ((a,b) in c);',
    'function arguments(){}v:switch(x){default:}let arguments=l',
    '({__proto__: a, __proto__: b});',
    '({__proto__: a, __proto__: b});',
    '({__proto__: a, __proto__:});',
    '({__proto__: a, : b});',
    '({__pto__: b});',
    `async
    function test(){
        await foo();
    }`,
    `async
    function test(
        await foo(;
    }`,
    `async
    function test(){
        await foo();
    }`,
    'for({x = 0} = 0 of {});',
    'a?.?.',
    'a?.b?.',
    'a?.a?.``',
    'a?.a?``',
    '',
    '(a b c',
    '(a, b c',
    '(a, b, c,',
    'x(a b c',
    'x(a, b c',
    'x(a, b, c,',
    'a(b;c;',
    'a(b;c;)',
    '',
    'new Date/++;',
    '([(x().foo)]) => x',
    '([(x().foo)]) => ',
    '([(x().)]) => x',
    '([(x(.o) => x',
    'new Date++;',
    'r(let.a of 0);',
    'for ( a ) { }',
    'var a = if (b) { c }',
    'var a = if b { c }',
    'var a = 0b12',
    `async ({x} = await bar) => {}`,
    `let z = async ({x} = await bar) => {}`,
    `async ({x} = await bar);`,
    'function foo(a, ...b, c) { }',
    'function foo(a, ...b, ) { }',
    'function foo(a, ...[b], ) { }',
    'function foo(a, ...{b}, ) { }',
    'function foo(...a, ...b) { }',
    'function foo(a, ...{b} = 20) { }',
    'function foo(a, ...b = 20) { }',
    'function * foo(o) { ({...{ x = yield }} = o); }',
    'var {...r = {a: 2}} = {a: 1, b: 2};',
    'var {...r, b} = {a: 1, b: 2};',
    'var {...r, ...e} = {a: 1, b: 2};',
    'var {...= {a: 2}} = {a: 1, b: 2};',
    'var {... 2};',
    'var {...r, ...e} = {a: 1,',
    '({...new Object()} = {a: 1, b: 2});',
    '(function * (o) { ({ ...{ x: yield } } = o); })()',
    'var [...x = 20] = 20;',
    'var [...[...x = 20]] = 20;',
    'var {x}',
    'var {x, y}',
    'var {x}  y}',
    'var {foo:bar, bar:baz}',
    'var [x]',
    'var [x, y]',
    'var [x] = [], [x, y]',
    'for (of of of of){}',
    'for ; of){}',
    'for (of of []; of; of){}',
    'for (ofof){}',
    'for (var of of){}',
    'for n of){}',
    'for (',
    'for (var of in){}',
    'for (var of.of of of){}',
    'for (of[of of of){}',
    'do function foo() { } while (false); ',
    `async ({} + 1) => x;`,
    '({a=b => x',
    '({a=b}(x)) => x',
    '([{a=.x) => x',
    '([{a=b[x]) => x',
    '([{a= => x',
    'for (let() of y);',
    'var [(x)v;',
    'var {(x)} = v;',
    'con(x)] = v;',
    'const} = v;',
    `(a,b,)`,
    'x y}',
    `(...x);`,
    `(a,b,)`,
    `([{a=b}.x]) => x`,
    `({a: {a=b}.x}) => x`,
    `[...[x].map(y, z)] = a;`,
    `({ident: {x}.join("")}) => x`,
    `({"x": [y].slice(0)} = x)`,
    `({"x": [y].) => x`,
    `({"x: [y].) => x`,
    'let z = async ({x} = await bar) => {}',
    'async nc function g(x=(await z)=y){}   }',
    '(x=(await z)=y)',
    '(x=(yield z)=y)',
    'function *f(x=(yif(x=(yield z)=y){}',
    `(a,)`,
    `(a = b,)`,
    '(a',
    'a[5',
    'a[5 + 6',
    'a.',
    '()',
    "a.'l'",
    'new -a',
    '(a:) --b',
    '(a: --b',
    'a-- ++ € {[  $',
    '1: null',
    '+-!~',
    '+-!~((',
    'a)',
    'a]',
    '.l',
    '1.l',
    'a + * b',
    'a ? b',
    'a ? b :',
    '%a',
    'a in instanceof b.l',
    '- false = 3',
    'a + typeof b += c in d',
    'typeof a &= typeof b',
    'a(*a)',
    'a(.length)',
    'new a(5',
    '(function a{})',
    'try a; catch(e) {}',
    'try {} catch',
    'try {}ly a()',
    'try {} catch(e)',
    'try { finally',
    'try {} finally {',
    'try {} catch ...) {}',
    'switch () {}',
    'case 5:',
    'default:',
    'var a = 0b',
    'var a = 0b0112___',
    'var a = 0b0_112__',
    'var a = 0b1.2',
    'var a = 0b12__1',
    'var a = 0b1e2',
    'var a = 12.12.12',
    'var a = 12e23.23e2',
    'var a = 23e23e23',
    'var a = 12e',
    'var a = 12e1a',
    'var a = 0xFH',
    'var a = 0x345aef3_',
    'var a = 0x345___aef3_',
    'var a = 0x345aef3n_',
    'var a = 035424n',
    'var a = 035424_',
    'var a = 03_54_24',
    'var a = 0x',
    'function f() { if (--a()) do with(1) try {} catch(ke) { f() ; g() } while (a in b) else {} }',
    'function f() { if (--a()) do with(1) try {} catg() } while (a in b) else {} }',
    'function f() { if (--a()) do with(1) try {} catch(ke) } while (a in blse {} }',
    'function f() { if try {} catch(ke) { f() ; g() } while (a in b) else {} }',
    'function f { if (--a()) ) try {} catch(ke) { f() ; g() } while (a else {} }',
    'try {',
    'try }',
    '"foo" | "bar" = ("foo");',
    '({a =       ,,,',
    ',,,',
    'n, op, val,',
    '\n]',
    `({a({e: a.b})`,
    `({a({e: a.)`,
    `x \n isnt y`,
    '/*asdff lkadf',
    'dd //',
    'swithc //',
    'try (//',
    'catch 3',
    '(][{}])',
    '@£€${[fdasfd',
    '-------------*',
    '-3',
    '-£',
    '& dsakjfl &/{ = daf switch( foo',
    '%H',
    '{ // }',
    '/*{/**adsf*/}',
    '******** [',
    'F/',
    '[',
    ']/a-3',
    '&/ switch( try( function',
    '¤jd',
    '{[',
    '[}',
    '=)(/',
    '[{]',
    'function [{ catch',
    '/a',
    '_;;;;;;',
    ' ',
    '\\67 = x',
    'while (\\67 = adfh [}',
    'do while f /- -asdf',
    '{€',
    'class ........',
    'class ;;;;',
    'class a ;;;;',
    '..,m.--[[[',
    ']}',
    '( 98 swithc do while break continue return )[[]} return package',
    '1,[',
    '1n[',
    '"',
    '"`',
    '`aa',
    '`aa`=b',
    'Ø',
    '*/*/*/*/**/-3 = s switch(try catch',
    'aaaaaaaaa {[',
    '\\\\s',
    ':4',
    '_',
    '?:a',
    '?:',
    '(a, (b)) => 42',
    '((... = []) => })',
    '((...a = []) => {',
    '((...a = []) => {}',
    'var a = 0b12',
    'var a = 0b',
    'var a = 0b2___',
    'var a = 0b0_112__',
    'var a = 0b1.2',
    'var a = 0b12__1',
    'var a =',
    'var  12.12.12',
    'var a = 12e23.23e2',
    'var a = 23e23e23',
    'var a = 12e',
    'var2e1a',
    'var FH',
    'var a345aef3_',
    'var a aef3_',
    'vaaef3n_',
    'var5424n',
    'var a 424_',
    'var a3_54_24',
    'var a = ',
    'var a = 0b12',
    'var a = 0b',
    'var a = 2___',
    'var a = __',
    'var a = 0b1.2',
    'var a = 02__1',
    'var a = 0e2',
    'var a = 12.12.12',
    'var a = 12e23.',
    'var a = 233e',
    'var a = 12e',
    'var a = 12e1a',
    'var a = 0xFH',
    'var a = 0x345aef3_',
    'var a _= 0_x3__',
    'const a = 0x3',
    'var / a = 035424n',
    'var = a = 035424_',
    'var 24 a = 03_54_24',
    'var + a = 0x',
    '0x1_',
    '/\\S',
    '0xFin y',
    'with (a) let [x] = y',
    'with (a) let [x',
    'with (a) let [',
    'with ( let [x= y',
    'with () let [x] = y',
    'with ( let [x] = y',
    'with a) let [x] = y',
    'with a) let [x] = y',
    'with (a)  [x] = y',
    'with (a) let  = y',
    'with (a) let [x] = y',
    'with (a) let [x] = y',
    'async functio',
    'async function x await: ',
    '[([b])] = t',
    '[([b])] = t;',
    '[([b] = t;',
    '[( = t;',
    'b])] = t;',
    '(true ? x : y)++',
    '(true ? x : y)++',
    '(true ? x : y)++(true ? x : y)++',
    '(true ? x : y)++(true ? x : y)++',
    'switch(true ? x : y)++(true ? x : y)++',
    'try(true ? x : y)++(true ? x : y)++',
    'for(true ? x : y)++(true ? x : y)++',
    'class(true ? x : y)++(true ? x : y)++',
    '[(true ? x : y)++(true ? x : y)++',
    '[(x) = ',
    '(((x,) = 5',
    '(((x,x) = 5',
    '(((x,)) = 5',
    '(,x))) = 5',
    '(,x))) = ,,,,,,,,',
    'va@£$luev',
    'new Date++;',
    'function(true ? x : y)++(true ? x : y)++',
    'async function *a() { await: b}',
    'async function a*() { await: b}',
    '"use strict"; async function a*() { await: b}',
    'async function() { await: b}',
    'async function() { yield: b}',
    'async function *a() { yield: b}',
    'async function a*() { yield: b}',
    '"use strict"; async function() { package: b}',
    'var',
    'var a',
    'var a {',
    'var a {}',
    'var a, {',
    'continue',
    '/',
    '/aa',
    'let }',
    '[',
    '[/]',
    '/]',
    '{}',
    '}',
    '{',
    '{)',
    '}(',
    '{while){break;}',
    '{while){break;}',
    '{function a',
    '{)}',
    '{({',
    '{{{}',
    '{{}}',
    '{{',
    '{{}',
    '{{}',
    `() =>`,
    `() =>
    ? foo`,
    `() =>
    ? foo :`,
    `() =>
    ? foo :
    bar`,
    `() =>
    * acorn`,
    '"use strict"; class package',
    '"use strict"; class package {}',
    '"use strict class package {}',
    '"use strict" class package {}',
    'use strict"; class package {}',
    'class x { a() {}, a() {},,, }',
    'class x { a() {}, a() { }',
    'class x { = a() {}, a() { }',
    'class x { ????? a() {}, a() { }',
    'class x { ;;;;;;;;;;;;; a() {}, a() { }',
    'class x { ;;;;;;;;;;;;; a() {} ;;;;; { }',
    'class x { ;;;;;;;;;;;;; }',
    'class x { ;;;;;;;;;;;;; ',
    'class x { %&/78932464lsdf ',
    'class x { Y & ',
    'class x { = ',
    'class x { / ',
    'class x { =** ',
    'class x { ** ',
    'class x { /a/() {} ',
    'class x  = ',
    'class x  ** ',
    'class x { a() {}, a() {},,, }',
    'class x { a() {}, a() { }',
    'class x { = a() {}, a() { }',
    'class x { ????? a() {}, a() { }',
    'class x { ;;;;//;;;;;;;;; a() {}, a() { }',
    'class x { ;;/a;;;;;;;;;; a() {} ;;;;; { }',
    'class x { ;;;;;;/***/;;;;;;; }',
    'class x { ;;;;;;;;;;;;; ',
    'class x { %;;& / ;7;893;2464;{€[; [;{;];l;s;;;;d;f ',
    'class x { Y & ',
    'class x { = ',
    'class x { / ',
    'class x { / ///class x { / ///////',
    'class x { =** ',
    'class x  ** ',
    'class x  =** ',
    'class  { ** ',
    'class x { /a/() {} ',
    'class x  = ',
    'class x  ** ',
    `() => {}.\n** x`,
    `() => {}[\n** x`,
    '() => {}\n`` x',
    '() => {}``\n** x',
    `() => {}\n[ x`,
    `() => {}? x `,
    `() => {}? x : `,
    `() => {}? x : bar`,
    `() => {}* x`,
    `() => {}\n? x `,
    `() => {}\n? x : `,
    `() => {}\n? x : bar`,
    `() => {}\n* x`,
    `() => {}\n. x`,
    `() => {}\n* x`,
    `() => {}?\n x `,
    `() => {}\n?\n x : `,
    `() => {}\n?\n x : bar`,
    `() => {}\n*\n x`,
    `() => {}\n.\n x`,
    `() => {}\n*\n x`,
    `() => {}.\n** x`,
    `() => {}.\n** x`,
    `() => {}.\n** x`,
    `() =>\n** x`,
    `()\n =>\n**\n x`,
    `() =>\n** x`,
    `( =>`,
    '{while{}',
    '{while }',
    'switch a case b;',
    'switch case default foo',
    'switch() { case foo: default: bar}',
    'switch(x { case foo: default: bar}',
    'switch(x) { case foo default: bar}',
    'switch() { case }',
    'switch() { case foo: default: bar',
    'switch()  case foo: default: bar',
    'switch() { case foo: default: bar}',
    'switch() { case foo: default',
    'switch',
    'switch()',
    'switch)',
    'switch){break;}',
    'switch){break;}',
    'switch break;}',
    'switch)}',
    'switch({',
    'switch }',
    'switch){}',
    'switch{}',
    'switch ()',
    'switch a case b;',
    'switch case default foo',
    'switch() { case foo: default: bar}',
    'switch(x { case foo: default: bar}',
    'switch(x) { case foo default: bar}',
    'switch() { case }',
    'switch() { case foo: default: bar',
    'switch()  case foo: default: bar',
    'switch() { case foo: default: bar}',
    'switch() { case foo: default',
    'switch',
    'return function from ',
    'do x while loop',
    'do(',
    'do(while',
    'do crazy stuffs while( {}',
    '{[ do crazy}',
    'class function return x;',
    ';;;',
    'let -xx;',
    'const { = y;',
    'switch ( {][[$€£ @ €',
    'switch a case b;',
    'switch case ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;default foo',
    'switch() { ca${$[{€se foo: default: bar}',
    'switch(x Å{[]} { case foo: default: bar}',
    'switch(x) { case foo default: bar}',
    'switch() { case }',
    'switch(/&() [] { case foo: default: bar',
    'switch(  case foo: (/ ]][] default: ',
    'switch() { case foo: default: bar}',
    'switch() { case foo: default',
    'switch',
    'switch()',
    'switch)',
    'switch ((/&))',
    'switch ([)',
    'switch ({(/&))',
    'switch (!(/&))',
    'switch [){break;}',
    'switch){break;}',
    'switch break;}',
    'switch)}',
    'a:',
    'a:=',
    'a = class {',
    'try ()',
    'try catch()',
    'try() catch()',
    'try() catch()[}',
    'try() catch()[[]}',
    'try() catch()[{]}',
    'try() catch(){}',
    'try catch finaly',
    'try {',
    'try {]',
    'try {}',
    'try {!',
    'try {!s',
    'try {} catch(){}',
    'try {} catch(){',
    'try {! catch(',
    'try {!s ------------',
    'try {} {{}}',
    'try {!',
    'try {!s48757249()!! catch() {}',
    'try { throw [',
    'try { throw [,',
    'try { throw [,]',
    'try { throw [,]; ',
    'try { throw [,]; } ',
    'try { throw [,]; } catch ',
    'try { throw [,]; } catch (',
    'try { throw [,]; } catch ([x',
    'try { throw [,]; } catch ([x = ',
    'try { throw [,]; } catch ([x = 23',
    'try { throw [,]; } catch ([x = 23]',
    'try { throw [,]; } catch ([x = 23]) }',
    'try { throw [,]; } catch ([x = 23]) {}',
    'try { catch ([x = 23]) {}',
    'let {',
    'class a@£$',
    'class {£',
    'class £{',
    'class { }',
    'class  } }',
    'class (x) {',
    'class (x {',
    'class ( {',
    'class }',
    'class x(',
    'class',
    'class {',
    'class {} }',
    'class x } }',
    'class x {',
    'class }',
    'class x(',
    'class x()',
    'class x() [',
    'class { x() {}}',
    'class { x() }}',
    'class { x() }}',
    'class { x() {',
    'class { x(x) {}}',
    'class { x(x y) {}}',
    'class { x( {}',
    'class x(/678 {}}',
    'class x() [{[}]',
    'yield3 3',
    'function *a( { foo}',
    '(let }',
    ')',
    '(',
    '(a =let {',
    '(a =',
    '(...)',
    '(...',
    '...)',
    '../s.)',
    '{ let',
    ' }[]{',
    '[a',
    '}[',
    '[]{',
    '[{[{',
    'await',
    '+---6',
    'a = 67',
    'a /= //////67',
    'a /= /',
    'a /= //////67',
    '"\\0"',
    '"\\01"',
    '"\\0a"',
    '"\\0{"',
    '"\\001"',
    '"\\6"',
    '"\\7"',
    '"\\8"',
    "'x\\u00\u2028newline'",
    "'x\\u0a\u2029newline'",
    "'\u2028newline'",
    "'\u2029newline'",
    "'\u2028'",
    "'\u2029'",
    "'x\\u0 \\u{} foo'",
    "'x\\u0 \\u{/***} foo'",
    "'x\\u0 \\u{//} foo'",
    "'x\\u0 foo'",
    "'x\\x foo'",
    "'x\\u{a\\ foo'",
    "'x\\uax foo'",
    "'x\\u{X foo'",
    "'x\\u000u foo'",
    "'x\\u{U foo'",
    "'x\\ua{ foo'",
    "'x\\u{ foo'",
    "'x\\{ foo'",
    "'x\\'",
    '"\\u foo"',
    '"\\',
    '"\\u{u foo"',
    '"\\u{110000}"',
    '"\\u{11ffff}"',
    '"\\u{0g}"',
    '"\\u{u foo"',
    '"\\u{110000"',
    '"\\u{11ffff',
    "'x\\x0 foo'",
    "'x\\x0 foo",
    "'x\\ua foo'",
    "'x\\u00a foo'",
    '"\\u"',
    '"\\u{"',
    '"\\u{0',
    '"\\u{0g"',
    '"\\u}"',
    '"\\u0g}"',
    '"\\ug}"',
    '"\\u}"',
    '`',
    '`%&/`',
    '`\\u6879`',
    '`\\6879`',
    'y`\\x`; /[\\',
    'x`\\`',
    'x`\\unicode',
    '`template-head${a}template-tail',
    '`${a}${b}${c}',
    '`a${a}b${b}c${c}',
    '`${a}a${b}b${c}c',
    '`x\n\nbar\r\nbaz',
    'y`\\x`; /[\\',
    // 'x`foo ${a b} bar`',
    '`\\8`',
    '`\\12`',
    'a`tag`\\u{0}`',
    // '`${1)',
    '`start \\0737 \\xaa \\u{abc} \\0 finish`;',
    '`hello\\x`',
    '`hello\\x${1}`',
    '`hello${1}\\x`',
    '`hello${1}\\x${2}`',
    '`hello\\x\n`',
    '`hello\\x\n${1}`',
    '`hello${1}\\x\n`',
    '`hello${1}\\x\n${2}`',
    '`foo${/* comment */ a`',
    '`foo${// commenta}`',
    '`foo${\n a`',
    '`foo${\r\n a`',
    '`foo${\r a`',
    '`foo${fn(}`',
    '`hello\\x`',
    '`hello\\x${1}`',
    '`hello${1}\\x`',
    '`hello${1}\\x${2}`',
    '`hello\\x\n`',
    '`hello\\x\n${1}`',
    '`\\08`',
    '`\\01`',
    '`\\01${0}right`',
    '`left${0}\\01`',
    '`left${0}\\01${1}right`',
    '`\\1`',
    '`\\1${0}right`',
    '`left${0}\\1`',
    '`left${0}\\1${1}right`',
    '`\\xg`',
    '`\\xg${0}right`',
    '`left${0}\\xg`',
    '`left${0}\\xg${1}right`',
    '`\\xAg`',
    '`\\xAg${0}right`',
    '`left${0}\\xAg`',
    '`left${0}\\xAg${1}right`',
    '`\\u0`',
    '`\\u0${0}right`',
    '`left${0}\\u0`',
    '`left${0}\\u0${1}right`',
    '`\\u0g`',
    '`\\u0g${0}right`',
    '`left${0}\\u0g`',
    '`left${0}\\u0g${1}right`',
    '`\\u00g`',
    '`\\u00g${0}right`',
    '`left${0}\\u00g`',
    '`left${0}\\u00g${1}right`',
    '`\\u000g`',
    '`\\u000g${0}right`',
    '`left${0}\\u000g`',
    '`left${0}\\u000g${1}right`',
    '`\\u{}`',
    '`\\u{}${0}right`',
    '`left${0}\\u{}`',
    '`left${0}\\u{}${1}right`',
    '`\\u{-0}`',
    '`\\u{-0}${0}right`',
    '`left${0}\\u{-0}`',
    '`left${0}\\u{-0}${1}right`',
    '`\\u{g}`',
    '`\\u{g}${0}right`',
    '`left${0}\\u{g}`',
    '`left${0}\\u{g}${1}right`',
    '`\\u{0`',
    '`\\u{0${0}right`',
    '`left${0}\\u{0`',
    '`left${0}\\u{0${1}right`',
    '`\\u{\\u{0}`',
    '`\\u{\\u{0}${0}right`',
    '`left${0}\\u{\\u{0}`',
    '`left${0}\\u{\\u{0}${1}right`',
    '`\\u{110000}`',
    '`\\u{110000}${0}right`',
    '`left${0}\\u{110000}`',
    '`left${0}\\u{110000}${1}right`',
    '`\\08`',
    '`\\01`',
    '`\\01${0}right`',
    '`left${0}\\01`',
    '`left${0}\\01${1}right`',
    '`\\1`',
    '`\\1${0}right`',
    '`left${0}\\1`',
    '`left${0}\\1${1}right`',
    '`\\xg`',
    '`\\xg${0}right`',
    '`left${0}\\xg`',
    '`left${0}\\xg${1}right`',
    '`\\xAg`',
    '`\\xAg${0}right`',
    '`left${0}\\xAg`',
    '`left${0}\\xAg${1}right`',
    '`\\u0`',
    '`\\u0${0}right`',
    '`left${0}\\u0`',
    '`left${0}\\u0${1}right`',
    '`\\u0g`',
    '`\\u0g${0}right`',
    '`left${0}\\u0g`',
    '`left${0}\\u0g${1}right`',
    '`\\u00g`',
    '`\\u00g${0}right`',
    '`left${0}\\u00g`',
    '`left${0}\\u00g${1}right`',
    '`\\u000g`',
    '`\\u000g${0}right`',
    '`left${0}\\u000g`',
    '`left${0}\\u000g${1}right`',
    '`\\u{}`',
    '`\\u{}${0}right`',
    '`left${0}\\u{}`',
    '`left${0}\\u{}${1}right`',
    '`\\u{-0}`',
    '`\\u{-0}${0}right`',
    '`left${0}\\u{-0}`',
    '`left${0}\\u{-0}${1}right`',
    '`left${${1}right`',
    '`\\u{g}`',
    '`\\u{g`',
    '`\\u{`',
    '`\\u{g}${0}right',
    '`left${0}\\u{g}`',
    '`left${0}\\u{g}${1}right`',
    '`\\u{0`',
    '`\\u',
    '`\\u{0${0}right`',
    '`left${0}\\u{0`',
    '`left${0}\\u{0${1}right`',
    '`\\u{\\u{0}`',
    '`\\u{\\u{0}${0}right`',
    '`left${0}\\u{\\u{0}`',
    '`left${0}\\u{\\u{0}${1}right`',
    '`\\u{110000}`',
    '`\\u{110000}${0}right`',
    '`left${0}\\u{110000}`',
    '`left${0}\\u{110000}${1}right`',
    '`\\1``\\2`',
    '`\\u{0g}%&/( 32 8924`',
    '"87672 /&/(# \\u{0g}%&/( 32 8924"',
    '"¤%&/()=?"',
    '😍',
    '/a/gg',
    '/a/uu',
    '/a/yy',
    '/a/mm',
    '/a/ii',
    '/a/gg',
    '/a/ss',
    '/a/9',
    '/a/{}}',
    '/a/}',
    '/a\n/',
    '/a\r/',
    '#!foo',
    '-->',
    '/a\u2028/',
    '/a\u2029/',
    '/a gg',
    'x\\u}',
    'x\\u{%',
    'x\\u000072',
    'x\\u0\nnewline',
    'x\\u0\u2029newline',
    '\\u{70bc',
    'x\\u[]',
    'x\\u} foo',
    'x\\ugggg',
    '\\u1',
    '\\t',
    '\\x0g',
    'x\\u{x foo',
    'x\\u0x11ffff',
    '\\u{g0}',
    'x\\uau foo',
    '\\u{70bc',
    'x\\}',
    'x\\{4fff',
    'x\\u{!',
    'x\\uu foo',
    'x\\u000072',
    'x\\u{000072',
    '#privatename',
    'x = {get [foo](){}, get [bar](){}}',
    'x = {get [foo](){}, [bar](){}}',
    'x = {[foo](){}, get [bar](){}}',
    'x = {get 123(){}}',
    'x = {set foo(a){}}',
    'x = {set get(a){}}',
    'x = {foo: typeof x}',
    'x = {foo: true / false}',
    'x = {await}  = x',
    'x = {eval}',
    'x = {"x": [y]}',
    'x = {"x": [y]} = x',
    'x = {"x": [y + x]}',
    'x = {"x": [y].slice(0)}',
    'x = {"x": {y: z}}',
    'x = {"x": {y: z}} = x',
    'x = {"x": {a: y + x}}',
    'x = {"x": {a: y + x}.slice(0)}',
    'x = {"x": 600}',
    'x = {"x": 600..xyz}',
    'x = {...y}',
    'x = {x, ...y}',
    'x = {...a=b}',
    'x = {a, ...y, b}',
    '({ async *method({ w: [x, y, z] = [4, 5, 6] } = {}) {} })',
    '({ async *method({ x: y = thrower() } = {}) {} })',
    '({ async *method([x = 23]) {} })',
    '({ async *method([_, x]) {} })',
    '({ [++counter]: ++counter, [++counter]: ++counter, [++counter]: ++counter, [++counter]: ++counter })',
    '({ async *method(a, b,) {} })',
    '({ eval: 7 })',
    '({ if: 4 })',
    '({ foo: bar = 5 + baz })',
    '({ get foo() {} })',
    '({ a,1:b })',
    '({ 1:a,b })',
    '({ foo: 1, get foo() {} })',
    '({ 1: 1, get 1() {} })',
    '({ method(a, b,) {} })',
    '({ method(x = y, y) {} })',
    '({ async method(x, y = x, z = y) {} })',
    '({ *id() {} })',
    '({ *[anonSym]() {} })',
    '({ *method(a,) {} })',
    '({ async static(){} })',
    '({ method(a,) {} })',
    '({ foo: 1, foo: 2 })',
    '({ async *method(x, y = x, z = y) {} })',
    '({ async *method([[...x] = function() {}()] = [[2, 1, 3]]) {} })',
    '({ async *method([[x, y, z] = [4, 5, 6]] = [[7, 8, 9]]) {} })',
    '({ async *method([...x]) {} })',
    '({ async *method([x]) {} })',
    '({ async *method([[,] = g()]) {} })',
    '({ *method([[x, async, z] = [4, 5, 6]]) {} })',
    '({eval});',
    '({async x() {}});',
    '({async *x() {}});',
    '({async get() {}});',
    '({get x() {}});',
    '({set x(y) {}});',
    '({get() {}});',
    '({set() {}});',
    '({async() {}});',
    '({await() {}});',
    '({async = async} = x);',
    '({async});',
    '({x});',
    '([a,,...rest] = {})',
    '({} = 0);',
    '({y}) => x;',
    '({ a: 1 }).a === 1',
    '({ident = x} = y)',
    '({a: {b: c} = 0})',
    '({a: {a: b.x} = 0})',
    '({a: {b} = 0})',
    '({a: {b}})',
    '({a: {b}, c})',
    '({a: [b.x] = 0})',
    '({a: [b] = 0})',
    '({a: (b.x) = 0} = 1)',
    '({a: (b) = 0} = 1)',
    '({ ...async () => { }})',
    '({"x": {y: z}} = x)',
    '({"x": {a: y + x}})',
    '({"x": {a: y + x}.slice(0)})',
    '({"x": 600})',
    'x({[a]:b}=obj);',
    'x({[a]:b, [15]:d}=obj);',
    'x, {foo, bar} = doo',
    'x, {foo = y, bar} = doo',
    '({a, b} = c = d)',
    'a={"b":c=d}',
    's = {"foo": this}',
    '({x:let} = null)',
    '({x:let})',
    'x({"a":b}=obj);',
    '({x:let}) => null',
    '({ x() {}, y() {}, x() {} })',
    '({ x() {}, x: 1 })',
    '({ x: 1, x() {} })',
    '({ x: 1, *x() {} })',
    '({async})',
    '({async: await})',
    '({async: (await) ? yield : foo})',
    '({async: true})',
    '({async() { }})',
    '({async foo() { }})',
    '({foo() { }})',
    '({x, y, z () {}})',
    '({async delete() {}})',
    '({async [foo](){}})',
    '({async 100(){}})',
    '({throw(x, y) {}});',
    '({package(x, y) {}});',
    '({package(x, y) {}});',
    '({this(x, y) {}});',
    '({switch(x, y) {}});',
    '({}=x);',
    '({a:v=b}=c);',
    '({a=b}=c);',
    'x({[a]:b}=obj);',
    '({key: bar = x})',
    'x = {x: a}',
    '({[a]:b, [15]:d}=obj);',
    'x={async f(){}}',
    's = {s: true}',
    '({ a, b: x })',
    '({key: {}})',
    '({key: {a} = x})',
    '({a:b}=obj);',
    '({1:  {}.b ? c : d })',
    '({ a: {prop: 1}.prop } = {})',
    '({1:  + b })',
    '({[a]:  + b })',
    '({a:  + b })',
    '({...(obj)} = foo)',
    '({...(obj)} = foo),({...obj} = foo),({...obj.x} = foo),({...{}.x} = foo),({...[].x} = foo)',
    '({[a]:  {}.b ? c : d })',
    '({a:  {}.b = c ? d : e })',
    '({a:  {}.b ? c : d })',
    '({a: (a).b ? c : d })',
    'x({1:b, 2:d});',
    'x = ({[a]:b});',
    '({*"expr"(){}} = x);',
    'var {x:y+1} = {};',
    '({set 8(y){})',
    '({get 8(){})',
    '({,} = {});',
    'var {x:y--} = {};',
    'function foo() { return {}; }; var {x:foo().x} = {};',
    'class foo { method() { ({x:super()} = {}); } }',
    '({a: ({d = 1,c = 1}.c) = 2} = {});',
    '({a: {d = 1,c = 1}.c = 2} = {});',
    '({...a, ...b, ...c} = {...a, ...b, ...c})',
    '({x = 42, y = 15})',
    '({x: { y = 10 } })',
    '({ a, b }) = {a: 1, b: 2}',
    '({*a([a.b]){}})',
    '({*: x(){}})',
    'async x*(){}',
    '({...{a,b}} = foo)',
    '({...[a,b]} = foo)',
    '({...[a, b]} = x)',
    '({...{a, b}} = x)',
    '( {...{}} = {} )',
    '({...{}} = {})',
    'async get *x(){}',
    '({set a({e: a.b}){}})',
    '({...x = 1} = {})',
    '({a:a,b,(c), a: {b} });',
    '({ 1:a,b = {c} = d });',
    'x = { set f(...y) {} }',
    '({get x() {}}) => {}',
    'let {...x, ...y} = {}',
    '({...x,}) => z"',
    '({...rest, b} = {})',
    '(([a, ...b = 0]) => {})',
    '(({a, ...b = 0}) => {})',
    '0, {...rest, b} = {}',
    '({...obj1,...obj2} = foo)',
    '({...(a,b)} = foo)',
    '({...{a,b}} = foo)',
    '({"foo": this} = x)',
    '([...x.y] = z)',
    '({123(){}})',
    '({123: expr})',
    '({[key](){}})',
    '({[key]: a.b} = c)',
    '({...key = x})',
    '({...key.prop} = x)',
    '({...key})',
    '([(x).foo = x] = x)',
    '(a = b)',
    '((((((((((x))))))))));',
    '([(x)] = z = {});',
    '([...{}.x] = x);',
    '([...[]] = x);',
    '({x = 1} = {});',
    '({ __proto__: x, __proto__: y } = {})',
    '({x:y} = {});',
    '({a:(b)} = 0)',
    '({a:(b) = 0} = 1)',
    '({web: true,  __proto__: x, __proto__: y});',
    '({a:(b.c)} = 0)',
    '({a:(b = 0)})',
    'delete (foo)',
    '({x, y = 1, z = 2} = {});',
    '({[foo()] : z} = z = {});',
    '({[foo()] : (z)} = z = {});',
    '({[foo()] : foo().bar} = z = {});',
    '({x: y} = 0)',
    '({x} = 0)',
    '({x, y = 1, z = 2} = {});',
    '({42 : x} = {})',
    '([a,,...rest] = {})',
    '({var: x = 42} = {})',
    '({x, ...y, a, ...b, c})',
    '([...[]] = x);',
    '({...[].x} = x);',
    '({...a[x]} = x);',
    '({...a.x} = x);',
    '({...[({...[].x} = x)].x} = x);',
    '({...a.x} = x);',
    '({...x.x, y})',
    '([target()[targetKey()]] = source())',
    '() => {([(x), y] = x)}',
    '([ (foo.bar) ] = {})',
    '([ (y) ]= z = {})',
    '([(({ x } = { x: 1 }) => x).a]= z = {})',
    '([(({ x } = { x: 1 }) => x).a] = z = {})',
    '([((x, y) => z).x]= z = {})',
    '([(x)] = {})',
    '([(x)]= z = {})',
    '([(x),,(y)] = {})',
    '([ (foo.bar) ]= z = {})',
    '([x.y = a] = ([x.y = a] = ([x.y = a] = z)))',
    '({...{}.x} = x);',
    '([...[].x] = x);',
    '([...[([...[].x] = x)].x] = x);',
    '([...{}.x] = x);',
    '({...[][x]} = x);',
    '({...[][x]} = x = y);',
    '({...[][x]} = x = (y));',
    '({...[][x]} = (x) = (y));',
    '({...{}[x]} = x);',
    '({...{}[x = (y)[z]]} = x);',
    '([...[({...{}[x = (y)[z]]} = x)][x]] = x);',
    '([...[][x]] = x);',
    '([...{}[x]] = x);',
    '({...{b: 0}.x} = {});',
    '({...[0].x} = {});',
    '({...{b: 0}[x]} = {});',
    '([0])=>0;',
    '({x = y}).z',
    '[{x = y}]',
    '({x = y}.z = obj)',
    '(/x/) => x',
    '(x, /x/g) => x',
    '(x, /x/g) => x',
    '({...[]} = x);',
    '({...obj1,} = foo)',
    '({...obj1,a} = foo)',
    '({...obj1,...obj2} = foo)',
    '({ident: {x}.join("")}) => x',
    '({ident: {x:y} += x})',
    '({ident: {x}/x/g}) => x',
    '(...a = x,) => {}',
    '({...(a,b)} = foo)',
    '({a: 1} = []);',
    '(...{a: b}.c = [])',
    '([x, y]) = z;',
    '{x, y} = z;',
    '({x, y}) = z;',
    `(x={200: await z}) => t`,
    '([a \n/b/]);',
    '([x],) => {}',
    '(obj[0]) = 1;',
    '(obj.a) = 1;',
    '({a:((((a1))))} = {a:20})',
    '({a:a1 = r1 = 44} = {})',
    '({a, a:a, a:a=a, [a]:{a}, a:b()[a], a:this.a} = 0);',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    'f = (argument1, [a,b,c])',
    '({[x]:y});',
    '({ident: [foo, bar] + x})',
    '({ident: {x: y}})',
    '([a / b]);',
    `([a
      /b/g]);`,
    '({a:(b) = c})',
    '({a:(b) = 0} = 1)',
    '({a:(b) = c} = 1)',
    '({ a: (b) } = {})',
    '(async)=2',
    '({200:exp})',
    '({[foo]: x} = y)',
    '({[foo]: bar} = baz)',
    '(true)',
    '[(a) = 0] = 1',
    '[(a.b)] = 0',
    '([a]) => b;',
    '[{x: y.z}] = a',
    '(foo.x)',
    'async ({x=z}, y) => x;',
    'async (foo = yield)',
    'delete ((foo) => foo)',
    '({...[]} = x);',
    '({...obj1,} = foo)',
    '({...obj1,a} = foo)',
    '({...obj1,...obj2} = foo)',
    '({ident: {x}.join("")}) => x',
    '({ident: {x:y} += x})',
    '({ident: {x}/x/g}) => x',
    '(...a = x,) => {}',
    '({...(a,b)} = foo)',
    '({a: 1} = []);',
    '(...{a: b}.c = [])',
    '([x, y]) = z;',
    '{x, y} = z;',
    '({x, y}) = z;',
    `(x={200: await z}) => t`,
    '([a \n/b/]);',
    '(a \n/b/);',
    '( (x) = y ) => {}',
    '({...{z}} = { z: 1})',
    '( { ...{ x = 5 } } = {x : 1})',
    '({...{}} = {})',
    '({ async = true })',
    '({...obj1,a} = foo)',
    '({a: {a: 1} = []})',
    '({a:(a,y) = 0} = 1)',
    '([].length) => x;',
    '(...{a: b}.c = [])',
    `({a: b * x} = d)`,
    '({...x = 1} = {})',
    `(q, {a: b * x} = d)`,
    '({...a, x } = { x: 1 })',
    '(q, {...a, x } = { x: 1 })',
    '({...a, x, ...b } = { x: 1 })',
    '(q, {...a, x, ...b } = { x: 1 })',
    '(q, {...a, x, ...b } = { x: 1 })',
    '({a, ...rest.b + rest.b} = o)',
    '({a}=1)=1',
    '({a:a}=1)=1',
    '(a.())',
    '(a = 1) = t ',
    '({[b]}})',
    '({[b], x})',
    '({a: (b) = 0} = 1) => x',
    '({a: (b.x) = 0} = 1) => x',
    '({a: [b.x] = 0}) => x',
    '({a:{x = y}.z} = x);',
    '({a: {a: b.x} = 0}) => x',
    '([{x: y.z}]) => b',
    '([{x: y.z}] = a) => b',
    '([{x: y.z} = a]) => b',
    '([x()]) => x',
    '([x().foo]) => x',
    '([x[y]] = z) => {}',
    'function f([x[y]] = z) {}',
    '(({ x = 10 } = { x = 20 }) => x)({})',
    '((a=b))= (a)',
    '([...x.y]) => z',
    '((a[b]/b))= (a)',
    '[a]= (a?.b=x)',
    '(a)= (a?.b=x)',
    '({a})= (a)',
    '[(a/b)]= (a)',
    '(a?.b)= (a)',
    '([a]) = (a)',
    '([a]) = (a)[a/b]',
    '([a])/= (a)',
    '(a?.b)= (a)',
    '(a[b] ? c : d) = (a)',
    '(a.x++)++',
    '({1: [b.c = x]} = 2 / (3 = ((a)) = a))',
    '({ x: x ||= 2 ] = { x: 2 })',
    '({ x: x &&= 2 ] = { x: 2 })',
    '({ x: x ||= 2 ] = { x: 2 })',
    '({a:this}=0)',
    '({a:this}=0)',
    '({a: this} = 0);',
    '({...a})=x',
    '(...[a) = a',
    '(...a) = a',
    '(a,b)=(c,d);',
    '({a = 0});',
    '({a} += 0);',
    '({,a,} = 0)',
    '([...++x]= {});',
    '([ ...(++y) ]= {});',
    '([ ...(++y) ]= {});',
    '({*=f(){}})',
    '({a}=1=1)',
    '({a:a}=1=1)',
    `(x) = (1) += z`,
    `(x) += (1) = z`,
    '({1}) = {}',
    '({+2 : x}) = {};',
    '({x+=y})',
    '({,} = {});',
    '({ x: y } = {}) = {}',
    '(({ x: y } = {})) = {}',
    '(({ x: y }) = {}) = {}',
    '(...abc,)',
    '(...a=b=c)',
    '(...abc,)',
    '(...abc=,)',
    '(...abc,=)',
    '(...abc,,,,,,,=)',
    '(...abc,,,,,,,=====)',
    '(...a=b=c)',
    '(...abc,)',
    '(...)',
    '({a:1},)',
    '(a:) --b',
    '(a++',
    'a(1,,);',
    `([x] = y,)`,
    `({a} = b,)`,
    `(a,) = x`,
    `(a,b,) = x`,
    `(a = b,) = x`,
    `([x],) = x`,
    `({a},) = x`,
    `([x] = y,) = x`,
    `({a} = b,) = x`,
    '([a]) = 0',
    '({set a([a.b]){}})',
    '({b}) = b;',
    '([a]) = x',
    '("a") = "b"',
    '({a([a.b]){}})',
    '({x:true = 5})',
    '([[a](b.c) = [[a] = [[a] = ([[a] = x]]]]))',
    '([[a](b) = [[a] = [[a] = ([[a] = x]]]]))',
    '([[a] = [[a] = [[a] = ([[a] = x]]]]))',
    '([...a, ,] = [...a, ,])',
    '({*a([a.b]){}})',
    '({a, b}) = {a: 1, b:2}',
    '([b]) = b;',
    '({a: [a + 1] = []});',
    '({a}) = 0',
    '({a}) = 2;',
    '({a, b}) = {a: 1, b:2};',
    '({a}) = 1;',
    '({x : , y} = {});',
    '({get foo() {}} = {});',
    '({set foo(a) {}} = {});',
    '({set ["foo"](a) {}} = {})',
    '({a:this}=0)',
    '({ x }) = { x: 5 };',
    '(a,b,c,);',
    '({(a)} = 0)',
    '({ src: ([dest]) } = obj)',
    '({a:(b = 0)} = 1)',
    '([a += a] = a)',
    '({[a]: {...[a[]]}})',
    '({...{}} = {});',
    '(((...a))',
    '(((a, ...b)))',
    `({a}) = 0;`,
    `([a]) = 0;`,
    `({a} += 0);`,
    '({a: 0} = 0);',
    '({get a(){}} = 0)',
    '({set a(b){}} = 0)',
    '({a(b){}} = 0)',
    '(((...a)))',
    '({...a}) = b',
    '([...x=y]) = z',
    '({a: ("string") / a[3](((((a /= [b.c => a] = ([x / 2]())))))) })',
    '(new.target) = 1',
    '({ident: {x}.join("")}) => x',
    '({ident: {x:y} += x})',
    '({ident: {x}/x/g}) => x',
    '({...obj1,} = foo)',
    '({...(a,b)} = foo)',
    '({...(a,b)} = foo)',
    '({ a = 42,  b: c = d, })',
    '({a},)',
    '({...{a, b}} = x)',
    '({a},) = x',
    '(...a = x,) = x',
    '([a + b] = x);',
    '([b]) = b;',
    '([x],) = x',
    '(a = b,)',
    '(a,,) = x',
    '(,,)',
    '(,) = x',
    '(,,) = x',
    '(a,) = x',
    '(...a = x,) = x',
    '({a} = b,) = x',
    '(...);',
    '(a[b],c)+=2',
    '(a,b)=2',
    '(a=1)+=2',
    '(a=1)=2',
    '({get p(...[]) {}})',
    '({set p(...[]) {}})',
    '...x => x',
    '([{x = y}.z] = obj)',
    '[{x = y}]',
    //'([x]++)',
    '(()) => 0',
    '({...x.y} = z) => z',
    '({ x = 123 });',
    '({ident: [foo, bar] += x})',
    '({...{x} }) => {}',
    '({...(x) }) => {}',
    '((x={15: (await foo)}) => x',
    '({x: 15.foo()} = x)',
    '({x: 15.foo} = x)',
    '([{a:b[0]}])=>0',
    '(foo ? bar : baz, a) => {}',
    '({a: (1) = x })',
    '({a: 1 = x })',
    '({ x: x }) = a;',
    '({foo: {x:y} += x})',
    '({foo: {} += x})',
    '({get a(){}})=0',
    '({x}) = {x: 1};',
    '([a]) = []',
    '-(5) ** 6;',
    '([a]) = 0',
    '({a}) = 0',
    '(a = b) = c;',
    '({ a: (a = d) } = {})',
    '({...[x] }) => {}',
    '(c, a.b) => {}',
    '({x: 15.foo()} = x)',
    'x = {x: 15.foo()} = x',
    'x = ({}) = b',
    '({15: 15.foo()}=x)',
    '({foo: {x:y} += x})',
    '({x}) = {x: 1};',
    '({a: {x = y}}).z',
    '([x.y = a] = (...z))',
    '(([x])=y in z);',
    '(0, {a = 0}) = 0',
    '({a = 0}, {a = 0}, 0) => 0',
    'async (a, ...b=fail) => a;',
    '({x:{1:y()=x},x:{7:3}})>x',
    '([a + 1] = []);',
    '([1, a] = []);',
    '[((a)] = [];',
    '(a,b,) = x',
    '({...[]} = x);',
    '(...x);',
    '({[foo]: bar()} = baz)',
    '({[foo]: a + b} = baz)',
    '({x})=y',
    '(a,b,)',
    '(a = b,) = x',
    '({[].length} = x);',
    '({[x].length} = x);',
    '({{}.length} = x);',
    '({{x: y}.length} = x);',
    '({delete(){}} = y);',
    '({yield(){}} = y);',
    '({a: {b = 0}.x} = {})',
    '({3200: fail() = x} = x)',
    '({foo: fail() = x} = x)',
    '({get * bar(){})',
    'x({*[foo',
    '({set * bar(x){})',
    '({static * bar(x){})',
    '({*(){}})',
    '({   async *[x"',
    '({   async *[x',
    '( new x ) = x',
    '( this ) = x',
    '({a({e: a.b}){}})',
    '({*a({e: a.b}){}})',
    '({set a({e: a.b}){}})',
    '(...a,)',
    '(...a,) = x',
    '([x] = y,)',
    '({a} = b,)',
    "((...'z'))",
    '((...z))',
    "'(...(...z))",
    '([x.y = a] = (...z))',
    "(c, a['b']) => {}",
    '({a: {x = y}}.z) => obj',
    '({a: {x = y}.z})',
    '({a: 1 = x })',
    '(y) = (1) = x',
    '(1) = x',
    '(a,) = x',
    '([x] = y,) = x',
    '({a},)',
    '(,)',
    '({x = y}.z)',
    '([{x = y}])',
    `({15: 15.foo}=x)`,
    '(()) => 0',
    '({...{}} = {})',
    '({...obj1,...obj2} = foo)',
    '({a: {x = y}}.z = obj)',
    '({a: {x = y}.z})',
    '({a: {x = y}}.z)',
    '({a: {x = y}})',
    '([{x = y}]).z',
    '({[x](){}} = z);',
    '({x:{1:y()=x},x:{7:3}})>x',
    '({x = y} = z)',
    '({a: {x = y}} = z)',
    '({...a,b,c})',
    '({ident: {x: y}})',
    '(false)',
    `a = (
  b,
  c
)`,
    '([]())',
    '({}())',
    '([](a))',
    '({}(a))',
    '([](a,b))',
    '({}(a,b))',
    '(a())',
    '(a(b))',
    '([a.b] = x);',
    '(x--);',
    '([target()[targetKey(a=b)]] = x);',
    '([].length) = y',
    '([x].length) = y',
    '({}.length) = z',
    '({x: y}.length) = z',
    '({x});',
    '(2 * 3 ** 2, 18)',
    '(1, 2, 3, 4, 5)',
    '([...x=y])',
    '([a])',
    '(([a]))',
    '([a] = [])',
    '(([a] = []))',
    '(x--, y);',
    '((x));',
    '(++x);',
    '({} + 1);',
    '([] + 1);',
    '(q, {} + 1);',
    '(([(((null))), , (([(2).r = (((308)) ? this : (x)), aihgi] = ({}))), (8), (y)]))',
    '(q, [] + 1);',
    'async ([] + 1);',
    '(a(b,c))',
    '(a([]))',
    '(a({}))',
    '(a.a())',
    '([ foo()[x] ] = z = {})',
    '([ foo().x ] = z = {})',
    '([ foo().x ]= z = {})',
    '([ foo()[x] ] = {})',
    '([ x.y ]= z = {})',
    '([ foo()[x] ]= z = {})',
    '(x = (yield) = f) => {}',
    '([ x[y] ] = z = {})',
    '([ [ foo().x ] ]= z = {})',
    '([ x[y] ]= z = {})',
    '([ [ foo()[x] ] ]= z = {})',
    '([ [ foo()[x] ] ] = {})',
    '([ [ x.y ] ]= z = {})',
    '({a: 1, b: 1}, y = { a: 1, ...x, b: 2, ...z });',
    '({ a: 1 }, y = { ...x });',
    '({0: 0, 1: 1}, y = { ...[0, 1] });',
    '(x + y) >= z',
    '(x + y) <= z',
    '(x + y) != z',
    '(x + y) == z',
    '(x + y) == z',
    '(x) / y',
    '(false)',
    '([{}]);',
    '([delete foo.bar]);',
    '({ x, y, ...z } = o)',
    '([...[][x]] = x)',
    '(a = 1, b = 2);',
    '(a.b) = 1;',
    '(a) = 1;',
    '(a[b]) = 1;',
    '(a.b().c().d) = 1;',
    '(a.b().c().d) = 1;',
    '(this.a) += 1;',
    '(this.a) = 1;',
    '(this[b]) = 1;',
    '([x, y] = z);',
    '([[x, y] = z]);',
    '(a.b) += 1;',
    '(a.b().c().d) += 1;',
    `([].x);`,
    '(delete foo.bar);',
    '({});',
    '([...[].x] = x)',
    '([...{}[x]] = x)',
    '([...{}.x] = x)',
    '({...[][x]} = x)',
    '({...[].x} = x)',
    '({...a.x} = x)',
    '({...{}[x]} = x)',
    '([...[].x] = x, [...[].x] = x)',
    '([...{}[x]] = x, [...{}[x]] = x)',
    '([...{}.x] = x, [...{}.x] = x)',
    '(x.foo)',
    '(x + foo)',
    '(x.foo = y)',
    '(typeof x)',
    '(...{destruct}) => x',
    'async(...ident) => x',
    ' async(...[destruct]) => x',
    '([a]) => b;',
    '([a] = b) => c;',
    '([a=[b.c]=d]) => e;',
    '({...[][x, y]} = x)',
    '({...{}[x, y]} = z)',
    '({...[0][x]} = {})',
    '(a.a(b))',
    '(a.a(b,c))',
    '(a.a([]))',
    '(a=b)',
    '(a=b=c)',
    '(a=(b=c))',
    '((a??b.c)??a.b)',
    '((a??b))',
    '(a.a({}))',
    '(a,b)',
    '(a,b,c, 1,2,3)',
    '(a[b])',
    '(a[{}])',
    '(a[[]])',
    '(a[1])',
    '({...{}.x} = x);',
    '({...[0][x]} = {});',
    '({...[0].x} = {});',
    '((a))()',
    '({} = 0);',
    '({foo: true ** false});',
    '({ x: x } = a);',
    '({ x } = a);',
    'new c(x)(y)',
    '"use strict"; ({ x: a, x: b } = q);',
    `({
      a,
      a:a,
      a:a=a,
      [a]:{a},
      a:some_call()[a],
      a:this.a
    } = 0);`,
    'a = (b = c)',
    '({a:(b) = c})',
    '({a:(b) = 0} = 1)',
    '({a:(b) = c} = 1)',
    '({ a: (b) } = {})',
    '(async)=2',
    '({200:exp})',
    '({[foo]: x} = y)',
    '({[foo]: bar} = baz)',
    '(true)',
    '[(a) = 0] = 1',
    '[(a.b)] = 0',
    '([a]) => b;',
    '[{x: y.z}] = a',
    '(foo.x)',
    'async ({x=z}, y) => x;',
    '({a:((((a1))))} = {a:20})',
    '({a:a1 = r1 = 44} = {})',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    'f = (argument1, [a,b,c])',
    'f = (argument1, { x : x, y : y = 42 })',
    'f = (argument1, [{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]])',
    '(argument1, [a,b,...rest])',
    'f = ( {[x] : z} )',
    '(a, b, c, 1, 2, 3);',
    '({[x]:y});',
    `a = (
      b,
      c
    )`,
    '({ a, ...b } = c)',
    '({ a } = c)',
    '({a, ...b})',
    '(let.a) += 1;',
    '({0: y} = 0)',
    '({ ...c[0]})',
    '({ ...d.x })',
    '({ x: (y) = [] })',
    '({ x: (foo.bar) })',
    '([a = 1])',
    '({ x: (y) })',
    '({x, ...y} = {})',
    '(x + y);',
    '(null);',
    '(new x)',
    '(class{})',
    '(arguments)',
    '([{x:x, y:y, ...z}, [a,b,c]] = {})',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    '([{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {});',
    '([{x:x, y:y}, [a,b,c]])',
    '({[1+1] : z, ...x} = {})',
    '({arguments: x, ...z} = {});',
    '({a: {eval}.x} = {});',
    '({...{eval}.x} = {});',
    '({ a: 1 }).a === 1',
    '({ x : [ y = 10 ] = {} })',
    '({ x : [ foo().y = 10 ] = {} })',
    '({ x : [ foo()[y] = 10 ] = {} })',
    '({ x : [ y.z = 10 ] = {} })',
    '({ z : { __proto__: x, __proto__: y } = z })',
    '({ x : [ y[z] = 10 ] = {} })',
    '([ x ])',
    '([ foo().x ])',
    '([ foo()[x] ])',
    '([ x.y ])',
    '([ x[y] ])',
    '([ { x } ])',
    '([ { x : y } ])',
    '([ { x : foo().y } ])',
    '([ { x : foo()[y] } ])',
    '([ { x : x.y } ])',
    '([ { x : x[y] } ])',
    '([ { x = 10 } = {} ])',
    '([ { x : y = 10 } = {} ])',
    '([ { x : foo().y = 10 } = {} ])',
    '([ { x : foo()[y] = 10 } = {} ])',
    '([ { x : x.y = 10 } = {} ])',
    '([ { x : x[y] = 10 } = {} ])',
    '([ [ x = 10 ] = {} ])',
    '([ [ foo().x = 10 ] = {} ])',
    '([ [ foo()[x] = 10 ] = {} ])',
    '({ x : y, ...z })',
    '({ x : y = 1, ...z })',
    '({...x})',
    '({a: [b = 1, c = 2][1]} = {a:[]});',
    '({a: [b = 1, c = 2].b} = {a:[]});',
    '({0: x, 1: x} = 0)',
    '({a:let} = 0);',
    '([[]]=0)',
    '({x: y = 0} = 1)',
    '({x: y = z = 0} = 1)',
    '({x: [y] = 0} = 1)',
    '((a,a),(a,a))',
    '((((((((((((((((((((((((((((((((((((((((a))))))))))))))))))))))))))))))))))))))))',
    '({ x : y } = z = {});',
    '({ x : foo()[y] } = z = {});',
    '({ x : { foo: foo().y } });',
    '[...{a}] = [{}]',
    '({x:z = 1, x1:y = 20} = {});',
    '(q, { x = 10 } = {});',
    '({ x } = { x: 3 });',
    '({ x = 10 } = {});',
    '([a ** b]);',
    '({a, b} = {a: 1, b: 2});',
    '({ident: [foo, bar].join(s)})',
    '({ident: {x}})',
    '({ident: {x:y}/x/g})',
    '(a / b);',
    '({ident: {x:y}**x})',
    '(foo + (bar + boo) + ding)',
    '({ident: {x: y}.join(z)})',
    '({ responseText: text } = res)',
    '(foo, [bar, baz] = doo);',
    '([ ...(a) ] = z = {});',
    '([ (foo.bar) ] = z = {});',
    '(1)',
    '[(a)] = 0',
    '([...x.y] = z)',
    '({123(){}})',
    '({123: expr})',
    '({[key](){}})',
    '({[key]: a.b} = c)',
    '({...key = x})',
    '({...key.prop} = x)',
    '({...key})',
    '([(x).foo = x] = x)',
    '(a = b)',
    '((((((((((x))))))))));',
    '({a:(b)} = 0)',
    '({a:(b.c)} = 0)',
    '({a:(b = 0)})',
    '([(x)] = z = {});',
    '([...{}.x] = x);',
    '([...[]] = x);',
    '({x = 1} = {});',
    '({ __proto__: x, __proto__: y } = {})',
    '({x:y} = {});',
    '({a:(b)} = 0)',
    '({a:(b) = 0} = 1)',
    '(typeof x)',
    '({web: true,  __proto__: x, __proto__: y});',
    '({a:(b.c)} = 0)',
    '({a:(b = 0)})',
    'delete (foo)',
    '({x, y = 1, z = 2} = {});',
    '({[foo()] : z} = z = {});',
    '({[foo()] : (z)} = z = {});',
    '({[foo()] : foo().bar} = z = {});',
    '({x: y} = 0)',
    '({x} = 0)',
    '({x, y = 1, z = 2} = {});',
    '({42 : x} = {})',
    '([a,,...rest] = {})',
    '({var: x = 42} = {})',
    '({x, ...y, a, ...b, c})',
    '([...[]] = x);',
    '({...[].x} = x);',
    '({...a[x]} = x);',
    '({...a.x} = x);',
    '({...[({...[].x} = x)].x} = x);',
    '({...a.x} = x);',
    '({...x.x, y})',
    '([target()[targetKey()]] = source())',
    '() => {([(x), y] = x)}',
    '([ (foo.bar) ] = {})',
    '([ (y) ]= z = {})',
    '([(({ x } = { x: 1 }) => x).a]= z = {})',
    '([(({ x } = { x: 1 }) => x).a] = z = {})',
    '([((x, y) => z).x]= z = {})',
    '([(x)] = {})',
    '([(x)]= z = {})',
    '([(x),,(y)] = {})',
    '([ (foo.bar) ]= z = {})',
    '([x.y = a] = ([x.y = a] = ([x.y = a] = z)))',
    '({...{}.x} = x);',
    '([...[].x] = x);',
    '([...[([...[].x] = x)].x] = x);',
    '([...{}.x] = x);',
    '({...[][x]} = x);',
    '({...[][x]} = x = y);',
    '({...[][x]} = x = (y));',
    '({...[][x]} = (x) = (y));',
    '({...{}[x]} = x);',
    '({...{}[x = (y)[z]]} = x);',
    '([...[({...{}[x = (y)[z]]} = x)][x]] = x);',
    '([...[][x]] = x);',
    '([...{}[x]] = x);',
    '({...{b: 0}.x} = {});',
    '({...[0].x} = {});',
    '({...{b: 0}[x]} = {});',
    '({...[0][x]} = {});',
    '({...[1][2]} = {});',
    `({a:b,...obj}) => {}`,
    `({a,...obj}) => {}`,
    `({...obj} = {}) => {}`,
    `({a:b,...obj} = foo)`,
    `({...a, ...b})`,
    `({...a}=x)`,
    `({obj: x, ...a})`,
    '(a.b = {});',
    '(a[i] = {});',
    '({ a: obj.a } = {})',
    '({ a: this.a } = {})',
    '( [a] = []);',
    '({x, x1:y = 20} = {});',
    '({ a: {prop: 1}.prop } = {})',
    '(x|y)^y',
    '({x,} = 0)',
    '({x,y} = 0)',
    '({x,y,} = 0)',
    '({d=0,f:h().a} = 0)',
    '({yield} = 0);',
    '({yield = 0} = 0);',
    '({x=0, y:z} = 0)',
    '({x: y,} = 0)',
    '({[a]: a} = 1)',
    '({ foo, bar } = foo);',
    '({[a = b]: {}})',
    '({[a = (b)]: {}})',
    '({[(a)()]: {}})',
    '({a = [b]} = c)',
    '({a = [b]} = 1)',
    'a += (b + c)',
    'a + (b += c)',
    'a -= b -= c',
    'a -= (b + c)',
    '({[a]:b, ...rest})',
    '({ }).x',
    '({ x = y } = {});',
    '({ x: [ x ] } = { x: null });',
    '({ x: { x } } = { x: null });',
    '({ x: { x } } = { x: undefined });',
    '({ x: { x } } = {});',
    '({ x: [ x ] } = { x: undefined });',
    '({[(a)(x = (y))]: {}})',
    '({a = [b]} = 1 * (c = d))',
    '({a = [b]} = 1 * (d = (e)))',
    '({1: [b.c = x]} = 1 / (d = ((a)) = a))',
    '({1: [b.c = x]} = 2 / (dd = ((a)) = 3))',
    '({1: [b.c = x]} = 2 ** (dd = ((a)) = 3))',
    '({1: [b.c = x]} = 1 * (d = ((a)) = a))',
    '([ [ foo()[x] = 10 ] = {} ])',
    '([ [ 12()[x] = 10 ] = {} ])',
    '({a: {b: (c)}})',
    '({x} = {x:3});',
    '({...x}[y])',
    '({} = undefined);',
    '({x, y:[y]} = {x:5, y:[6]});',
    '({ test = 1 } = {})',
    '({x = 0} = 1)',
    '({x = 0,} = 1)',
    '({var: x} = 0)',
    '({b, c, d, ...{a} })',
    '((a)) = b',
    '({}.length)',
    '({}.x)',
    '([].x)',
    '([x].foo) = x',
    '({*15(){}})',
    '({x, ...y}) => x',
    '({...x.y} = z) ',
    '(z = {...x.y}) => z',
    '(foo[x])',
    '(foo) += 3',
    '({a:(b) = c} = 1)',
    `(x) += (y) = z`,
    '(x) = (y) += z',
    '(a.b) = 0',
    '(1) + (2  ) + 3',
    '((((((((((((((((((((((((((((((((((((((((((((((((((0))))))))))))))))))))))))))))))))))))))))))))))))))',
    '({a: {x = y}} = z)',
    '({a: {x = y}}) => z',
    '4 + 5 << (6)',
    '(a) + (b)',
    '((a))()',
    '"use strict"; (await) = 1',
    '((a))((a))',
    '((a)) = 0',
    '(a) = 0',
    'void (a)',
    '(a)++',
    '(a) ? (b) : (c)',
    '(a++)',
    '(void a)',
    '({Foo} = {});',
    '({foo, bar} = {foo: 0, bar: 1});',
    '({} = 0);',
    '({ responseText: text } = res);',
    '({f({x} = {x: 10}) {}})',
    '({f: function({x} = {x: 10}) {}})',
    'f = function({x} = {x: 10}) {};',
    '([a.b])',
    '(a[b])',
    '([x])',
    '({x})',
    `({}.length)`,
    '({a, a})',
    '({a, a: 1})',
    '({a: 1, a})',
    '({a: 1, a})',
    `({a: b = x} = d)`,
    `({a: b = x} / d)`,
    `({a: b * x})`,
    `(q, {a: b = x} = d)`,
    `(q, {a: b = x} / d)`,
    `(q, {a: b * x})`,
    `({a: b} = d)`,
    `(x) = (y) += z`,
    `(x) = (y) = z`,
    `(x) += (y) = z`,
    `(foo.x)`,
    `(foo[x])`,
    `(foo) += 3`,
    '(++this.x)',
    '--(((x)));',
    '({a: 1 || 1}.a = 1)',
    '(q, {a: 1 || 1}.a = 1)',
    '(4,(5,a(3,4))),f[4,a-6]',
    '((((a))((b)()).l))()',
    '({...{}})',
    '({a:b,...obj} = foo)',
    '({1: x})',
    '({1: x}=1)',
    '({1: x}=null)',
    '({1: x})',
    '({1: x}=1)',
    '({1: x}=null)',
    '({a: b}=null)',
    '({[x]: 1})',
    '({a}=1)()',
    '({a:a}=1)()',
    `([...x.y] = z)`,
    `(z = [...x.y] = z) => z`,
    `([...x, ...y]);`,
    '([x, ...y]) => x',
    `([...x+=y]);`,
    `([...x=y]);`,
    `([...x]);`,
    '({1: ({}) / (1)});',
    '({1: ({}) ? (1) : [1]});',
    '({1: (x * y - z)});',
    '([arguments] = []);',
    '({})(a = b);',
    '({1: (x = x) });',
    '({ q } = { x = 10 } = {});',
    '({ x = 10 } = {})',
    '(q, { x = 10 } = {})',
    '({ a, b: x })',
    '(x = {eval})',
    '({eval} = x)',
    '({ async x() {} })',
    '({ async x() {} })',
    '({ async [foo]() {} })',
    '({ get 500() {} })',
    '({ set 500(b) {} })',
    '({ set [foo](d) {} })',
    '({a: {b} = 0}) => x',
    '({a: {b: c} = 0}) => x',
    '([x[y]] = z)',
    '(q, [x[y]] = z)',
    '({a: {arguments}.x} = {});',
    '({...{arguments}.x} = {});',
    '({a: (b) = 0})',
    '({a: (b.x) = 0})',
    '({a: (b) = 0} = 1)',
    '({a: (b.x) = 0} = 1)',
    '([...{a = b} = c])',
    '({a: {a: b.x} = 0})',
    '({a: {b: c} = 0})',
    '({a: {b} = 0})',
    '({a: {b}})',
    '({a: {b}, c})',
    '({a: [b] = 0})',
    '({a: [b.x] = 0})',
    '({a: [b] = 0}) => x',
    '({...{b: 0}[x]} = {});',
    '({...{b: 0}.x} = {});',
    '([target()[targetKey()]] = x);',
    '({...x.x, y})',
    '({...x.x = y, y})',
    '({...x = y, y})',
    '([x.y = a] = z)',
    '([x.y = a] = ([x.y = a] = ([x.y = a] = z)))',
    '([{x = y}] = z)',
    '({..."x".x} = x);',
    '(a.b) += 1;',
    '(this.a) += 1;',
    '({...{}.x} = x);',
    '([...[].x] = x);',
    '([...[([...[].x] = x)].x] = x);',
    '({...[({...[].x} = x)].x} = x);',
    '({...[].x} = x);',
    '([...[]] = x);',
    '({...(a,b),c})',
    '([...{}.x] = x);',
    '({...a.x} = x);',
    '({..."x"[x]} = x);',
    '({...[][x]} = x);',
    '({...[][x]} = x = y);',
    '({...[][x]} = x = (y));',
    '({...[][x]} = (x) = (y));',
    '({...{}[x]} = x);',
    '({...{}[x = (y)[z]]} = x);',
    '({a: {x = y}} = z)',
    '([...[({...{}[x = (y)[z]]} = x)][x]] = x);',
    '([...[][x]] = x);',
    '([...{}[x]] = x);',
    '([...{}[x]] = "x");',
    '({...{b: 0}.x} = {});',
    '({...[0].x} = {});',
    '({...{b: 0}[x]} = {});',
    '({...[0][x]} = {});',
    '({...[1][2]} = {});',
    '(let)[x].foo in x;',
    '({x: y.z} = b)',
    'foo({get [bar](){}, [zoo](){}});',
    'foo({[bar](){}, get [zoo](){}});',
    'foo({set [bar](c){}, [zoo](){}});',
    'foo({[bar](){}, set [zoo](e){}});',
    'a = (  b, c  )',
    '([...[].x] = x);',
    '({a:(b) = c})',
    '({a:(b) = 0} = 1)',
    '(x, y, ...z) => foo',
    '({ a: (b) } = {})',
    '(async)=2',
    '({200:exp})',
    '({a:(b) = c} = 1)',
    '({*ident(){}})',
    '({*[expr](){}})',
    '({*20(){}})',
    '(x=(await)=y)',
    '({[foo]: x} = y)',
    'x=x=x',
    '({"a b c": bar})',
    '(null)',
    '(x, /x/)',
    '(/x/g)',
    '({ a: {prop: 1}.prop } = {})',
    `({ async* f(a, b, ...c) { await 1; } })`,
    '([(x())[y] = a,] = z);',
    '({ident: {x:y}/x})',
    '(async ());',
    '({ident: [foo, bar]/x/g})',
    '({ident: [foo, bar].join("")})',
    '({[x]: y}) => z;',
    '({[foo]: bar} = baz)',
    '([...x]);',
    '([...x]) => x',
    '(z = [...x.y] = z) => z',
    '(z = [...x.y]) => z',
    '({...obj.x} = foo)',
    '({...obj} = foo)',
    '({...x+y});',
    '({...x, ...y});',
    '[...x.y]',
    '[x,] = 0',
    '[x,,] = 0',
    '[, x,,] = 0',
    '[x, ...y] = [1, 2, 3];',
    '[, ...x] = [1, 2, 3];',
    '[...{x = 1}] = [{}]',
    '[...[x]] = 0',
    '[x, ...{0: y}] = 0',
    '[ ...(++y) ]',
    '[x, x] = 0',
    '[({a: 1}.c)] = []',
    '[x, ...x] = 0',
    '[[...x] = [2, 1, 3]]',
    '[{ x: 11, y: 22, z: 33 }]',
    '[{x : [{y:{z = 1}, z1 = 2}] }, {x2 = 3}, {x3 : {y3:[{z3 = 4}]}} ] = [{x:[{y:{}}]}, {}, {x3:{y3:[{}]}}];',
    'a = [{ x }] =  [{ x: 2 }];',
    '[{ x = 10 } = {}]',
    '[o.x=1]=[]',
    'a = [x.y] = [123];',
    'a = [x.y] = value;',
    '[a,a,,...a]=0;',
    '[(a.x)] = t;',
    '[(x)] = t; ',
    '[(((x)))] = t',
    'a = [ x[yield] ] = [33];',
    'a = [...[x, y]] = [null];',
    'a = [...x.y] = [4, 3, 2];',
    'a = [...[x[yield]]] = [2018];',
    'a = [...{ 0: x, length }] = value;',
    'a = [...{ 1: x }] = [1, 2, 3];',
    '[,] = null;',
    '[[x]] = [[1]];',
    'a = [ x = yield ] = [];',
    'result = [, x, , y, ,] = [1, 2, 3, 4, 5, 6];',
    'a = [ x = flag = true ] = [];',
    'a = [ a = x += 1, b = x *= 2 ] = [];',
    'a = [arguments = 4, eval = 5] = value;',
    '[...++x]',
    '[(a)] = 0',
    '[(a.b)] = 0',
    '[a, b] = [1, 2]',
    '[(a) = 0] = 1',
    '[a, ...b = 20,,]',
    '[...{ a }] = b',
    '[...{eval}.x] = [] = {}',
    '[(x).foo = x] = x',
    '[x()]',
    '[(x)] = obj',
    '[a.b=[c.d]=e] = f;',
    '[[[[[[[a=b] = c] = c] = c] = c] = c] = c] = [[[[[[[a=b] = c]]] = c] = c] = c] = c;',
    'a = [ a = x += 1, b = x *= 2 ] = value;',
    '[x.y = z]',
    '[1, 2, 3, ...[]]',
    '[(1) = (a = b.c)]',
    '[() = ()]',
    '[(1) = (a = b.c)]',
    '[...a, b] = v',
    `[...this] => x;`,
    `[{a: 1} = []];`,
    `[...a, ...b] = x`,
    `[([async])] = x`,
    `[{x = y}]`,
    '[{a = 0}.x] = [];',
    `[...{0=x} = c] `,
    '[...a, ] = b;',
    '[a, ...b,] = 20',
    '[a, ...b,,] = 20',
    '[a, ...b = 20] = 20',
    '[a, ...b, c] = 20',
    '[...a, ] = b',
    '[{a=b}]',
    '[++a] = [];',
    '[a + 1] = [];',
    '[1, a] = [];',
    '[((a)] = [];',
    '[a)] = [];',
    '[...c = 1] = []',
    '[...c, d] = []',
    '[123] = []',
    '["string"] = []',
    '[false] = []',
    '[[foo].food()] = x',
    '[[foo].food() = x] = x',
    '[x, y, ...z = arr] = x = obj',
    '[...[a](1)] = 3',
    '[...[a](1)] = 3',
    '[{a = b}.c]',
    '[a,b+=[x,y]] = z',
    '[a.g(...[])] = []',
    '[g(...[])] = []',
    '[0] = 0',
    '[x] += 0',
    '[...x, y] = 0',
    '[...x, ] = 0;',
    '[...x, ...y] = 0',
    '[...x,,] = 0',
    '[{a=0},{b=0},0] = 0',
    '[{a=0},...0]',
    '[...0,a]=0',
    '[...{a = b} = c] = d;',
    '[...{a = b} = c] = x',
    '[+{a = 0}];',
    '[...x, y] = 0',
    '[...x, y] = 0',
    '[this] = obj',
    '[--x = 1]',
    '[new.target]',
    '[new.target = 1]',
    '[import.meta]',
    '[import.meta = 1]',
    '[super]',
    '[super = 1]',
    '[...x += y] = a;',
    '[{a=0},{b=0},0] = 0',
    '[...0,a]=0',
    '[new.target]',
    '[...x, y] = [];',
    '[...a, ...b, ...c] = [...a, ...b, ...c]',
    '[a, ...b, {c=0}]',
    '[a, ...(b = c)] = 0',
    '[',
    '[,',
    '[]=>0',
    'a[5',
    'a[5 + 6',
    '[2=y]',
    '[a, ...]',
    '[..., ]',
    '[2=y]',
    '[x()] = obj',
    '[(x())] = obj',
    '[...(x), y] = z',
    '[(a = 1)] = t',
    '[([x])] = y',
    '[...a,] = []',
    '[[...a,]] = []',
    '[({ a: [b = 2]})] = t ',
    '[{b: [([a = 1])]}] = t  ',
    '[...x = a] = a',
    '[{a = b}].x',
    '[([x])] = t; ',
    '[(x.y) = [1/42]/=2]',
    '[{} = 2/=2]',
    '[{x = y}].z',
    '[{x = y}].z = obj',
    '[{x = y}].z = "obj"',
    '[{"x" = y}].z = obj',
    '[{x = "y"}].z = obj',
    '[{x = y}.z] = obj',
    '[{x = y}].z => obj',
    '[a=5, b=7] = ([1]) => x;',
    '[(a=5, b=(x)) = y] = ([1]);',
    '[(a=5, b=(7))] = ([1]);',
    '[a=5, b=(7).c.(d)] = ([1])',
    '[function(){}] = x',
    '[null] = x',
    '[typeof x] = x',
    '[--x = 1]',
    '[ ...([a]) ] = x',
    '[a)] = [];',
    '[null] = []',
    '[2] = 42',
    'x(a&&b=c)',
    '[(x)](y) = obj',
    '[(a = 1)] = t;',
    '[...{a: 0}] = 0;',
    '[([b])] = t;',
    '[([a])] = 12;',
    '[[(x, y)]] = x;',
    '[...[(x, y)]] = x;',
    '[ ...[ ( [ a ] ) ] ] = a;',
    '[([{ x = y }] = b.call(c)) = ()]',
    '[(a = b.call(c)) = ()]',
    '[(a = b.call(c)) = (a = b * 2)]',
    '[(1) = (a = b)]',
    '[(1) = (a = b.c)]',
    '[() = ()]',
    '[(a.b.c.d = e) = ()]',
    '[[[a.b =[{ x: x.b }]]]] = ([{ a = b / 2}])',
    '[[[a.b =[{ x: x.b = 123 }]a(b=c)]]]',
    '[(foo())] = a;',
    '[a] *= 0;',
    '[([b])] = t;',
    '[([a])] = 12;',
    '[ (++y) ] = a;',
    `[...{a: 0}] = 0;`,
    `[...[0]] = 0;`,
    `[...0] = 0;`,
    '[...[(x, y)]] = x;',
    '[...(a,b)] = [],',
    '[...[z] = [1]] = a;',
    '[[[[z++]]]]',
    '[...[ x = 5 ] ] = x',
    '[void x]',
    '[false]',
    '[function(){}.length] = x',
    '(foo, [bar, baz] = doo);',
    '[a,b=[x,y]] = z',
    '({...x, y});',
    '(z = [...x.y]) => z',
    '([...x=y]);',
    '({ x : foo()[y] } = z = {});',
    '({ x : { foo: foo().y } });',
    '(await) = 1',
    '("\\u{10FFFF}")',
    '({a} = b,) => {}',
    '([x] = y,) => {}',
    '({a},) => {}',
    '([x],) => {}',
    '(obj[0]) = 1;',
    '(obj.a) = 1;',
    '({a:((((a1))))} = {a:20})',
    '({a:a1 = r1 = 44} = {})',
    '({a, a:a, a:a=a, [a]:{a}, a:b()[a], a:this.a} = 0);',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    'f = (argument1, [a,b,c])',
    '({[x]:y});',
    '({ident: [foo, bar] + x})',
    '({ident: {x: y}})',
    '([a / b]);',
    '({await} = x);',
    '({enum} = x);',
    '({case});',
    '({static [expr',
    '({static [expr',
    'x({get "abc": x});',
    'x({get 123: x});',
    '({ [x] });',
    '({ *[x] });',
    '({catch(){}}) => x;',
    '({const}) => x;',
    '({do}) => x;',
    '({790: false} = x)',
    '({   async *[woops',
    '({static [expr"',
    '({[foo]() {}} = y)',
    '+{f(){}==',
    '+{...x)',
    'x = ({[a]:b, [15]:d});',
    '({[a]:b}=obj);',
    'x = {__proto__: a, __proto__: b} = y',
    '({__proto__: a, __proto__: b} = x)',
    '({...a}) => x',
    '({...{}})',
    `x = {
      *""() {},
    }`,
    '({y:y2} = {y:y2-2})',
    '({yield: 10 });',
    '({[foo]: x} = x) => y',
    '({[foo](){}, get [bar](){}});',
    '({ toast(a, b = 10, c) {}  });',
    '({ x([ a, b ]){} });',
    'x = { method() { }};;',
    'x = { [5 + 5]: foo }',
    '({get [x]() {}, set [x](v) {}});',
    '({a:  b.c })',
    '({a:  b.c  = d })',
    '({a:  b.c  = d  ? e : f })',
    'x({a:b=x}=y);',
    'x({a:b, c}=obj);',
    'x({a, c:d}=obj);',
    '({   async *x(){}   })',
    '({   async *1(){}   })',
    'x({async foo(){}, bar(){}});',
    'x({async foo(){}});',
    'x({async [foo](){}});',
    'x({async foo(){}, async bar(){}});',
    'x({set [foo](a){}});',
    '€',
    '1 = 2 / 3',
    '1 *',
    '2 /=',
    'a ? b',
    'a ? b :',
    'let }',
    '79[s'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });

    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js', { module: true });
      });
    });
  }
});
