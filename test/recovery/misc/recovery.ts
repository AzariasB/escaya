import * as t from 'assert';
import { recovery } from '../../../src/escaya';

// Tests to make sure no infinite loops

describe('Recovery - Misc', () => {
  for (const arg of [
    'function x',
    'function x (',
    'function x ()',
    'function x () {',
    'function x () {}',
    'function x (y {}',
    'function x (y z {}',
    'function x (y z ',
    'function x (y z {',
    'function x y z {}',
    'function x () {}',
    'function x () {}',
    'function x (= {}',
    'function x (x = {}',
    'function x ( = y) {}',
    'function x ( (/ 67)) {}',
    'function x (y = z - ) {}',
    'function x (y = z -  {}',
    'function a() {"}',
    'function a() {"string"}',
    'function a() {"directive"',
    'function a() {"use strict";',
    'function a() {"use strict;',
    'function a() {"use strictt";',
    'function a() {"use strictt"}',
    'function a() {"recovery"}',
    'function a() "recovery"',
    'function a() {"recovery"',
    'function a() "recovery"}',
    'function a() "recovery" = foo}',
    'function a(.) {}',
    'function a(..) {}',
    'function a(...) {}',
    'function a(..a) {}',
    'function a({},a) {}',
    'function a({},a {}',
    'function x ([a]) {}',
    'function x ([a=) {}',
    'function x ([a= {}',
    'function x (}',
    'function (}',
    'function x (',
    'function function',
    'export {',
    'export from !',
    'export from 1',
    'export !!{',
    'export {//// comment and more',
    'export {!',
    'export }',
    'export £',
    'import [ foo ] from "foo.js"',
    'import * foo from "foo.js";;',
    'import { foo as bar',
    'export * as',
    'export * from 1',
    'export * as x from abc',
    'export * as ',
    'export * as ****** 89779 ',
    'export %&/()=?',
    'export * as {[]@£',
    'export * as ;;;;',
    'export * as **',
    'import { [123] } from "foo"',
    'export * as x from',
    'export * as x as ****** from 1',
    'export * as x from abc',
    'import { [12 } from "foo"',
    'import { [123[[[ } from "foo"',
    'export function async() { }',
    'export function func() { };',
    'export { };',
    'export function set(x) { value = x };',
    'export let value = 0;',
    'export default function*() {}',
    'export default function*() ',
    'export function foo() { return 42 }',
    'export default 42;',
    'export let  1;',
    'export function s) { a ',
    'export function get_a() { return a };',
    'export {get}; function get() {};',
    'export default x;',
    'export lt async function *f(){} foo',
    'export async f40 }',
    'export var w = 41;',
    'expo42;',
    'export const z = "hello world";',
    'function f()port { f };',
    'export let x = 0;',
    "export { .js';",
    'export * from',
    'export var foo;',
    'export function goo() {};',
    'export let hoo;',
    'export const joo = 42;',
    'export default (function koo() {});',
    'export var y = 0;',
    'export const z = 0;',
    'export function func() { };',
    'export { };',
    'export function foo () { return "foo"; }',
    'export { };',
    'export f};',
    'export let= 0;',
    'export default}',
    'export functio()  return 42 }',
    'export  42;',
    'export let  1;',
    'export fu { a ',
    'export function get_a() { return a };',
    'export {get',
    'export default ;',
    'export lt async ){ foo',
    'export async }',
    'export  = 41;',
    'export const z = hello world";',
    'function { f };',
    'exportt x = 0;',
    "export {{{{{{{{{{{{ .js';}}}}",
    '!!! export from switch(export x from "y") {',
    'export * from',
    'export var foo;',
    'export function };',
    'export function ;',
    'export function {;}',
    'export {;}',
    'export /&()=[{][{{8[]}89[{8909lkj/    j]{[]let hoo;',
    'export const joo = 42;',
    'export default (function koo() {});',
    'export var y = 0;',
    'export const z = 0;',
    'export function func() { };',
    'export { };',
    'export function foo () { return "foo"; }',
    'import { x as 1 } from "x";',
    'import [ foo ] from "foo.js"',
    'import * foofrom "foo.js";;',
    'import { foo as bar',
    'import { foo, , } from "module";',
    'import { };',
    'import {;',
    'import {x}, {y} from "foo";',
    'import * as x, {y} from "foo";',
    'import / as a from "foo";',
    'import * as a from 12;',
    'import { x }, def from "foo";',
    'import {};',
    'import { foo as switch from "module";',
    'import { 123 } from "foo";',
    'import a, *= from foo"',
    'import a, ** from "foo"',
    'import ghost from [];',
    'import { [123 from foo',
    'import { x as   from "x";',
    'import [ foo  from "foo.js"',
    'import * foo ;;',
    'import { ',
    'import { foo, , } from "module";',
    'import { ;',
    'import {;',
    'import {x}, {y} from "foo";',
    'import * as x, {y} from "foo";',
    'import / foo";',
    'import / ;',
    'import * as a from 12;',
    'import { x }, def from "foo";',
    'import {};',
    'import { foo as switch } from "module";',
    'import { 123 } from "foo";',
    'import a, *= from "foo"',
    'importa, ** from "foo"',
    'import ghost from [];',
    'import { [123] } from "foo"',
    "import { a ,,, from 'foo';",
    "import { , c, } from 'baz';",
    "import * as fobar.js';",
    'import {,t, from } from "baz"',
    "import {} from 'x'",
    'import {a} ',
    "import {a as b} from 'x'",
    "import {a,b,} from 'x'",
    "import m ;;'baz';",
    'import $o"',
    'import ;{} from "foo";',
    "import n from 'n.js';",
    'import at async from "foo";',
    "import { 'm.js';",
    "import { a } from 'foo';",
    "import { a, b ,,,,,,, !!!!! //} from 'baz';",
    "import * as foob from 'bar.js';",
    'import { aset, set,;; from } from "baz"',
    "import {}x'",
    "import {a} from 'x'",
    "import {a as b} from 'x'",
    "import {a,,n from 'x'",
    "import foo, * as bar from 'baz';",
    'import $ from "foo"',
    'importv [ { from "foo";',
    "import **//  from 'n.js';",
    'import a from "module";',
    'import async from "foo";',
    "import { } from 'm.js';",
    "import { a } from 'foo';",
    "import { a, b as d, c, } ;;from 'baz';",
    "import * as;;;;;;;;;;;;;; foob from 'bar.js';",
    'import { as, get, s from  from "baz',
    "import {} from 'x'",
    "import a} from 'x'",
    "import a as b} from 'x'",
    "import {a,[[[[[[[[[[------2b,} from 'x'",
    'import foo, * as ',
    'import foo, * as $s',
    'import $ ',
    'import { foo";',
    "import }}}}}}}{ /*asdf*/ a / ? : c n from 'n.js';",
    'import "module";',
    'import module";',
    'import async from "foo";',
    "import { } from 'm.js';",
    'export const boo = 5;',
    'import {ns hree";',
    'export let = 0;',
    'export var y = 0;',
    'export const z = 0;',
    'export default x;',
    'export function func() { };',
    'var x; export default x = ',
    'export {  } from  ||',
    "export * from 'soms;",
    'var foo; export { foo as for };',
    'export { arguments }}}}} from @$£€€$£@',
    "export { for } from 'm.js';",
    "export { yield '",
    "export { yield '",
    "export { yield '",
    'export {{{{{ yield ',
    'export {{{{{ }}}} yield ',
    'export { static',
    "export { let } from 'm.js'",
    "export * as arguments from 'm.js'",
    "export * as await from 'm.js'",
    "export * as default from '",
    "export * as  from 'm.js'",
    "export * as '",
    'export * as defaul',
    'function _default() { }; export ',
    'function* g(',
    "export { a as b } from 'm.js';",
    "export { a as b  from 'm.js';",
    "export  a as b } from 'm.js';",
    "export  a as b  from 'm.js';",
    "export  a as b  ';",
    'export { a as b } from ',
    "export { a as b } from ';",
    "export * from / +'p.js';",
    'export var ----foo;',
    'export !!function goo() {};',
    'export let hoo;',
    'export const joo = 42;',
    'export default (;;;;;;;;',
    'export var 0;',
    'export cons',
    'export function func() { };',
    'export { };',
    'export function foo () { return "foo"; }',
    'export function *g() {',
    'export let x = y, {...',
    'export ;;;;',
    'export default function (',
    'export var {x} = a, {y',
    'export  = obj;',
    'export default () => {}',
    'export { encrypt }\nvar encrypt',
    'function encrypt() {} let decrypt; export { encrypt, decrypt }',
    'export const const5 = { ',
    'export const const6 =  ]',
    'function x() {  "a" ? ((this',
    'export {',
    "export var var1 = 'string';",
    "export default 'default';",
    'export var var2;',
    'export var var',
    'function _default() { }; export default _default',
    'function* g() { }; export default g',
    'export function *g() { } if (true) { }',
    'export let x = y, {...z} = y;',
    'export let x = y, [...z] = y;',
    'export default function () {}',
    'export var {x = a, {y} = obj;',
    'export var {x} = a, y = obj;',
    'export var {x',
    'export default () => {',
    'export `{',
    'export `',
    'export { encrypt }\nvar encrypt',
    'export * as default from m.js',
    'function encrypt() { { encrypt, decrypt }',
    'export const const5 = { }',
    'export const const6 = [ ]',
    'function x() {  "a" ? ((this)) : ((true));  }',
    'export {};',
    "export var ';",
    "export defaault';",
    'export var var2;',
    'export = 5, var4'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js', { module: true });
      });
    });

    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
  }

  // Misc test cases

  for (const arg of [
    'let {',
    'let a = {',
    'let !!()=',
    'let /asdfasdf',
    'let a[',
    'let }',
    'const let {',
    'let /(&)=',
    'const ....',
    'const ...',
    'YT',
    '¤',
    'let {',
    'let }',
    'try () {',
    'try (',
    'try {}',
    'switch',
    'switch(',
    'switch()',
    'switch {',
    'for',
    'for {',
    'for( {',
    'for( {}',
    'for( }',
    'break !!',
    'function',
    'function (',
    'function {}',
    'function {',
    'function }',
    '"use strict"; for(let in foo) {}',
    '"use strict"; for(let !) {}',
    'for({x = y} in foo',
    'for({x = y} in foo);',
    'for(let {x = y} in foo',
    'for(const {x = y} in foo);',
    'for(let a,b,c in x) {}',
    'for(let a,{,c in x) {}',
    'for(var a,c in x) {}',
    'for(var a,,c in x) {}',
    'for(var a,,,,,,,,,,,,,,,c in x) {}',
    'for(a,{,c in x) {}',
    'for ((a,b) in c);',
    'function arguments(){}v:switch(x){default:}let arguments=l',
    '({__proto__: a, __proto__: b});',
    '({__proto__: a, __proto__: b});',
    '({__proto__: a, __proto__:});',
    '({__proto__: a, : b});',
    '({__pto__: b});',
    `async
    function test(){
        await foo();
    }`,
    `async
    function test(
        await foo(;
    }`,
    `async
    function test(){
        await foo();
    }`,
    '`\\1`',
    '`\\1${0}right`',
    '`left${0}\\1`',
    '`left${0}\\1${1}right`',
    '"¤%&/()=?"',
    '😍',
    '/a/gg',
    '/a/uu',
    '/a/yy',
    '/a/mm',
    '/a/ii',
    '/a/gg',
    '/a/ss',
    '/a/9',
    '/a/{}}',
    '/a/}',
    '/a\n/',
    '/a\r/',
    '#!foo',
    '-->',
    '/a\u2028/',
    '/a\u2029/',
    '/a gg',
    'x\\u}',
    'x\\u{%',
    'x\\u000072',
    'x\\u0\nnewline',
    'x\\u0\u2029newline',
    '\\u{70bc',
    'x\\u[]',
    'x\\u} foo',
    'x\\ugggg',
    '\\u1',
    '\\t',
    '\\x0g',
    'x\\u{x foo',
    'x\\u0x11ffff',
    '\\u{g0}',
    'x\\uau foo',
    '\\u{70bc',
    'x\\}',
    'x\\{4fff',
    'x\\u{!',
    'x\\uu foo',
    'x\\u000072',
    'x\\u{000072',
    '#privatename',
    'x = {get [foo](){}, get [bar](){}}',
    'x = {get [foo](){}, [bar](){}}',
    'x = {[foo](){}, get [bar](){}}',
    'x = {get 123(){}}',
    'x = {set foo(a){}}',
    'x = {set get(a){}}',
    'x = {foo: typeof x}',
    'x = {foo: true / false}',
    'x = {await}  = x',
    'x = {eval}',
    'x = {"x": [y]}',
    'x = {"x": [y]} = x',
    'x = {"x": [y + x]}',
    'x = {"x": [y].slice(0)}',
    'x = {"x": {y: z}}',
    'x = {"x": {y: z}} = x',
    'x = {"x": {a: y + x}}',
    'x = {"x": {a: y + x}.slice(0)}',
    'x = {"x": 600}',
    'x = {"x": 600..xyz}',
    'x = {...y}',
    'x = {x, ...y}',
    'x = {...a=b}',
    'x = {a, ...y, b}',
    '({ async *method({ w: [x, y, z] = [4, 5, 6] } = {}) {} })',
    '({ async *method({ x: y = thrower() } = {}) {} })',
    '({ async *method([x = 23]) {} })',
    '({ async *method([_, x]) {} })',
    '({ [++counter]: ++counter, [++counter]: ++counter, [++counter]: ++counter, [++counter]: ++counter })',
    '({ async *method(a, b,) {} })',
    '({ eval: 7 })',
    '({ if: 4 })',
    '({ foo: bar = 5 + baz })',
    '({ get foo() {} })',
    '({ a,1:b })',
    '({ 1:a,b })',
    '({ foo: 1, get foo() {} })',
    '({ 1: 1, get 1() {} })',
    '({ method(a, b,) {} })',
    '({ method(x = y, y) {} })',
    '({ async method(x, y = x, z = y) {} })',
    '({ *id() {} })',
    '({ *[anonSym]() {} })',
    '({ *method(a,) {} })',
    '({ async static(){} })',
    '({ method(a,) {} })',
    '({ foo: 1, foo: 2 })',
    '({ async *method(x, y = x, z = y) {} })',
    '({ async *method([[...x] = function() {}()] = [[2, 1, 3]]) {} })',
    '({ async *method([[x, y, z] = [4, 5, 6]] = [[7, 8, 9]]) {} })',
    '({ async *method([...x]) {} })',
    '({ async *method([x]) {} })',
    '({ async *method([[,] = g()]) {} })',
    '({ *method([[x, async, z] = [4, 5, 6]]) {} })',
    '({eval});',
    '({async x() {}});',
    '({async *x() {}});',
    '({async get() {}});',
    '({get x() {}});',
    '({set x(y) {}});',
    '({get() {}});',
    '({set() {}});',
    '({async() {}});',
    '({await() {}});',
    '({async = async} = x);',
    '({async});',
    '({x});',
    '([a,,...rest] = {})',
    '({} = 0);',
    '({y}) => x;',
    '({ a: 1 }).a === 1',
    '({ident = x} = y)',
    '({a: {b: c} = 0})',
    '({a: {a: b.x} = 0})',
    '({a: {b} = 0})',
    '({a: {b}})',
    '({a: {b}, c})',
    '({a: [b.x] = 0})',
    '({a: [b] = 0})',
    '({a: (b.x) = 0} = 1)',
    '({a: (b) = 0} = 1)',
    '({ ...async () => { }})',
    '({"x": {y: z}} = x)',
    '({"x": {a: y + x}})',
    '({"x": {a: y + x}.slice(0)})',
    '({"x": 600})',
    'x({[a]:b}=obj);',
    'x({[a]:b, [15]:d}=obj);',
    'x, {foo, bar} = doo',
    'x, {foo = y, bar} = doo',
    '({a, b} = c = d)',
    'a={"b":c=d}',
    's = {"foo": this}',
    '({x:let} = null)',
    '({x:let})',
    'x({"a":b}=obj);',
    '({x:let}) => null',
    '({ x() {}, y() {}, x() {} })',
    '({ x() {}, x: 1 })',
    '({ x: 1, x() {} })',
    '({ x: 1, *x() {} })',
    '({async})',
    '({async: await})',
    '({async: (await) ? yield : foo})',
    '({async: true})',
    '({async() { }})',
    '({async foo() { }})',
    '({foo() { }})',
    '({x, y, z () {}})',
    '({async delete() {}})',
    '({async [foo](){}})',
    '({async 100(){}})',
    '({throw(x, y) {}});',
    '({package(x, y) {}});',
    '({package(x, y) {}});',
    '({this(x, y) {}});',
    '({switch(x, y) {}});',
    '({}=x);',
    '({a:v=b}=c);',
    '({a=b}=c);',
    'x({[a]:b}=obj);',
    '({key: bar = x})',
    'x = {x: a}',
    '({[a]:b, [15]:d}=obj);',
    'x={async f(){}}',
    's = {s: true}',
    '({ a, b: x })',
    '({key: {}})',
    '({key: {a} = x})',
    '({a:b}=obj);',
    '({1:  {}.b ? c : d })',
    '({ a: {prop: 1}.prop } = {})',
    '({1:  + b })',
    '({[a]:  + b })',
    '({a:  + b })',
    '({...(obj)} = foo)',
    '({...(obj)} = foo),({...obj} = foo),({...obj.x} = foo),({...{}.x} = foo),({...[].x} = foo)',
    '({[a]:  {}.b ? c : d })',
    '({a:  {}.b = c ? d : e })',
    '({a:  {}.b ? c : d })',
    '({a: (a).b ? c : d })',
    'x({1:b, 2:d});',
    'x = ({[a]:b});',
    '({*"expr"(){}} = x);',
    'var {x:y+1} = {};',
    '({set 8(y){})',
    '({get 8(){})',
    '({,} = {});',
    'var {x:y--} = {};',
    'function foo() { return {}; }; var {x:foo().x} = {};',
    'class foo { method() { ({x:super()} = {}); } }',
    '({a: ({d = 1,c = 1}.c) = 2} = {});',
    '({a: {d = 1,c = 1}.c = 2} = {});',
    '({...a, ...b, ...c} = {...a, ...b, ...c})',
    '({x = 42, y = 15})',
    '({x: { y = 10 } })',
    '({ a, b }) = {a: 1, b: 2}',
    '({*a([a.b]){}})',
    '({*: x(){}})',
    'async x*(){}',
    '({...{a,b}} = foo)',
    '({...[a,b]} = foo)',
    '({...[a, b]} = x)',
    '({...{a, b}} = x)',
    '( {...{}} = {} )',
    '({...{}} = {})',
    'async get *x(){}',
    '({set a({e: a.b}){}})',
    '({...x = 1} = {})',
    '({a:a,b,(c), a: {b} });',
    '({ 1:a,b = {c} = d });',
    'x = { set f(...y) {} }',
    '({get x() {}}) => {}',
    'let {...x, ...y} = {}',
    '({...x,}) => z"',
    '({...rest, b} = {})',
    '(([a, ...b = 0]) => {})',
    '(({a, ...b = 0}) => {})',
    '0, {...rest, b} = {}',
    '({...obj1,...obj2} = foo)',
    '({...(a,b)} = foo)',
    '({...{a,b}} = foo)',
    '({"foo": this} = x)',
    '([...x.y] = z)',
    '({123(){}})',
    '({123: expr})',
    '({[key](){}})',
    '({[key]: a.b} = c)',
    '({a:(b = 0)})',
    'delete (foo)',
    '({x, y = 1, z = 2} = {});',
    '({[foo()] : z} = z = {});',
    '({[foo()] : (z)} = z = {});',
    '({[foo()] : foo().bar} = z = {});',
    '({x: y} = 0)',
    '({x} = 0)',
    '({x, y = 1, z = 2} = {});',
    '({42 : x} = {})',
    '([a,,...rest] = {})',
    '({var: x = 42} = {})',
    '({x, ...y, a, ...b, c})',
    '([...[]] = x);',
    '({...[].x} = x);',
    '({...a[x]} = x);',
    '({...a.x} = x);',
    '({...[({...[].x} = x)].x} = x);',
    '({...a.x} = x);',
    '({...x.x, y})',
    '([target()[targetKey()]] = source())',
    '() => {([(x), y] = x)}',
    '([ (foo.bar) ] = {})',
    '([ (y) ]= z = {})',
    '([(({ x } = { x: 1 }) => x).a]= z = {})',
    '([(({ x } = { x: 1 }) => x).a] = z = {})',
    '([((x, y) => z).x]= z = {})',
    '([(x)] = {})',
    '([(x)]= z = {})',
    `(a,) = x`,
    `(a,b,) = x`,
    `(a = b,) = x`,
    `([x],) = x`,
    `({a},) = x`,
    `([x] = y,) = x`,
    `({a} = b,) = x`,
    '([a]) = 0',
    '({set a([a.b]){}})',
    '({b}) = b;',
    '([a]) = x',
    '("a") = "b"',
    '({a([a.b]){}})',
    '({x:true = 5})',
    '([[a](b.c) = [[a] = [[a] = ([[a] = x]]]]))',
    '([[a](b) = [[a] = [[a] = ([[a] = x]]]]))',
    '([[a] = [[a] = [[a] = ([[a] = x]]]]))',
    '([...a, ,] = [...a, ,])',
    '({*a([a.b]){}})',
    '({a, b}) = {a: 1, b:2}',
    '([b]) = b;',
    '({a: [a + 1] = []});',
    '({a}) = 0',
    '({a}) = 2;',
    '({a, b}) = {a: 1, b:2};',
    '({a}) = 1;',
    '({x : , y} = {});',
    '({get foo() {}} = {});',
    '({set foo(a) {}} = {});',
    '({set ["foo"](a) {}} = {})',
    '({a:this}=0)',
    '({ x }) = { x: 5 };',
    '(a,b,c,);',
    '({(a)} = 0)',
    '({ src: ([dest]) } = obj)',
    '({a:(b = 0)} = 1)',
    '([a += a] = a)',
    '({[a]: {...[a[]]}})',
    '({...{}} = {});',
    '(((...a))',
    '(((a, ...b)))',
    `({a}) = 0;`,
    `([a]) = 0;`,
    `({a} += 0);`,
    '({a: 0} = 0);',
    '({get a(){}} = 0)',
    '({set a(b){}} = 0)',
    '({a(b){}} = 0)',
    '(((...a)))',
    '({...a}) = b',
    '([...x=y]) = z',
    '({a: ("string") / a[3](((((a /= [b.c => a] = ([x / 2]())))))) })',
    '(new.target) = 1',
    '({ident: {x}.join("")}) => x',
    '({ident: {x:y} += x})',
    '({ident: {x}/x/g}) => x',
    '({...obj1,} = foo)',
    '({...(a,b)} = foo)',
    '({...(a,b)} = foo)',
    '({ a = 42,  b: c = d, })',
    '({a},)',
    '({...{a, b}} = x)',
    '({a},) = x',
    '(...a = x,) = x',
    '([a + b] = x);',
    '([b]) = b;',
    '([x],) = x',
    '(a = b,)',
    '(a,,) = x',
    '(,,)',
    '(,) = x',
    '(,,) = x',
    '(a,) = x',
    '(...a = x,) = x',
    '({a} = b,) = x',
    '(...);',
    '(a[b],c)+=2',
    '(a,b)=2',
    '(a=1)+=2',
    '(a=1)=2',
    '({get p(...[]) {}})',
    '({set p(...[]) {}})',
    '...x => x',
    '([{x = y}.z] = obj)',
    '[{x = y}]',
    //'([x]++)',
    '(()) => 0',
    '({...x.y} = z) => z',
    '({ x = 123 });',
    '({ident: [foo, bar] += x})',
    '({...{x} }) => {}',
    '({...(x) }) => {}',
    '((x={15: (await foo)}) => x',
    '({x: 15.foo()} = x)',
    '({x: 15.foo} = x)',
    '([{a:b[0]}])=>0',
    '(foo ? bar : baz, a) => {}',
    '({a: (1) = x })',
    '({a: 1 = x })',
    '({ x: x }) = a;',
    '({foo: {x:y} += x})',
    '({foo: {} += x})',
    '({get a(){}})=0',
    '({x}) = {x: 1};',
    '([a]) = []',
    '-(5) ** 6;',
    '([a]) = 0',
    '({a}) = 0',
    '(a = b) = c;',
    '({ a: (a = d) } = {})',
    '({...[x] }) => {}',
    '(c, a.b) => {}',
    '({x: 15.foo()} = x)',
    'x = {x: 15.foo()} = x',
    'x = ({}) = b',
    '({15: 15.foo()}=x)',
    '({foo: {x:y} += x})',
    '({x}) = {x: 1};',
    '({a: {x = y}}).z',
    '([x.y = a] = (...z))',
    '(([x])=y in z);',
    '(0, {a = 0}) = 0',
    '({a = 0}, {a = 0}, 0) => 0',
    'async (a, ...b=fail) => a;',
    '({x:{1:y()=x},x:{7:3}})>x',
    '([a + 1] = []);',
    '([1, a] = []);',
    '[((a)] = [];',
    '(a,b,) = x',
    '({...[]} = x);',
    '(...x);',
    '({[foo]: bar()} = baz)',
    '({[foo]: a + b} = baz)',
    '({x})=y',
    '(a,b,)',
    '(a = b,) = x',
    '({[].length} = x);',
    '({[x].length} = x);',
    '({{}.length} = x);',
    '({{x: y}.length} = x);',
    '({delete(){}} = y);',
    '({yield(){}} = y);',
    '({a: {b = 0}.x} = {})',
    '({3200: fail() = x} = x)',
    '({foo: fail() = x} = x)',
    '({get * bar(){})',
    'x({*[foo',
    '({set * bar(x){})',
    '({static * bar(x){})',
    '({*(){}})',
    '({   async *[x"',
    '({   async *[x',
    '( new x ) = x',
    '( this ) = x',
    '({a({e: a.b}){}})',
    '({*a({e: a.b}){}})',
    '({set a({e: a.b}){}})',
    '(...a,)',
    '(...a,) = x',
    '([x] = y,)',
    '({a} = b,)',
    "((...'z'))",
    '((...z))',
    "'(...(...z))",
    '([x.y = a] = (...z))',
    "(c, a['b']) => {}",
    '({a: {x = y}}.z) => obj',
    '({a: {x = y}.z})',
    '({a: 1 = x })',
    '(y) = (1) = x',
    '(1) = x',
    '(a,) = x',
    '([x] = y,) = x',
    '({a},)',
    '(,)',
    '({x = y}.z)',
    '([{x = y}])',
    `({15: 15.foo}=x)`,
    '(()) => 0',
    '({...{}} = {})',
    '({...obj1,...obj2} = foo)',
    '({a: {x = y}}.z = obj)',
    '({a: {x = y}.z})',
    '({a: {x = y}}.z)',
    '({a: {x = y}})',
    '([{x = y}]).z',
    '({[x](){}} = z);',
    '({x:{1:y()=x},x:{7:3}})>x',
    '({x = y} = z)',
    '({a: {x = y}} = z)',
    '({...a,b,c})',
    '({ident: {x: y}})',
    '(false)',
    `a = (
  b,
  c
)`,
    '([]())',
    '({}())',
    '([](a))',
    '({}(a))',
    '([](a,b))',
    '({}(a,b))',
    '(a())',
    '(a(b))',
    '([a.b] = x);',
    '(x--);',
    '([target()[targetKey(a=b)]] = x);',
    '([].length) = y',
    '([x].length) = y',
    '({}.length) = z',
    '({x: y}.length) = z',
    '({x});',
    '(2 * 3 ** 2, 18)',
    '(1, 2, 3, 4, 5)',
    '([...x=y])',
    '([a])',
    '(([a]))',
    '([a] = [])',
    '(([a] = []))',
    '(x--, y);',
    '((x));',
    '(++x);',
    '({} + 1);',
    '([] + 1);',
    '(q, {} + 1);',
    '(([(((null))), , (([(2).r = (((308)) ? this : (x)), aihgi] = ({}))), (8), (y)]))',
    '(q, [] + 1);',
    'async ([] + 1);',
    '(a(b,c))',
    '(a([]))',
    '(a({}))',
    '(a.a())',
    '([ foo()[x] ] = z = {})',
    '([ foo().x ] = z = {})',
    '([ foo().x ]= z = {})',
    '([ foo()[x] ] = {})',
    '([ x.y ]= z = {})',
    '([ foo()[x] ]= z = {})',
    '(x = (yield) = f) => {}',
    '([ x[y] ] = z = {})',
    '([ [ foo().x ] ]= z = {})',
    '([ x[y] ]= z = {})',
    '([ [ foo()[x] ] ]= z = {})',
    '([ [ foo()[x] ] ] = {})',
    '([ [ x.y ] ]= z = {})',
    '({a: 1, b: 1}, y = { a: 1, ...x, b: 2, ...z });',
    '({ a: 1 }, y = { ...x });',
    '({0: 0, 1: 1}, y = { ...[0, 1] });',
    '(x + y) >= z',
    '(x + y) <= z',
    '(x + y) != z',
    '(x + y) == z',
    '(x + y) == z',
    '(x) / y',
    '(false)',
    '([{}]);',
    '([delete foo.bar]);',
    '({ x, y, ...z } = o)',
    '([...[][x]] = x)',
    '(a = 1, b = 2);',
    '(a.b) = 1;',
    '(a) = 1;',
    '(a[b]) = 1;',
    '(a.b().c().d) = 1;',
    '(a.b().c().d) = 1;',
    '(this.a) += 1;',
    '(this.a) = 1;',
    '(this[b]) = 1;',
    '([x, y] = z);',
    '([[x, y] = z]);',
    '(a.b) += 1;',
    '(a.b().c().d) += 1;',
    `([].x);`,
    '(delete foo.bar);',
    '({});',
    '([...[].x] = x)',
    '([...{}[x]] = x)',
    '([...{}.x] = x)',
    '({...[][x]} = x)',
    '({...[].x} = x)',
    '({...a.x} = x)',
    '({...{}[x]} = x)',
    '([...[].x] = x, [...[].x] = x)',
    '([...{}[x]] = x, [...{}[x]] = x)',
    '([...{}.x] = x, [...{}.x] = x)',
    '(x.foo)',
    '(x + foo)',
    '(x.foo = y)',
    '(typeof x)',
    '(...{destruct}) => x',
    'async(...ident) => x',
    ' async(...[destruct]) => x',
    '([a]) => b;',
    '([a] = b) => c;',
    '([a=[b.c]=d]) => e;',
    '({...[][x, y]} = x)',
    '({...{}[x, y]} = z)',
    '({...[0][x]} = {})',
    '(a.a(b))',
    '(a.a(b,c))',
    '(a.a([]))',
    '(a=b)',
    '(a=b=c)',
    '(a=(b=c))',
    '((a??b.c)??a.b)',
    '((a??b))',
    '(a.a({}))',
    '(a,b)',
    '(a,b,c, 1,2,3)',
    '(a[b])',
    '(a[{}])',
    '(a[[]])',
    '(a[1])',
    '({...{}.x} = x);',
    '({...[0][x]} = {});',
    '({...[x} = {});',
    '((a))()',
    '({} = 0);',
    '({f true ** false});',
    '({ x: x } = a);',
    '({ x } = a);',
    'ne(x)(y)',
    '"use st({ x: a, x: b } = q);',
    `({
      a,
      a:a,
      a:a=a,
      [a]:{a},
      a:so_call()[a],
      a:tis.a
    } = 0);`,
    'a = (b = c)',
    '({a:) = c})',
    '({a = 0} = 1)',
    '({a = c} = 1)',
    '({ a: (b))=2',
    '({20p})',
    '({oo]: x} = y)',
    '({[foo]: bar} = baz)',
    '(true)',
    '[(a= 0] = 1',
    '[(a.b)] = 0',
    '([a];',
    '[{x: y.z}] = a',
    '(foo.x)',
    'a=z}, y) => x;',
    '({a:(((} = {a:20})',
    '({a:a1 = 1 = 44} = {})',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    'f = (ent1, [a,b,c])',
    'f = (argument1, { x : x, y : y = 42 })',
    'f = (at1, [{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]])',
    '(ar, [a,b,...rest])',
    'f = ( {[x] : z} )',
    '(a, 1, 2, 3);',
    '({[x]:y});',
    `a = (
      b,
      c
    )`,
    ', ...b } = c)',
    '({ a } = c)',
    '(..b})',
    '(let.a) += 1;',
    '({0:} = 0)',
    '({ ..[0]})',
    '({ .d.x })',
    '({ x: (y) = [] })',
    '({ x: ar) })',
    '([a)',
    '({ x: (y) })',
    '({x, ...y} = {})',
    '(x + y);',
    '(null);',
    '(new',
    '(s{})',
    '(aents)',
    '([{x:x, y:y, ...b,c]] = {})',
    '[{x:x = 1, y:y = 2}, [a == 4, c = 5]] = {};',
    '([{x:x = 1, [a = 3, b = 4, c ] = {});',
    '([{x:x, y:y}, [a,b,c]])',
    '({[1+1] : z, ...x} = {})',
    '({arguments: x, ...z} = {});',
    '({a: {eval}.x} = {});',
    '({...{eval}.x} = {});',
    '({ a: 1 }).a === 1',
    '({ x : [ y = = {} })',
    '({ x : [ foo().y =  = {} })',
    '({ x : [ foo()[y] =y. = 10 ] = {} })',
    '({ z : __proto__:_proto__: y } = z })',
    '({  [ y[z] = 10 ] = {} })',
    '([ x ])',
    '([o().x ])',
    '([ f()[x] ])',
    '([  ])',
    '([ x[y] ])',
    '([ { x } ])',
    '([ { x : y } ])',
    '([ { x{ x : foo()[y] } ])',
    '([ { x  x.y x : x[y] } ])',
    '([ { x 10 } = {} ])',
    '([ { x : y =  : foo().y = 10 } = {} ])',
    '([ {oo()[y] = 10 } = {} ])',
    '([ { x : x.y = 10 } = {} ])',
    '([ { x : x[y] = 10 } = {} ])',
    '([ [ x = {} ])',
    '([ [ foo().x = 10 ] = {} ])',
    '([ [ foo()[x] = 10 ] = {} ])',
    '({ x : y, ...z })',
    '({ x : y = 1, ...z })',
    '({...x})',
    '({a: [b = 1, c = 2][1]} = {a:[]});',
    '({a: [b = 1, c = 2].b} = {a:[]});',
    '({0: x, 1: x} = 0)',
    '({a:let} = 0);',
    '([[]]=0)',
    '({x: y = 0} = 1)',
    '({x: y = z = 0} = 1)',
    '({x: [y] = 0} = 1)',
    '((a,a),(a,a))',
    '((((((((((((((((((((((((((((((((((((((((a))))))))))))))))))))))))))))))))))))))))',
    '({ x : y } = z = {});',
    '({ x : f = z = {});',
    '({ x : { foo: foo().y } });',
    '[...{a}] = [{}]',
    '({x:zy = 20} = {});',
    '(q, { x0 } = {});',
    '({ x } = { x: 3 });',
    '({ x = 10} = {});',
    '([a **b]);',
    '({a, b} = {a: 1, b: 2});',
    '({iden, bar].jo)',
    '({ideny}/x/g})',
    '(a / b);',
    '({ir + boo) + ding)',
    '(ent:  yoin(z)})',
    '({ respoTe } = res)',
    '(foo, [ba, ba] = doo);',
    '([ ..(a)});',
    '([ (foo.bar) ] = z = {});',
    '(1)',
    '[(a)] = 0',
    '([...y] = z)',
    '({123){}})',
    '({123r})',
    '({[k](){}})',
    '({[ke: a.b} = c)',
    '({...key = x})',
    '({...krop} = x)',
    '({...key})',
    '([(foo = x] = x)',
    '(a = b)',
    '((((x))))))))));',
    '({a:(b)} = 0)',
    '({:(b 0)}= 0)',
    '({a:(b)',
    '(]  = {});',
    '([...{}] = x);',
    '([... x);',
    '({x = 1} = {});',
    '({ __proto__: x, __proto__: y } = {})',
    '({x:y} = {});',
    '({a:(b)} = 0)',
    '({a:(b) = 0} = 1)',
    '(typeof )',
    '({web: _proto__: x, __proto__: y});',
    '({a = 0)',
    'delete (foo)',
    '({x, y = 1, z = 2} = {});',
    '({[)] : z} = z = {});',
    '({[foo())} = z = {});',
    '({[fooo().bar} = = {});',
    '({x: y} = 0)',
    '({ 0)',
    '({x,  = {})',
    '([a,,...rest] = {})',
    '({var: x = 42} = {})',
    '({x, ...y, a, ...b, c})',
    '([...[]] = x);',
    '({...[].x} = x);',
    '({...]} = x);',
    '({.a.x} = x);',
    '({.({...[].x} = x)].x} = x);',
    '({.} = x);',
    '({.. y})',
    '([targettKey()]] = source())',
    '() => {([(, y = x)}',
    '([ (foo.ba) ] = {})',
    '([ (y) ]= z = {})',
    '([} = { x:1 }) => x).a]= z = {})',
    '([(({ => x))',
    '((x)] = {})',
    '([(]= z = {})',
    '([() ]= z = {})',
    '([x.y = a] = ([x([x.y = a] = z)))',
    '({...{}.x} = x);',
    '([...[].x] = x);',
    '([...[([...[].x] = x)].x] = x);',
    '([.}.x] = x);',
    '({...[][x]} = x);',
    '({.[][x]} x = y);',
    '({...[][x]} = x = (y));',
    '({...[][x]} = ( = (y));',
    '({...{}[x]} = x);',
    '({...{}[x = (y)[z = x);',
    '([...[(z]]} = x)][x]x);',
    '([..= x);',
    '([...{}[x]] = x);',
    '({...{b} = {});',
    '({.x} = {});',
    '({...{b[x]} = {});',
    '({...[0][x]} = {});',
    '({...[1][2 {});',
    `({a:b,...obj}) => {}`,
    `({a,...> {}`,
    `({...obj} = {}) => {}`,
    `({a:b} = foo)`,
    `({...a, ...b})`,
    `({...a)`,
    `({obj: x, ...a})`,
    '(a= {});',
    '(a[i] = {});',
    '({ a:  = {})',
    '( [ []);',
    '({x, x1:y = 20} = {});',
    '({ aop } = {})',
    '(x|y)^y',
    '({=0)',
    '({x} = 0)',
    '(y,)',
    '({d = 0);',
    '( = 0} = 0);',
    '({x=0, y:z} = 0)',
    '({x: ,} = 0)',
    '({[a]: 1)',
    '({ f bar } = foo);',
    '({[a {}})',
    '({[a =: {}})',
    '({[(a)()]: {}})',
    '({a  ]} = 1)',
    'a += (b + c)',
    'a + (b += c)',
    'a - -= c',
    'a -= (b + c)',
    '({[b, ...rest})',
    '({ .x',
    '({ x = y } = {});',
    '({ x: { x: null });',
    '({ }  { xl });',
    '({{ x } = xdefined });',
    '({ x: { x } = {});',
    '({ x: [x ] } =ndefined });',
    '({[(a))]: {}})',
    '({a = *  = d))',
    '({a = [b} = (d = e)))',
    '({1:c =x]} = (d )) = a))',
    '({1: [b.c = 2 / dd = (a)) = 3))',
    '({1: [b.c ]}  (= 3))',
    '({1: [c = x]} = 1 (d )) = a))',
    '([ [ foo()[x] = 10 ] = {} ])',
    '([ [ 12()[x] = 10 ] = {} ])',
    '({a: {b: (c)}})',
    '({x} = {x:3});',
    '({...x}[y])',
    '({} = undefined);',
    '({x, y:[y]} = {x:5, y:[6]});',
    '({ test = 1 } = {})',
    '({x = 0} = 1)',
    '({x,} = 1)',
    '({var: x} = 0)',
    '({b,d, ...} })',
    '((a)) = b',
    '({}.length)',
    '({}.x)',
    '([].x)',
    '([x].foo) = x',
    '({*15(){}})',
    '({x..y}) => x',
    '({...x.y} = z) ',
    '(z ...x.y}) => z',
    '(fox])',
    '(foo) += 3',
    '({a:(b) = c} = 1)',
    `(x) += y) = z`,
    '(x)) += z',
    '(a.b) = 0',
    '(1) + (2  ) + 3',
    '(((((((((((((((((((((((0)))))))))))))))))))))))))))))))))))))',
    '({a: {x = y}} = z)',
    '({a: {x = y}}) => z',
    '4 + 5 << (6)',
    '(a) + (b)',
    '((a))()',
    '"use strict"; (await) = 1',
    '((a)a))',
    '((a)) = 0',
    '(a) = 0',
    'voia)',
    '(a)++',
    '(a) ? (b) : (c)',
    '(a++)',
    '(void a)',
    '({F {});',
    '({f, bar} = {foo bar: 1});',
    '({} =;',
    '({ reext: text } = res);',
    '({ = {x: 10}) {}})',
    '({f = {x: 10}) {}})',
    'f = function({x} = {x: 10}) {};',
    '([a.b])',
    '(a[b])',
    '([x])',
    '({x})',
    `({}gth)`,
    '({a, a})',
    '({a: 1})',
    '({a: 1, a})',
    '({a a})',
    `({a: b = x} = d)`,
    `({a: b = x} / d)`,
    `({a: b * `,
    `(q, {a: = x} = d)`,
    `(q, {ab * x})`,
    `({a: b} = (y) += z`,
    `(x) = (y) = z`,
    `(x= (y) = z`,
    `(foo.x)`,
    `(foo[x])`,
    `(foo) += 3`,
    '(++this.x)',
    '--(x)));',
    '({a: 1 || 1}.a = 1)',
    '(q, .a = 1)',
    ',4))),f[4,a-6]',
    '((((a))((b)()).l))()',
    '({...}})',
    '({a:bbj} = foo)',
    '(: x})',
    '(}=1)',
    '({1 x}=null)',
    '({x})',
    '({=1)',
    '({1:=null)',
    '({a=null)',
    '(x]: 1})',
    '({a}=1)()',
    '({a:a}=1)()',
    `([...x.y[...x.y] = z) => z`,
    `([..y]);`,
    '([x, ...y]) => x',
    `([...x+=y]);`,
    `([...x=y]);`,
    `([...x]);`,
    '({1: ({}) / (1)});',
    '({1: ({}) ? (1) : [1]});',
    '({1: (x * y - z)});',
    '([arguments] = []);',
    '({ b);',
    '({1: (x = x);',
    '({ q 0 } = {});',
    '({ 0 } = {})',
    '(q, 10 } = {})',
    '({ a, b: x })',
    '(x = {eval})',
    '({eval} = x)',
    '({ as} })',
    '({  x() {} })',
    '({ asy[foo]() {} })',
    '({ get 5{} })',
    '({ 0(b) {} })',
    '([foo](d)} })',
    '({a: {b} = 0}) => x',
    '({a: {b: c} = 0}) => x',
    '([x[y]] = z)',
    '(q, [x[y]] = z)',
    '({a: {argumen..{nts}.x} = {});',
    '({a: (b) )',
    ' = 0})',
    '({a= 1)',
    '({a: = 0} = 1)',
    '([...{ac])',
    ': {a = 0})',
    '({a{} = 0})',
    '({a:b}: {b}})',
    '({a: }, c})',
    '({[b] = 0})',
    '({b = 0}) => x',
    '({.0}[x]} = {});',
    '({...{b: 0}.x} = {});',
    '([ta()[targ= x);',
    '({... ',
    '({...x.x = y, y})',
    '({= y, y',
    '([x.y = a] = z)',
    '([x.y = a] = (.y = a] =)))',
    '([{x = y}] = z)',
    '({..x = x);',
    '(a.b= 1;',
    '(this.a) += 1;',
    '({.x} = x);',
    '([...[].;',
    '([..([... x) x);',
    '({...[({. x)].x} = x);',
    '({...[].x} = x);',
    '([...[]] = x);',
    '({...(a,b),c})',
    '([...{}.x] = x);',
    '({...a.x} = x);',
    '({..."x"[x]} = x);',
    '({...[][x]} = x);',
    '({...[ = x = y);',
    '({...[][x (y));',
    '({...[]= (y));',
    '({...{} = x);',
    '({...{}[x = (y)[z]]} = x);',
    '({a: {x = y}} = z)',
    '([...[({...{}[x = (y)[z]]} = x)][x]] = x);',
    '([...[][x]] = x);',
    '([...{}[x]] = x);',
    '([...{}[x]] = "x");',
    '({...{} = {});',
    '({..x} = {});',
    '({.{b: 0}[x]} = {});',
    '({...[0][x]} = {});',
    '(.[1][});',
    '(letx].foo in x;',
    '({x: y.z} = b)',
    'foo({g [bar](){},](){}});',
    'foo);',
    'foo({set [bar](c){}, [zoo](){}});',
    'foo({[bet [zoo](e){}});',
    'a = (  b, c  )',
    '([...[].x] = x);',
    '({a:(b) = c})',
    '({a:(b) = 0} = 1)',
    '(x,=> foo',
    '({ a: (b) } = {})',
    '(asyc)=2',
    '({200:exp})',
    '({a:= 1)',
    '({*it(){}})',
    '({*[})',
    '(x=(await)=y)',
    '({[ x} = y)',
    'x=x=x',
    '({"a b c": bar})',
    '(null)',
    '(x, /x/)',
    '/g)',
    '({ a: {prop: 1}.prop } = {})',
    `({ async* f(a, b, ...c) { await 1; } })`,
    '([(x())[y] = a,] = z);',
    '({ident: {x:y}/x})',
    '(async ());',
    '({ident: [foo, bar]/x})',
    '({: [foo, bar].join("")})',
    '({y}) => z;',
    '({[foo] baz)',
    '([...);',
    '([...x]) => x',
    '(z = = z) => z',
    '(z = [...x.y]) => z',
    '({...o = foo)',
    '({...x+y});',
    '({...y;',
    '[...x.y]',
    '[x,] = 0',
    '[x,,] = 0',
    '[, x,,] = 0',
    '[x, ..y1, 2, 3];',
    '[, ...x] = [1, 2, 3];',
    '[...{x  1} [{}]',
    '[...[x]] = 0',
    '[x, ...{0: y}] = 0',
    '[ ...(++y) ]',
    '[x, x] = 0',
    '[({a: 1}.c)] = []',
    '[x, ...x] = 0',
    '[[...x, 3]]',
    '[{ x: 11, y: 22, z: 33 }]',
    '[{x : [{y:{z = 1}, z1 = 2}] },{x3 : {y3:}} ] = [{{}}]}, {}, {x3:{y3:[{}]}}];',
    'a = [=  [{ x: 2 }];',
    '[{ x = 10 } = {}]',
    '[o.x=1]=[]',
    'a = [x.y123];',
    'a =y] = value;',
    '[a,a,,...a]=0;',
    '[(a.x)] = t;',
    '[(x)] = t; ',
    '[(((x = t',
    'a = [ x[yield] ] = [33];',
    'a = [...[x, y]] = [null];',
    'a = [...x.y] = [4, 3, 2];',
    'a = [...[x[yield]]] = [2018];',
    'a = [.{ 0: x, length }] = value;',
    'a = [...{  }] = [1, 2, 3];',
    '[,] = null;',
    '[[x]] =]];',
    'a = [ x = yield ] = [];',
    'result = [, x, , = [1, 2, 3, 4, 5, 6];',
    'a = [ x = f1, b = x *= 2 ] = [];',
    'a = [arguments = 4, eval = 5] = value;',
    '[...++x]',
    '[(a)] = 0',
    '[(a.b)] = 0',
    '[a, b] = [1, 2]',
    '[(a) = 0] = 1',
    '[a, ...b = 20,,]',
    '[...{ a }] = b',
    '[...{eval}.x] = [] = {}',
    '[(x).foo = x] = x',
    '[x()]',
    '[(x)] = obj',
    '[a.b=[c.d]=e] = f;',
    '[[[[[[[a=b] = c] = c] = c] = c] = c] = c] = [[[[[a=b] = c]]] = c] = c] = c] = c;',
    'a = [ a = x += 1, b = x *= 2 ] = value;',
    '[x.y = z]',
    '[1, 2, 3, ...[]]',
    '[(1) = (a = b.c)]',
    '[() = ()]',
    '[(1) = (a = b.c)]',
    '[...a, b] = v',
    `[...this] => x;`,
    `[{a: 1} = []];`,
    `[...a, ...b] = x`,
    `[([async])] = x`,
    `[{x = y}]`,
    '[{a = 0}.x] = [];',
    `[...{0=x`,
    '[...a, ] = b;',
    '[a, ...b,] = ',
    '[a, ...b,,] = 20',
    '[a',
    '[a,',
    '[...a, ] = b',
    '[{a=b}]',
    '[++a] = [];',
    '[a +;',
    '[a +',
    '[1, a] = [];',
    '[((a)] = [];',
    '[a;',
    '[.. []',
    '[.d] = []',
    '[123] = []',
    '["str []',
    '[fa = []',
    '[[foo].fo].food() = x] = x',
    ' arrx = obj',
    '[...[a](1)] = 3',
    '[...] = 3',
    '[{a = b}.c]',
    '[a,y]] = z',
    '[a.g(...[])] = []',
    '[g(...[])] = []',
    '[0] = 0',
    '[x] += 0',
    '[...0',
    '[.. ] = 0;',
    '[... = 0',
    '[...x,,] = 0',
    '[{a=0},{b=0},0] = 0',
    '[{a=0},...0]',
    '[,a]=0',
    '[...{a = b} = c] = d;',
    '[b} = c] = x',
    '[+{a = 0}];',
    'x, y] = 0',
    '[...x, y] = 0',
    '[this] = obj',
    '[--x = 1]',
    'rget]',
    '[new.target = 1]',
    '[import.meta]',
    '[import= ',
    '[super]',
    '[super = 1]',
    '[...x += y] = a;',
    '[{a=0},{b=0},0] = 0',
    '[...0,a]=0',
    '[new.',
    '[...x, ;',
    '[...a, ... = [...a, ...b, ...c]',
    '[a, .]',
    '[a, ...(b = c)] = 0',
    '[',
    '[,',
    '[]=>0',
    'a[5',
    'a[5 + 6',
    '[2=y]',
    '[a.]',
    '[..., ]',
    '[2=y]',
    '[x()] = obj',
    '[(= obj',
    '[...(x), y] = z',
    '[(a)] = t',
    '[([x])] = y',
    '[...a,[]',
    '.a,]]})] = t ',
    '[{b([a }] = t  ',
    '[. a] =a',
    '[{]',
    '[([x])]y) = [1/42]/=2]',
    '[{} = 2/=2]',
    '[{x= y}].z',
    '[}].z obj',
    '[{x = y}]. "obj"',
    '[{ bj',
    '[ "y].z = obj',
    '[{x =x} = ([1]) => x;',
    '] = ([1]);',
    '[=5, b=(7)] 1]);',
    '[a=5, b=(7).c.(d)] = ([1])',
    '[function(){}] = x',
    '[null] = x',
    '[typeof x] = x',
    '[--x = 1]',
    '[ ...([a]) ] = x',
    '[a)] = [];',
    '[null] = []',
    '[2] = 42',
    'x(a&&b=c)',
    '[(x)](y) = obj',
    '[(a = 1)] = t;',
    '[...{a: 0}] = 0;',
    '[)] = t;',
    ' 12;',
    '[[(x,y)]] = x;',
    '[...[(x, y)]] = x;',
    '[ .',
    '[([{ x =] = b.call(c)) = ()]',
    '[(a = b.cll(c)) = ()]',
    '[(a call(c)) = * 2)]',
    '[(1) =c)]',
    '[() = ()]',
    '[(a.b. e) = ()]',
    '[[[a.b =[{ x: x.b }]]]] = ([{ a = b / 2}])',
    '[[[a.b =[{ x: x.b = 123 }]a(b=c)]]]',
    '[(foo())] = a;',
    '[a] *= 0;',
    '[([b])] = t;',
    '[([a])] = 12;',
    '[ (+ a;',
    `[...{a: 0}] = 0;`,
    `[.0]] = 0;`,
    `[...0] = 0;`,
    '[...[(x, y)]] = x;',
    '[...(a] = ],',
    '[.. = [1]] = a;',
    '[[',
    '[...[ x = 5 ] ] = x',
    '[void x]',
    '[false]',
    '[function(){}.= x',
    '(foox,y]] = z',
    '({...x, y});',
    '(z =]) => z',
    '([...x=);',
    '({ x : foo()[y] } = z = {});',
    '({ oo: foo().y } });',
    '(await) = 1',
    '("\\u{10FFFF}")',
    '({ => {}',
    '([x] = y,) => {}',
    '({a} => {}',
    '([x],) => {}',
    '(obj[0]) = 1;',
    '(obj.a) = 1;',
    '({a:(((} = {a:20})',
    '({= r1 = 44}= {})',
    '(a=, [as.a} = 0);',
    '[{x:x = 1, y2}, b = = 5]] = };',
    'f = [a,b,c])',
    '({[x]:y});',
    '({ident[foo, bar] + x})',
    '({ident: {x: y}})',
    '([a / wait} = x);',
    '({e} = x);',
    '();',
    '({static [expr',
    '( [expr',
    'x({"abc"});',
    '{ge});',
    '({ [x] });',
    '({ *[x] });',
    '({catch(){}}) => x;',
    '({c => x;',
    '({d) =790: false} = x)',
    '({   ac *[woops',
    '({sc [expr"',
    '({[)= y)',
    '+{f(){}==',
    '+{...x)',
    'x = ({[a]:b, [15]:d});',
    '({[a]:b}=obj);',
    'x = {__prot_proto__: b} = y',
    '({__: a, __proto__: b} = x)',
    '({.. => x',
    '({..}})',
    `x = {
      *) {},
    }`,
    '({y {y:y2-2})',
    '({y 10 });',
    '({[f x} = > y',
    '({[()10, c  });',
    '({ x= { met }};;',
    'x = { [5 : foo }',
    '({get [x, [x]( {}});',
    '({a:c })',
    '(b.c  d })',
    '({a:  b. d  ? e : f })',
    'x(=x}=y;',
    'x(:b, cobj);',
    'x({a, c:d}=obj);',
    '({   async *x(){}   })',
    '({   async *1(){}   })',
    'x({async oo(){}, bar(){}});',
    'x({async foo(){});',
    'x({as[foo);',
    'x({ac foo(){}, async bar(){}});',
    'x({seoo](a}});',
    '€',
    '1 = 2 / 3',
    '1 *',
    '2 /=',
    'a ? b',
    'a ? b :',
    'let }',
    '79[s'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js', { disableWebCompat: true });
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js', { module: true, next: true });
      });
    });
  }
});
