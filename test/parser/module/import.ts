import * as t from 'assert';
import { parseModule } from '../../../src/escaya';

describe('Module - Export', () => {
  // Invalid cases
  for (const arg of [
    'import',
    'import;',
    'import {}',
    'import {};',
    'import {a: b} from "bar";',
    'import {foo',
    'import foo;',
    'import * asr x from "y"',
    'import {...foo} from "bar";',
    'import a, *= from "f";',
    'import a, ** from "f";',
    'import a, **= from "f";',
    'import * asr x from "f";',
    'import {...foo} from  "f";',
    'import a, *= from "f";',
    'import a, *= from "f";',
    'import a, *= from "f";',
    'import a, *= from "f";',
    'import a, *= from "f";',
    //'import { y as static  } from "foo"',
    // 'import { y as let } from "foo"',
    //'import { y as await  } from "foo"',
    // 'import { y as enum } from "foo"',
    //'import { y as yield } from "foo"',
    'import(a, b);',
    'import(/foo/) /bar/',
    // 'new import(x);',
    'import {a, b} fromx "c";',
    // 'import {} from',
    // 'import {,} from "a";',
    'import {a: b} from "bar"',
    // 'import { class } from "beast";',
    // 'import { class, var } from "beast"',
    'import {...foo} from "bar";',
    // 'import {b as,} from "a"',
    '{import {x} from "y";}',
    'function f(){import {x} from "y";}',
    'f (x); else import {x} from "y";',
    'switch (x) { case x: import {x} from "y"; }',
    // 'import { x as 1 } from "x";',
    'import [ foo ] from "foo.js"',
    'import * foo from "foo.js";;',
    'import { foo as bar',
    'import { foo, , } from "module";',
    'import { };',
    'import {;',
    'import {x}, {y} from "foo";',
    'import * as x, {y} from "foo";',
    'import / as a from "foo";',
    'import * as a from 12;',
    'import { x }, def from "foo";',
    'import {};',
    'import x from []',
    'import x from 12',
    'import foo, from "bar";',
    '() => { import arrow from ""; }',
    'try { import _try from ""; } catch(e) { }',
    'import * 12',
    "import a, 12 from 'foo'",
    "import * as x, * as y from 'foo';",
    "import {x}, {y} from 'foo';",
    "import {b,,} from 'a';",
    // 'import {a as 12} from "foo"',
    'import * as a from 12',
    'import {a as b, e as l 12',
    'import { };',
    'import {;',
    'import };',
    'import { , };',
    "import { , } from 'm.js';",
    'import { a } from;',
    'import { foo as bar ',
    'import { foo as bar, ',
    "import {x}, {y} from 'm.js';",
    "import * as x, {y} from 'm.js';",
    'import * as x',
    'import * as from',
    "import {,} from 'a';",
    'import foo, from "bar";',
    'import { foo as bar, ',
    'import { foo, , } from "module";',
    'for(var i=0; i<1; i++) import { default } from "module";',
    '{ export default null; }',
    'import(() => {} + x).promise',
    //'import { null } from "null"',
    //'import { switch } from "module";',
    // 'import { foo as switch } from "module";',
    'import { 123 } from "foo";',
    'import a, *= from "foo"',
    'import a, ** from "foo"',
    'import ghost from [];',
    'import { [123] } from "foo"'
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseModule(`${arg}`);
      });
    });
  }

  // Valid cases
  for (const arg of [
    'import x from "y"',
    'import {x as a, z} from "y"',
    'import {x, z as b} from "y"',
    'import {x as a, z as b} from "y"',
    'import {x as a, z as b,} from "y"',
    'import(() => {})',
    'import {} from "y"',
    'import {x} from "y"',
    'import * as a from "y"',
    'import x, * as a from "y"',
    'import $ from "foo"',
    'import {} from "foo";',
    "import n from 'n.js';",
    'import a from "module";',
    'import b, * as c from "module";',
    'import * as d from "module";',
    'import x from "y"',
    'import {x as a, z} from "y"',
    'import e, {f as g, h as i, j} from "module";',
    'import "y"',
    'import {x as z} from "y"',
    'import x, * as a from "y"',
    'import {k as l, m} from "module";',
    'import {n, o as p} from "module";',
    "import 'q.js';",
    "import a, {b,c,} from 'd'",
    "import a, {b,} from 'foo'",
    "import {as as as} from 'as'",
    "import a, {as} from 'foo'",
    "import a, {function as c} from 'baz'",
    "import a, {b as c} from 'foo'",
    "import a, * as b from 'a'",
    "import a, {} from 'foo'",
    "import a from 'foo'",
    "import * as a from 'a'",
    "import {m as mm} from 'foo';",
    "import {aa} from 'foo';",
    'import { as, get, set, from } from "baz"',
    'import icefapper from "await"',
    "import 'foo';",
    "import get from './get.js';",
    'import(a)',
    'import.meta',
    "import { a } from 'foo';",
    "import { a, b as d, c, } from 'baz';",
    "import * as foob from 'bar.js';",
    'import { as, get, set, from } from "baz"',
    "import {} from 'x'",
    "import {a} from 'x'",
    "import {a as b} from 'x'",
    "import {a,b,} from 'x'",
    "import foo, * as bar from 'baz';",
    'import $ from "foo"',
    'import {} from "foo";',
    "import n from 'n.js';",
    'import a from "module";',
    `import  * as set from "a"`,
    "import { a, b as d, c, } from 'baz';",
    "import * as thing from 'baz';",
    "import thing from 'foo';",
    "import thing, * as rest from 'foo';",
    "import thing, { a, b, c } from 'foo';",
    "import { arguments as a } from 'baz';",
    "import { for as f } from 'foo';",
    'import dlr, {tasinvcplbgq} from "foo";',
    "import { yield as y } from 'foo';",
    "import { static as s } from 'foo';",
    "import { let as l } from 'foo';",
    "import { q as z } from 'foo';",
    'import { null as nil } from "bar"',
    'import {bar, baz} from "foo";',
    'import b, * as c from "module";',
    "import { yield as y } from 'm.js';",
    "import { static as s } from 'm.js';",
    "import { yield as y } from 'foo';",
    'import async from "foo";',
    'import defexp, {x,} from "foo";',
    'import { Cocoa as async } from "foo"',
    "import 'somemodule.js';",
    "import { } from 'm.js';",
    "import { a } from 'm.js';",
    "import 'foo';",
    "import { a } from 'foo';",
    'import { a as of } from "k";',
    // Runtime errors
    'import foo from "foo.js"; try { (() => { foo = 12; })() } catch(e) {}',
    'import { foo } from "foo.js"; try { (() => { foo = 12; })() } catch(e) { assert.areEqual("Assignment to const", e.message); }',
    'import * as foo from "foo.js"; try { (() => { foo = 12; })() } catch(e) { assert.areEqual("Assignment to const", e.message); }',
    'import { foo as foo22 } from "foo.js"; try { (() => { foo22 = 12; })() } catch(e) { assert.areEqual("Assignment to const", e.message); }'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseModule(`${arg}`);
      });
    });
  }
});
