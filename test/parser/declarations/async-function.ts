import * as t from 'assert';
import { parseScript, recovery } from '../../../src/escaya';

describe('Declarations - Async function', () => {
  // Invalid cases
  for (const arg of [
    `function *a(){yield\n*a}`,
    'async function f() { for await ([x] in y) {} }',
    'async function f() { for await ("foo".x in y) {} }',
    'async function f() { for await ((x) in y) {} }',
    'async function f() { for await (var x in y) {} }',
    'async function f() { for await (let x in y) {} }',
    'async function f() { for await (const x in y) {} }',
    'async function f() { for await ([x] in y) {} }',
    'async function f() { for await ("foo".x in y) {} }',
    'async function f() { for await ((x) in y) {} }',
    //'async function f(){ [new await foo] }',
    // 'async function f(){ new (await foo) }',
    // 'async function f(){ new await x; }',
    'async function f(){ let y = x => await x; }',
    'async function f() { for await (var x in y) {} }',
    'async function f() { for await (let x in y) {} }',
    'async function f() { for await (const x in y) {} }',
    'async function fn() { await: ; }',
    'async function af() { var a = (x, await, y) => { }; }',
    'async function p(){ class C extends -x {} }',
    'async function p(){ class C extends !x {} }',
    'async function p(){ class C extends --x {} }',
    'async function p(){ class C extends (a, b) => x {} }',
    'async function p(){ class C extends (a, b) => x {} }',
    'async function p(){ class C extends (a, b) => x {} }',
    'async function p(){ class C extends (a, b) => x {} }',
    'async function f(){  class x extends yield y { }  }',
    'async function fn() { void await; }',
    'async function fn() { await: ; }',
    `async function foo (foo = super()) { var bar; }`,
    // 'async function f() { for await ([a = 1] = 1 of []); }',
    // 'async function f() { for await ([a] = 1 of []); }',
    'async function a(k = await 3) {}',
    //'async (b = class await {}) => 1',
    'async function* a() { await;  (r = a) => {} }',
    'async function* a() { (await) => {} }',
    'async function* f() { a = async function*(a = await) {}; }',
    'async function f() { let\narguments.await }',
    'async function f() { let\narguments.package }',
    'async function f() { let\narguments.yield }',
    'async function foo (foo = super()) { let bar; }',
    //'async function a(){ (foo = +await bar) => {} }',
    //'async function a(){  (foo = [{m: 5 + t(+await bar)}]) => {}     }',
    'async function a(){ (e=await)=>l }',
    // 'async function af() { var a = (x, y, z = await 0) => { }; }',
    //'async function wrap() {\n(a = await b) => a\n}',
    //'async function f(){ (x = new x(await x)) => {}   }',
    //'async function fn(eval) { "use strict"; }',
    'async function method() { var x = await; }',
    'async function af(a, b = await a) { }',
    'async function af(a, b = await a) { "use strict"; }',
    // 'async function af(x) { function f(a = await x) { } f(); } af();',
    // 'async function af(arguments) { "use strict"; }',
    'async function f() { let\narguments.length }',
    'async function a() { async function b(k = await 3) {} }',
    'async function a() { async function b([k = await 3]) {} }',
    'async function a() { async function b([k = [await 3]]) {} }',
    'async function a() { async function b({k = await 3}) {} }',
    'async function a() { async function b({k = [await 3]}) {} }',
    //'async function f() { var await = { await : async function foo() {} } }',
    //'async function f() { class x { foo(x=await y){} }   }',
    'async function f() { class x { foo(x=new (await y)()){} }   }',
    //'async function f(async, await) { var x = await async; return x; }',
    //'async function f() { class x { foo(await y){} }   }',
    'async function a() { return await; }',
    'async function af() { var a = (x, y, await) => { }; }',
    'async function af() { var a = (x, await, y) => { }; }',
    'async function af() { (b = (c = await => {}) => {}) => {}; }',
    'async function f(){    (x=(await)=y)=>z   }',
    'async function f(){    async function g(x=(await)=y){}   }',
    'async function f(){    (x=(await y)=y)=>z   }',
    'async function foo (foo) { super() };',
    'async function foo() { (async function await() { }) }',
    //`async function f(x = () => await x){}`,
    //'async function f(){ (x = class A {[await foo](){}; "x"(){}}) => {} }',
    //'async function x({await}) { return 1 }',
    //'async function f() { return {await}; }',
    //'async function f() { return {await = 0} = {}; }',
    //'async (a = await => {}) => {}',
    //'async function f() {   class x { foo(await y){} }   }',
    //'async function f(){  class x { foo(yield){} }  }',
    'async function f(){  class x extends yield y { }  }',
    'async function f(){  class yield { }  }',
    'async function p(){ class C extends {...x: y} = b {} }',
    'async function p(){ class C extends {...x: y = y} = b {} }',
    'async function p(){ class C extends a => b {} }',
    //'async function p(){ class C extends async a => b {} }',
    //'async function p(){ class C extends async function *(){} {} }',
    'async function p(){ class C extends oh,no {} }',
    'async function p(){ class C extends typeof x {} }',
    'async function p(){ class C extends x in y {} }',
    'async function p(){ class C extends s ** y {} }',
    `async function f(){ await foo
      /foo/ }`,
    `async function p(){
      class C extends yield
    x {}
    }`,
    // 'async function af() { var a = (x = await 0) => { }; }',
    // 'async function af() { var a = (x, y = await 0, z = 0) => { }; }',
    // 'async function af() { var a = (x, y, z = await 0) => { }; }',
    'async function af() { (b = (c = await => {}) => {}) => {}; }',
    '(async function await() {})',
    'function* a() { await 4; }',
    'async function a(k = await 3) {}',
    'async function a() { async function b(k = [await 3]) {} }',
    'async function a() { async function b([k = await 3]) {} }',
    'async function a() { async function b([k = [await 3]]) {} }',
    'async function a() { async function b({k = await 3}) {} }',
    'async function a() { async function b({k = [await 3]}) {} }',
    // 'async function a() { var await = 4; }',
    `async function f() {
      class x{[await](a){}}
    }`,
    'async function af() { (b = (c = await => {}) => {}) => {}; }',
    'async function foo (foo) { super() };',
    'async function foo() { (async function await() { }) }',
    //`(async function() { 0, { await } = {};  });`,
    //'async function f(){ (x = new (await x)) => {}   }',
    //'async function f(){ (x = new f[await x]) => {}   }',
    'async function a() { return await; }',
    'async function af() { var a = (x, y, await) => { }; }',
    'async function af() { var a = (x, await, y) => { }; }',

    'async function f( var { [f]: await f } = {};) {}',
    'async function f( x = y[await]) {}',
    'async function f( x = async function await() {}) {}',
    'async function f( x = 1 ? class await {} : 0) {}',
    'async function f( x = class await {}) {}',
    'async function f( class await {}) {}',
    'async function f( x = class { static [await]() {} }) {}',
    'async function f( { foo = async(1) => 1 }) => 1) {}',
    'async function f( /foo/) => 1) {}',
    'async function f( 1) => 1) {}',
    'async function f( var { ...await f } = {};) {}',
    'async function f( let { ...await f } = {};) {}',
    'async function f( const { ...await f } = {};) {}',
    'async function f( var { f: await f } = {};) {}',
    'async function f( let { f: await f } = {};) {}',
    'async function f( e=await) {}',
    'async function f( const [await f] = [];) {}',
    'async function f( let [await f] = [];) {}',
    'async function f( var [await f] = [];) {}',
    'async function f( ...[await]) {}',
    //'async function f( await = 1) {}',
    //'async function f( await) {}',
    //'async function f( ...await) {}',
    'async function f( [await = 1] = []) {}',
    'async function f( [await = 1]) {}',
    'async function f( [await] = []) {}',
    'async function f( [await]) {}',
    'async function f( /foo/) => 1) {}',
    'async function f( const { [f]: ...await f } = {};) {}',
    '"use strict"; async function f( [await = 1] = []) {}',
    //'"use strict";function f( [await = 1]) {}',
    //'"use strict";function f( [await] = []) {}',
    //'"use strict";function f( [await]) {}',
    '"use strict";function f( /foo/) => 1) {}',
    '"use strict";function f( const { [f]: ...await f } = {};) {}',
    'async function f(){  async (await) => x  }',
    'async function *f(foo = await bar){}',
    // 'async function f(){ (fail = class A {[await foo](){}; "x"(){}}) => {}    }',
    //'async function f(){ (fail = class A extends (await foo) {}) => fail    }',
    //'async function f(){ async function f(){   (a= {[await foo](){}, "x"(){}} ) => a    }    }',
    //'async function f(){ (fail = class extends await foo {}) => fail    }',
    //'async function a(){     async (foo = [{m: 5 + t(await bar)}]) => {}     }',
    //'async function a(){     (foo = [{m: 5 + t(await bar)}]) => {}     }',
    //'async function a(){ async ([v] = await bar) => {}     }',
    //'async function a(){ ([v] = await bar) => {}     }',
    //'async function a(){ async ({r} = await bar) => {}     }',
    //'async function a(){ ({r} = await bar) => {}     }',
    //'async function a(){ async (foo = await bar) => {}     }',
    //'async function a(){ (foo = await bar) => {}     }',
    'sync function g(){class x {*f(foo = [h, {m: t(await bar)}]){}}    }',
    'async function g(){class x {async *f(foo = [h, {m: t(await bar)}]){}}    }',
    'async function g(){let o = {async *f(foo = [h, {m: t(await bar)}]){}}    }',
    'async function g(){class x {f(foo = [h, {m: t(await bar)}]){}}    }',
    'async function g(){let o = {f(foo = [h, {m: t(await bar)}]){}}    }',
    'async function g(){let o = {async f(foo = [h, {m: t(await bar)}]){}}    }',
    'async function g(){let x = function *f(foo = [h, {m: t(await bar)}]){}    }',
    'async function g(){let x = async function f(foo = [h, {m: t(await bar)}]){}    }',
    'async function g(){let x = function f(foo = [h, {m: t(await bar)}]){}    }',
    'async function g(){async function *f(foo = [h, {m: t(await bar)}]){}    }',
    'async function g(){function *f(foo = [h, {m: t(await bar)}]){}    }',
    'async function g(){async function f(foo = [h, {m: t(await bar)}]){}    }',
    'async function g(){    function f(foo = [h, {m: t(await bar)}]){}    }',
    'async function g(){class x {async *f(foo = await bar){}}    }',
    //'async function g(){class x {*f(foo = await bar){}}    }',
    'async function af(a, b = await a) { }',
    'async (foo = await x) => foo',
    'var lambdaParenNoArg = await () => x < y;',
    'var lambdaArgs = await async (a, b ,c) => a + b + c;',
    'async function af() { var a = (await) => { }; }',
    'async function method(await;) { }',
    'async function g(){class x {async f(foo = await bar){}}    }',
    //'async function g(){class x {f(foo = await bar){}}    }',
    'async function g(){let o = {async *f(foo = await bar){}}    }',
    //'async function g(){let o = {*f(foo = await bar){}}    }',
    'async function g(){let o = {async f(foo = await bar){}}    }',
    //'async function g(){let o = {f(foo = await bar){}}    }',
    'async function g(){let x = async function *f(foo = await bar){}    }',
    'async function g(){let x = async function f(foo = await bar){}    }',
    'async function g(){async function *f(foo = await bar){}    }',
    //'async function g(){let x = function f(foo = await bar){}    }',

    'async function f() { (class { static async method([await = 1]) {} }) } ',
    //'async function f() { (class { static async method(await) {} })} ',
    'async function f() { (class { async method({ } = await) {} })} ',
    'async function f() { (class { async method([await = 1]) {} })} ',
    'async function f() { (class { static async method({ } = await) {} })} ',
    // 'async function f() { var asyncArrow = async({ await = 1}) => {};} ',
    'async function f() (async function([await = 1]) {})} ',
    //'async function f() {(async function({ await }) {})} ',
    'async function f() (async function({ await = 1 }) {})} ',
    //'async function f() { async function f({ await }) {}} ',
    'async function f() { async function f([await = 1]) {}} ',
    'return async (await) => {};} ',
    'var O = { async [await](a, a) {} }} ',
    '(a = await b) => a} ',
    // 'var f = await => 42;',
    // 'var f = (...await) => 42;',
    // 'async function f() { var e = {await};} ',
    'async function f() { (await 1) = 1} '
    //'async function f() { return {await = 0} = {}; }',
    //'async (a = await => {}) => {}'
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseScript(`${arg}`);
      });
    });

    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
  }

  // Valid cases
  for (const arg of [
    'async function af(x) { var x = 0; with (obj) { x = await af(); } return x; }',
    'async function * foo() { yield ()=>{}; }',
    'async function af1(a) { await a; return await foo.call({ x : 100 }); /** comment**/ }',
    'async function f2(d, e, f) { let x = await f1(d + 10, e + 20, f + 30); return x; }',
    '(async function(x = 1) {})',
    '(async function(x = 1, ...a) {})',
    '(async function(x, y = 1, z, v = 2, ...a) {})',
    '(async function(x, y = 1, z, v = 2) {})',
    '(async function(x, y = 1, z) {})',
    '(async function(x, y = 1, ...a) {})',
    `(async () => { return !await Promise.resolve(false); })();`,
    `async function f(x = async function(){await x}){}`,
    `async function f(x = async () => await x){}`,
    `async function f(){ async(await x); }`,
    `function f() { async function yield() {} }`,
    'async (a = async () => { await 1; }) => {}',
    'async function wrap() {\n({a = await b} = obj)\n}',
    'async function wrap() {\n(a = await b)\n}',
    'async function foo(a = class {async bar() { await b }}) {}',
    'async function foo(a = {async bar() { await b }}) {}',
    'async function foo(a = async () => await b) {}',
    'async function foo(a = async function foo() { await b }) {}',
    'async function foo() { await + 1 }',
    'async function f() { for await ([a] of []); }',
    'async function f() { for await ([a = 1] of []); }',
    "async function f() { 'use strict'; for await ({a} of []); }",
    'async function * f() { for await ({a: a} of []); }',
    'async function * f() { for await ({0: a} of []); }',
    'async function * f() { for await ({0: a = 1} of []); }',
    'async function x({x}) { var y = x; var x = 2; return y; }',
    'async function x({x}) { { var y = x; var x = 2; } return y; }',
    'async function x({x}, g = () => x) { { var x = 2; } return g(); }',
    'async function x({x}) { var g = () => x; var x = 2; return g(); }',
    'async function x({x}) { { var g = () => x; var x = 2; } return g(); }',
    'async function x({x}, g = () => eval("x")) { var x = 2; return g(); }',
    'async function x(y, g = () => y) { var y = 2; return g(); }',
    'async function x({x}, y) { var z = y; var y = 2; return z; }',
    'async function x({x}, y, [z], v) { var x, y, z; return x*y*z*v }',
    'async function x({x}) { function x() { return 2 }; return x(); }',
    'async function x(x = (y = 1)) { z = 1; await undefined; w = 1; };',
    'async function x(a, b, c) { await a; }',
    'async function a({x}) { var x = 2; return x }',
    'async function a() { await 4; } var await = 5',
    'async function a() { function b() { return await; } }',
    'async function a() { var k = { async: 4 } }',
    'async function a() { await 4; }',
    'async\nfunction foo() { }',
    'async function *gen() { yield [...yield]; }',
    '"use strict"; async function foo() { function bar() { await = 1; } bar(); }',
    'async function await() { }',
    '(async function foo() { })',
    'async ({a: b = c})',
    'async function foo(a, b) { await a }',
    '(async function foo(a) { await a })',
    '(async (a) => await a)',
    '({async foo(a) { await a }})',
    'async function foo(a, b) { await a + await b }',
    'function foo() { await + 1 }',
    'async function foo(a = async function foo() { await b }) {}',
    'async function foo(a = async () => await b) {}',
    'async function foo(a = {async bar() { await b }}) {}',
    'async function foo(a = class {async bar() { await b }}) {}',
    '({async = 0} = {})',
    'async function a() { var t = !await 1 }',
    'async function a() { var t = ~await 1; }',
    'async function a() { var t = !(await 1); }',
    'async function a() { var t = ~(await 1);  }',
    'async function a() { var t = typeof (await 1); }',
    'async function a() { var t = typeof typeof await 1;  }',
    'async function a() { var t = void void await 1;  }',
    'async function a() { await 2 + 3; }',
    '(async function a() {}.constructor)',
    `async function f() {
      class x{[x](a=await){}}
    }`,
    `async function f() {
      class x{[x](a=await y){}}
    }`,
    `async function f() {
      class x{[x](await){}}
    }`,
    'async function await(){}',
    '"use strict"; async function a() { var t = +(await 1); }',
    '"use strict"; async function a() { var t = void (await 1); }',
    '"use strict"; async function a() { var t = !void void await 1; }',
    '"use strict"; async function a() { var t = +(await 1); }',
    '"use strict"; async function a() { var t = +(await 1); }',
    'async function foo({x}) { { var x = 2; } return x; }',
    'async function foo(a = x) { var x = 2; return a; }',
    'async function foo(a = x) { function x() {}; return a; }',
    'async function foo(a = eval("x")) { var x; return a; }',
    'async function foo(a = function() { return x }) { var x; return a(); }',
    'async function foo(a = () => x) { var x; return a(); }',
    'async function foo(a = () => eval("x")) { var x; return a(); }',
    'async function foo(x, y = () => x) { return x + y(); }',
    'async function foo(x = {a: 1, m() { return 2 }}) { return x.a + x.m(); }',
    'async function foo(x = () => 1) { return x() }',
    'async function async(x, y) { return x - y; }',
    'async function async() { return 12; }',
    'async function * fn() { import(yield * ["Mr. X", "Mr. Y", "Mr. Z"]); }',
    'async function* f(a = async function*() { await 1; }) {}',
    'function f() { return await; }',
    `async function *gen() {
      yield {
          ...yield,
          y: 1,
          ...yield yield,
        };
    }`,
    `async function *gen() {
      yield [...yield];
    }`,
    `async function *gen() {
      yield [...yield yield];
    }`,
    `"use strict"; async function * fn() {
      for await ([ {} = yield ] of [iterable]) {
      }
    }`,
    `async function f() {
      let x = await y;
            const a = (b) => {};
    }`,
    `async function f() {
      (((x = await y)));
            const a = (b) => {};
    }`,
    `async function f() {
      let x = await y;
            async (b) => {};
    }`,
    `async function f() {
      (((x = await y)));
            async (b) => {};
    }`,
    'async function foo(a, b = () => a, c = b) { function b() { return a; } var a = 2; return [b, c]; }',
    'async function foo(a = x) { let x = 2; return a; }',
    'async function foo(a = () => eval("x")) { var x; return a(); }',
    'async function foo(x = (y = 1)) { z = 1; await undefined; w = 1; };',
    'async function f() { let a = function(a = await) {}; }',
    'async function f(a = async function() { await 1; }) {}',
    'async function foo(y = eval("var x = 2")) { with ({}) { return x; } }',
    'async function foo(y = eval("var x = 2"), z = x) { return z; }',
    'async function foo(y = eval("var x = 2"), z = eval("x")) { return z; }',
    'async function foo(z = eval("var y = 2")) { return y; }',
    'async function foo(f = () => x) { eval("var x = 2"); return f() }',
    'async function foo() { return await bar() + await z(); }',
    'async function foo(a, b) { await a + await b }',
    'async function foo(a) { return a ? await bar() : await z(); }',
    'async function af(x) { var x = 0; with (obj) { x = await af(); } return x; }',
    'async function * foo() { yield ()=>{}; }',
    'async function af1(a) { await a; return await foo.call({ x : 100 }); /** comment**/ }',
    'async function f2(d, e, f) { let x = await f1(d + 10, e + 20, f + 30); return x; }',
    '(async function(x = 1) {})',
    'async function f(){    function g(x=(await)=y){}   }',
    '(async function(x = 1, ...a) {})',
    '(async function(x, y = 1, z, v = 2, ...a) {})',
    '(async function(x, y = 1, z, v = 2) {})',
    '(async function(x, y = 1, z) {})',
    '(async function(x, y = 1, ...a) {})',
    `(async () => { return !await Promise.resolve(false); })();`,
    `async function f(x = async function(){await x}){}`,
    `async function f(x = async () => await x){}`,
    `async function f(){ async(await x); }`,
    `function f() { async function yield() {} }`,
    'async (a = async () => { await 1; }) => {}',
    `async function yield() {}`,
    `(async function yield() {});`,
    `function f() { (async function yield() {}); }`,
    `function* g() { (async function yield() {}); }`,
    `({ async yield() {} });`,
    `function f() { ({ async yield() {} }); }`,
    `function* g() { ({ async yield() {} }); }`,
    `({ async [yield]() {} });`,
    `function f() { ({ async [yield]() {} }); }`,
    `function* g() { ({ async [yield]() {} }); }`,
    'async function* a() { yield; (r = a) => {} }',
    'async function* x(a, b, ...c) { await 1; }',
    'async function* x(a, b = 2) { await 1; }',
    'async function* x(a) { yield 1; }',
    'async function* x(a, b = 2) { yield 1; }',
    'async function* x(a, b, ...c) { yield 1; }',
    'async function x() { let x = await 1; eval("var i = 5"); let y = await 2; debugger; }',
    'new (async function*() {})',
    '(async function*() {}).caller',
    '(async function*() {}).arguments',
    'async function fib(n) { return (n == 0 || n == 1) ? n : await fib(n - 1) + await fib(n - 2); }',
    'var hardcoreFib = async function fib2(n) { return (n == 0 || n == 1) ? n : await fib2(n - 1) + await fib2(n - 2); }',
    '() => class extends (async function() {}) {}',
    'async function f() {   class x { foo(x=new (await)()){} }   }',
    'async function f() {   class x extends await y { }   }',
    `async function yield() {}`,
    'async function x () { a = { a: await(a) } }',
    'async function* a(){}',
    'async function f() {   class x { await(){} }   }',
    `async function test() { await foo(); }`,
    `async function a() { let a = await import('./foo.js'); }`,
    `async function a() { try { let a = await import({ toString() { throw new Error('out'); } }); } catch (e) {} }`,
    `function x() { return async () => { return await new.target }; }`,
    `async function test() { try { if (!await internals.hasServiceWorkerRegistration(self.origin)) {} } catch(a) {} }`,
    `async function one(x) { await two(x); }`,
    `async function* x({y = (0x44FB6C6428574)}) { while (({} = ([]), {} = function (z) { while (((await))) ;}) => f = [, ]) {}}`,
    `async function* x() { let r = n * await asyncFact(n - 1); }`,
    `(async function x(y) { await 1; }).length`,
    `async function h() { for await (let x of ["a"]) { Debugger(); } };`,
    `async function f(){ new (await foo) }`,
    `function f() { var await = 10; var o = { await }; }`,
    `function f() { const await = 10; }`,
    `var O = { *method() { var await = 1; return await; } };`,
    `var asyncFn = async({ foo = 1 }) => foo;`,
    `function* foo() { var await = 1; return await; }`,
    'async function f() {   class x { foo(x=await){} }   }',
    `async function a(){     async ([v] = await bar);     }`,
    `async function f() { class x{[x](a=await){}} }`,
    `async function a(){     async (foo = await bar);     }`,
    'function f() {   class x { [await](){} }   }',
    '(async function* (){})',
    'async function* a() { for (let m in ((yield))) x;  (r = a) => {} }',
    'async function f() {   class x { foo(await){} }   }',
    'function f() {   class x { await(){} }   }',
    'async function f() {   class x extends feh(await y) { }   }',
    'function f() {   class x { foo(x=new (await)()){} }   }',
    'async function fn() { const x = await import([a]); }',
    'async function fn() { const x = await import([]); }',
    'async function fn() { const x = await import(() => {}); }',
    'async function fn() { const x = await import(await a); }',
    'async function fn() { const x = await getpromise(); }',
    'async function fn() { const x = await import(a()()); }',
    'async function f(){ if (await \n x) {} }',
    'async function a(){     async ([y] = [{m: 5 + t(await bar)}]);     }',
    'async function f(){ await \n x; }',
    'async function f(){ if (await \n x) {} }',
    'let o = {await(){}}',
    'async function f() { await 3; }',
    'async function a(){     async ({r} = await bar);     }',
    'async function fn() { const x = await import(a()[0]); }',
    'async function fn() { const x = await import(a().x); }',
    'async function fn() { const x = await import(b()); }',
    'async function fn() { const x = await import((((((("./foo"))))))); }',
    'async function fn() { const x = await import(x += a); }',
    'async function fn() { const x = await import(x = a); }',
    'async function fn() { const x = await import(delete void typeof +-~! 0 && b); }',
    'async function fn() { const x = await import(false || b); }',
    'async function fn() { const x = await import({}); }',
    'async function fn() { const x = await import({}); }',
    'async function fn() { (await x)[a] += y; }',
    'async function fn() { x[await a] += y; }',
    'async function fn() { (await x).a += await y; }',
    'async function fn() { (await x)[a] += await y; }',
    'async function fn() { x[await a] += await y; }',
    'async function fn() { (await x) ** y; }',
    'async function fn() { return (await x), y; }',
    'async function fn() { return x, await y; }',
    'async function fn() { x.a.b = await y; }',
    'async function fn() {  x[z] = await y; }',
    'async function fn() {x[z].b = await y; }',
    `async function f(){ if (await
      x) {} }`,
    'async function fn() { const x = await import({}); }',
    'async function fn() { x.a[z] = await y;; }',
    'async function fn() { (await x) && y; }',
    'async function fn() { x && await y; }',
    'async function fn() {  x = await y; }',
    'async function fn() { x + await y; }',
    'async function fn() {(await x) + y; }',
    'async function fn() {(await x).a = y; }',
    'async function fn() {  (await x.a).b = y; }',
    'async function fn() { (await x)[z] = y; }',
    'async function fn() { x[await z].b = y;}',
    'async function fn() { (await x[z]).b = y; }',
    'async function * fn() { return import(yield 42); }',
    'async function f() { let\narguments }',
    'async function f() { let\ninterface }',
    'async function f() { let\npackage }',
    'async function f() { for await (x[a in b] of y); }',
    'async function a() { await a.b[c](d).e; }',
    'await.b[c](d).e;',
    `async function yield() {}`,
    'async function async() { return 12; }',
    'async function p(){ class C extends (oh,yes) {} }',
    'async function foo(a, b = () => a, c = b) { function b() { return a; } var a = 2; return [b, c]; }',
    'async function foo(a = x) { let x = 2; return a; }',
    'async function foo(a = () => eval("x")) { var x; return a(); }',
    'async function foo(x = (y = 1)) { z = 1; await undefined; w = 1; };',
    'async function f() { let a = function(a = await) {}; }',
    'async function f(a = async function() { await 1; }) {}',
    'async function foo(y = eval("var x = 2")) { with ({}) { return x; } }',
    'async function foo(y = eval("var x = 2"), z = x) { return z; }',
    'async function f(){ await await foo; }',
    'async function a(){     async ([v] = await bar);     }',
    'async function a(){     async (foo = [{m: 5 + t(await bar)}]);     }',
    'function *f(){  foo(await)  }',
    'async function foo(y = eval("var x = 2"), z = eval("x")) { return z; }',
    'async function foo(z = eval("var y = 2")) { return y; }',
    'async function foo(f = () => x) { eval("var x = 2"); return f() }',
    'async function foo() { return await bar() + await z(); }',
    'async function foo(a, b) { await a + await b }',
    'async function foo(a) { return a ? await bar() : await z(); }',
    'async function a() { var t = void void await 1;  }',
    'async function a() { await 2 + 3; }',
    '(async function a() {}.constructor)',
    '"use strict"; async function a() { var t = +(await 1); }',
    '"use strict"; async function a() { var t = void (await 1); }',
    '"use strict"; async function a() { var t = !void void await 1; }',
    '"use strict"; async function a() { var t = +(await 1); }',
    '"use strict"; async function a() { var t = +(await 1); }',
    'async function foo({x}) { { var x = 2; } return x; }',
    'async function foo(a = x) { var x = 2; return a; }',
    'async function foo(a = x) { function x() {}; return a; }',
    'async function foo(a = eval("x")) { var x; return a; }',
    'async function foo(a = function() { return x }) { var x; return a(); }',
    'async function foo(a = () => x) { var x; return a(); }',
    'async function foo(a = () => eval("x")) { var x; return a(); }',
    'async function foo(x, y = () => x) { return x + y(); }',
    'async function foo(x = {a: 1, m() { return 2 }}) { return x.a + x.m(); }',
    'async function foo(x = () => 1) { return x() }',
    'async function async(x, y) { return x - y; }',
    'async function x({x}) { { var y = x; var x = 2; } return y; }',
    'async function x({x}, g = () => x) { { var x = 2; } return g(); }',
    'async function x({x}) { var g = () => x; var x = 2; return g(); }',
    'async function x({x}) { { var g = () => x; var x = 2; } return g(); }',
    'async function x({x}, g = () => eval("x")) { var x = 2; return g(); }',
    'async function x(y, g = () => y) { var y = 2; return g(); }',
    'async function x({x}, y) { var z = y; var y = 2; return z; }',
    'async function x({x}, y, [z], v) { var x, y, z; return x*y*z*v }',
    'async function x({x}) { function x() { return 2 }; return x(); }',
    'async function x(x = (y = 1)) { z = 1; await undefined; w = 1; };',
    'async function x(a, b, c) { await a; }',
    'async function a({x}) { var x = 2; return x }',
    'async function a() { await 4; } var await = 5',
    'async function a() { function b() { return await; } }',
    'async function p(){ class C extends [...x=y] {} }',
    'async function p(){ class C extends [x] {} }',
    'async function p(){ class C extends [x] = b {} }',
    'async function p(){ class C extends `temp {waitforit} late` {} }',
    'async function p(){ class C extends {...x=y} {} }',
    'async function p(){ class C extends {x: y=y} {} }',
    'async function p(){ class C extends {x: y} {} }',
    'async function p(){ class C extends arguments {} }',
    'async function p(){ class C extends fooo {} }',
    'async function p(){ class C extends fooo`bar` {} }',
    'async function p(){ class C extends this {} }',
    'async function p(){ class C extends import("x") {} }',
    'async function p(){ class C extends function f(){} {} }',
    'async function p(){ class C extends new.target {} }',
    'async function a() { var k = { async: 4 } }',
    'async function a() { await 4; }',
    'async function await(){}',
    'async function *await(){}',
    'function *await(){}',
    'async function await() {}',
    'function * yield() { }',
    'async function a() { var t = !await 1 }',
    'async function a() { var t = ~await 1; }',
    'async function a() { var t = !(await 1); }',
    'async function a() { var t = ~(await 1);  }',
    'async function a() { var t = typeof (await 1); }',
    'async function a() { var t = typeof typeof await 1;  }',
    'async function wrap() {\n({a = await b} = obj)\n}',
    'async function wrap() {\n(a = await b)\n}',
    'async function foo(a = class {async bar() { await b }}) {}',
    'async function foo(a = {async bar() { await b }}) {}',
    'async function foo(a = async () => await b) {}',
    'async function foo(a = async function foo() { await b }) {}',
    'async function foo() { await + 1 }',
    'async function f() { for await ([a] of []); }',
    'async function f() { for await ([a = 1] of []); }',
    "async function f() { 'use strict'; for await ({a} of []); }",
    'async function * f() { for await ({a: a} of []); }',
    'async function * f() { for await ({0: a} of []); }',
    'async function * f() { for await ({0: a = 1} of []); }',
    'async function x({x}) { var y = x; var x = 2; return y; }',
    `(async function yield() {});`,
    `function f() { (async function yield() {}); }`,
    `function* g() { (async function yield() {}); }`,
    `({ async yield() {} });`,
    `function f() { ({ async yield() {} }); }`,
    `function* g() { ({ async yield() {} }); }`,
    `({ async [yield]() {} });`,
    `function f() { ({ async [yield]() {} }); }`,
    `function* g() { ({ async [yield]() {} }); }`,
    'async function* a() { yield; (r = a) => {} }',
    'async function* x(a, b, ...c) { await 1; }',
    'async function* x(a, b = 2) { await 1; }',
    'async function* x(a) { yield 1; }',
    'async function* x(a, b = 2) { yield 1; }',
    'async function* x(a, b, ...c) { yield 1; }',
    'async function x() { let x = await 1; eval("var i = 5"); let y = await 2; debugger; }',
    'new (async function*() {})',
    '(async function*() {}).caller',
    '(async function*() {}).arguments',
    'async function fib(n) { return (n == 0 || n == 1) ? n : await fib(n - 1) + await fib(n - 2); }',
    'var hardcoreFib = async function fib2(n) { return (n == 0 || n == 1) ? n : await fib2(n - 1) + await fib2(n - 2); }',
    'async function f() {   class x { foo(x=new (await)()){} }   }',
    'async function f() {   class x extends await y { }   }',
    `async function yield() {}`,
    'async function x () { a = { a: await(a) } }',
    'async function* a(){}',
    'async function f() {   class x { await(){} }   }',
    'async function f() {   class x { foo(x=await){} }   }',
    'async function fn() { const x = await import(a().x); }',
    'async function fn() { const x = await import(b()); }',
    'async function fn() { const x = await import((((((("./foo"))))))); }',
    'async function fn() { const x = await import(x += a); }',
    'async function fn() { const x = await import(x = a); }',
    'async function fn() { const x = await import(delete void typeof +-~! 0 && b); }',
    'async function fn() { const x = await import(false || b); }',
    'async function fn() { const x = await import({}); }',
    'async function fn() { const x = await import({}); }',
    'function f() {   class x { [await](){} }   }',
    '(async function* (){})',
    'async function* a() { for (let m in ((yield))) x;  (r = a) => {} }',
    'async function f() {   class x { foo(await){} }   }',
    'function f() {   class x { await(){} }   }',
    'async function f() {   class x extends feh(await y) { }   }',
    'function f() {   class x { foo(x=new (await)()){} }   }',
    'async function fn() { const x = await import([a]); }',
    'async function fn() { const x = await import([]); }',
    'async function fn() { const x = await import(() => {}); }',
    'async function fn() { const x = await import(await a); }',
    'async function fn() { const x = await getpromise(); }',
    'async function fn() { const x = await import(a()()); }',
    'async function fn() { const x = await import(a()[0]); }',
    'async function fn() { (await x)[a] += y; }',
    'async function fn() { x[await a] += y; }',
    'async function fn() { (await x).a += await y; }',
    'async function fn() { (await x)[a] += await y; }',
    'async function fn() { x[await a] += await y; }',
    'async function fn() { (await x) ** y; }',
    'async function fn() { return (await x), y; }',
    'async function fn() { return x, await y; }',
    'async function fn() { x.a.b = await y; }',
    'async function fn() {  x[z] = await y; }',
    'async function fn() {x[z].b = await y; }',
    'async function fn() { const x = await import({}); }',
    'async function fn() { x.a[z] = await y;; }',
    'async function fn() { (await x) && y; }',
    'async function fn() { x && await y; }',
    'async function fn() {  x = await y; }',
    'async function f() { for await (x[a in b] of y); }',
    `async function f(){ await
      ++c; }`,
    `async function f(){ await b
        ++c; }`
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseScript(`${arg}`);
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
  }

  it('Array in object', () => {
    t.deepEqual(parseScript('function fk({x: [a, {b: []}]}) {}'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'FunctionDeclaration',
          name: {
            type: 'BindingIdentifier',
            name: 'fk'
          },
          params: {
            type: 'FormalParameters',
            leafs: [
              {
                type: 'BindingElement',
                binding: {
                  type: 'ObjectBindingPattern',
                  properties: [
                    {
                      type: 'BindingProperty',
                      key: {
                        type: 'BindingIdentifier',
                        name: 'x'
                      },
                      value: {
                        type: 'ArrayBindingPattern',
                        leafs: [
                          {
                            type: 'BindingIdentifier',
                            name: 'a'
                          },
                          {
                            type: 'ObjectBindingPattern',
                            properties: [
                              {
                                type: 'BindingProperty',
                                key: {
                                  type: 'BindingIdentifier',
                                  name: 'b'
                                },
                                value: {
                                  type: 'ArrayBindingPattern',
                                  leafs: []
                                },
                                computed: false
                              }
                            ]
                          }
                        ]
                      },
                      computed: false
                    }
                  ]
                },
                initializer: null
              }
            ]
          },
          contents: {
            type: 'FunctionBody',
            statements: [],
            directives: []
          },
          async: false,
          generator: false
        }
      ],
      webCompat: true
    });
  });

  it('Double identifier in array sans default', () => {
    t.deepEqual(parseScript('function f([foo,bar=b]){}'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'FunctionDeclaration',
          name: {
            type: 'BindingIdentifier',
            name: 'f'
          },
          params: {
            type: 'FormalParameters',
            leafs: [
              {
                type: 'BindingElement',
                binding: {
                  type: 'ArrayBindingPattern',
                  leafs: [
                    {
                      type: 'BindingIdentifier',
                      name: 'foo'
                    },
                    {
                      type: 'AssignmentPattern',
                      left: {
                        type: 'BindingIdentifier',
                        name: 'bar'
                      },
                      right: {
                        type: 'BindingIdentifier',
                        name: 'b'
                      }
                    }
                  ]
                },
                initializer: null
              }
            ]
          },
          contents: {
            type: 'FunctionBody',
            statements: [],
            directives: []
          },
          async: false,
          generator: false
        }
      ],
      webCompat: true
    });
  });
});
