import * as t from 'assert';
import { parseScript } from '../../../src/escaya';

describe('Statements - For in', () => {
  for (const arg of [
    'for (x+b in y);',
    'for (b++ in y);',
    'for ([x + y] in obj);',
    'for ([...x,] in [[]]);',
    'for ({} = y in y);',
    'for (true ? 0 : 0 in {}; false; ) ',
    'for (...x in y){}',
    'for (const ...x in y){}',
    'for ({x=y}=x in x) ;',
    'for ({x} = y in z);',
    'for ({} = y in y);',
    'for ({ x: { set y(val) { }}?.y = 42} in [{x: 42}]) ;',
    'for ({ x: { set y(val) {} }?.y} in [{x: 42}]) ;',
    //'for ({eval = 0} in x);',
    'for ([] = x in y);',
    'for (x = y in z) ;',
    'for (++a().b in c);',
    'for ({a: x + y} in obj);',
    'for ([].bar = x in obj);',
    'for ({}.bar = x in obj);',
    'for ("foo".bar = x in obj);',
    'for (++a()[b] in c);',
    'for (a = b in c) {}',
    'for (var {,,x} in obj);',
    'for (var {x:y=z} = obj, {a:b=c});',
    'for (var {x:y=z}, {a:b=c} in obj);',
    'for (var {,} in obj);',
    'for (var x, {y});',
    'for (let {,x} in obj);',
    'for (a ? b : c in x);',
    'for (let [foo]);',
    'for ([x] = z in obj);',
    'for ([x + y] = z in obj);',
    'for (let[x].foo in x);',
    'for (let [...foo,] in obj);',
    'for (let [.x] in obj);',
    'for (let [foo], bar);',
    'for (let foo, [bar]);',
    'for (let [..x] in obj);',
    'for (let [... ...foo] in obj);',
    'for (let [...[foo, bar],,] in obj);',
    'for (let [...foo, bar] in obj);',
    'for (let foo, [bar] in arr);',
    'for (let x, {y} in obj);',
    'for (let {x});',
    'for (x in { x : ++y } = {});',
    'for (x in { get x() {} } = {});',
    'for (x in { x: y() } = {});',
    'for (let a, b, c in d){}',
    'for (let a = b in c; ;);',
    `for (a+b in c) d;`,
    `for (let + in y);`,
    `for (let() in y);`,
    'for (let i = 20 in b) { }',
    'for (const i = 20 in b) { }',
    'for (const {i} = 20 in b) { }',
    'for (let()() in y);',
    'for (var a += 5 in b) break',
    'for (var (a) in b) { }',
    "for(var a,b '",
    'for (let [foo], bar in arr);',
    'for (let [foo] = arr, [bar] in arr);',
    'for (delete new a() in b) break',
    'for (a * a in b) break',
    'for ((a * a) in b) break',
    'for (()=>x in y);',
    'for ("foo".x += z in y);',
    'for ("foo".x = z in y);',
    'for (a++ in b) break',
    'for ((a++) in b) break',
    'for (++a in b) break',
    'for ((++a) in b) break',
    'for (a, b in c) break',
    'for (var a = 5 += 6 in b) break',
    'for ((++a) in b) break',
    'for (a, b in c) break',
    'for (new a in b in c in d) break',
    'function f() { for (new a in b in c in d) break }',
    'for (new new new a in b) break',
    'function f() { for (new new new a in b) break }',
    'for (delete new a() in b) break',
    'for (var a = (b in c in d) break',
    'for (/x/g + b in obj);',
    'for ("abc" + b in obj);',
    'for (2 + b in obj);',
    'for ({} + b in obj);',
    'for ([] + b in obj);',
    'for (a + b in obj);',
    'for (var {a: []} = 2 in []) { }',
    'for (var [x] = [] in null);',
    'for (var [x] = x in y) var x;',
    'for( in y);',
    'for(* in y);',
    'for(x* in y);',
    'for(a?b:x* in y);',
    'for(a?b:* in y);',
    'for(var x=a* in y);',
    'for(var x=u?i:a* in y);',
    'for(*;;);',
    'for(x*;;);',
    'for(a?b:x*;;);',
    'for(a?b:*;;);',
    'for(var x=u?i:a*;;);',
    'for(=x;;);',
    'for (var foo, /bar/ in x);',
    'for (a?b:(c in y))z;',
    'for ((c in y))z;',
    'for (x=0 in y);',
    'for ({ x: [(x, y)] } in [{ x: [] }]) ;',
    'for ({ x: { get x() {} } } in [{ x: {} }]) ;',
    'for (var key on bar);',
    'for (var key ik bar);',
    'for (var key inhere bar);',
    'for (var key instanceof bar);',
    'for (var i, i2 in {});',
    'for (x in { x: new.target } = {});',
    'for (x in { import.meta } = {});',
    'for (x in [x()] = {});',
    'for (x in [--x = 1] = {});',
    'for (x in [x--] = {});',
    'for (x in [new.target] = {});',
    'for (x in [super = 1] = {});',
    'for (x in [function* f() {}] = {});',
    'for (x in [(50)] = {});',
    'for (x in [(async function() {})] = {});',
    'for (x in [(foo())] = {});',
    'for (x in { x: 50 } = {});',
    'for (x in { x: (foo()) } = {});',
    'for (x in { x: async function() {} } = {});',
    'for (x in { x: y } = "str" = {});',
    'for (x in [(x,y) => z] = {});',
    'for (x in [async x => z] = {});',
    'for (x in {x: (y) => z} = {});',
    'for (x in {x: (y,w) => z} = {});',
    'for (x in {x: async (y) => z} = {});',
    'for (x in {x: async (y,w) => z} = {});',
    'for (x in {x: async (y) => z} = {});',
    'for (x in [x, y, ...z = 1] = {});',
    'for (x in [...z = 1] = {});',
    'for (x in [x, y, ...[z] = [1]] = {});',
    'for (x in [...++x] = {});',
    'for (x in [...x--] = {});',
    'for (x in [...!x] = {});',
    'for (x in [...x + y] = {});',
    'for (x in (({ x: x4, x: (x+=1e4) })) = {});',
    'for (x in ({ x: x4, x: (x+=1e4) } = {}) = {});',
    'for (x in (({ x: x4, x: (x+=1e4) } = {})) = {});',
    'for (x in (({ x: x4, x: (x+=1e4) }) = {}) = {});',
    'for (x in ({ x: y } = {}) = {});',
    'for (x in (({ x: y } = {})) = {});',
    'for (x in (({ x: y }) = {}) = {});',
    'for (x in ([a]) = {});',
    'for (x in (([a])) = {});',
    'for (x in ([a] = []) = {});',
    'for (x in (([a] = [])) = {});',
    'for (x in (([a]) = []) = {});',
    'for (x in { x: ([y]) } = {});',
    'for (x in { x: ([y] = []) } = {});',
    'for (x in { x: ({y} = {}) } = {});',
    'for (x in [ ...([a]) ] = {});',
    'for (x in [ ...([a] = []) = {});',
    'for (x in [ ...[ ( [ a ] ) ] ] = {});',
    'for (x in [ ([a]) ] = {});',
    'for (x in [ (...[a]) ] = {});',
    'for (x in [ ([a] = []) ] = {});',
    'for (x in [ (++y) ] = {});',
    'for (x in [ ...(++y) ] = {});',
    'for (x in [ x += x ] = {});',
    // 'for (x in { foo: x += x } = {});',
    'for ((x)=>{}.x in y);',
    'for (((x)=>{}) in y);',
    'for ((x)=>{} in y);',
    'for (x=>{}.x in y);',
    'for (+a in c);',
    'for (+a.b in c);',
    'for (+a[b] in c);',
    'for (+a().b in c);',
    'for (+a()[b] in c);',
    'for (--a in c);',
    'for (--a.b in c);',
    'for (--a[b] in c);',
    'for (--a().b in c);',
    'for (--a()[b] in c);',
    'for (void a in c);',
    'for (void a[b] in c);',
    'for (x = 0 in {});',
    'for(o[0] = 0 in {});',
    'for ((a++) in c);',
    'for (+a().b in c);',
    'for (void a.b in c);',
    'for (let i, j in {}) {}',
    'for (let {x}, {y} in z);',
    'for (let i, j in [1, 2, 3]) {}',
    'for (let i, j = 1 in {}) {}',
    'for (let i, j = void 0 in [1, 2, 3]) {}',
    'for(o.p = 0 in {});',
    'for(o[0] = 0 in {});',
    'for ((x=a?b:c) in y)z;',
    'for (5 in {});',
    'for (var { x: (y.z) = foo() } in [{}]) {}',
    'for (var { x: (y) = foo() } in [{}]) {}',
    'for (var i, j in {}) {}',
    'function f() { for (in y) { } }',
    'function f() { for (var in y) { } }',
    'function f() { for (x in y;) { } }',
    // 'function f() { for (var x = 3 in y) { } }',
    'for([] = 0 in {});',
    'for([,] = 0 in {});',
    'for([a = 0] = 0 in {});',
    'for([...a] = 0 in {});',
    'for([...[]] = 0 in {});',
    'for([...[a]] = 0 in {});',
    'for({} = 0 in {});',
    'for({p: x} = 0 in {});',
    'for({p: x = 0} = 0 in {});',
    'for({x} = 0 in {});',
    'for({x = 0} = 0 in {});',
    `for ("foo".x = y in y) {}`,
    `for ({}.x = y in y) {}`,
    'for ("foo".x in y',
    `for ([].x = y in y) {}`,
    'for (a() in b) break',
    'for(o[0] = 0 in {});',
    'for(f() = 0 in {});',
    'for(({a}) in 0);',
    'for({x} = 0 in {});',
    'for ({p: x = 0} = 0 in {});',
    'for(([a]) in 0);',
    'for(var [] = 0 in {});',
    'for(var [,] = 0 in {});',
    'for(var [a] = 0 in {});',
    'for(var [a = 0] = 0 in {});',
    'for(var [...a] = 0 in {});',
    'for (/foo/ in {});',
    `for ("foo".x = z in y);`,
    `for ("foo" in y);`,
    'for ([...[a]] = 0 in   {});',
    'for ([] = 0 in {});',
    'for ([...[a]] = 0 in {});',
    'for ({x} = 0 in {});',
    'for ({p: x = 0} = 0 in {});',
    'for([0] in 0);',
    'for({a: 0} in 0);',
    `for ({}.x);`,
    'for((0) in 0);',
    'for(([0]) in 0);',
    'for(({a: 0}) in 0);',
    'for(0 in 0);',
    'for (const [...,] = obj;;);',
    'for ([].x);',
    'for (var [foo]);',
    'for ({}.x);',
    'for (let() of y);',
    'for (let + in y);',
    'for (let {x:y});',
    'for (/foo/ in{});',
    'for(x = 0 in{});',
    'for (var i, j in [1, 2, 3]) {}',
    'for (var i, j = 1 in {}) {}',
    'for (let i, j in {}) {}',
    'for ({...rest, b} in[{}]) ;',
    'for (var { x: (y.z) = foo() } in [{}]) {}',
    'for (var { x: (y) = foo() } in [{}]) {}',
    'for (({x}) in [{x:1}]) {}',
    'for (var ({x}) in [{x:1}]) {}',
    'for (var i, j in {}) {}',
    'for(let {} = 0 in {});',
    'for({}/=y in a)x',
    'for(let {p: x} = 0 in {});',
    'for(let {p: x = 0} = 0 in {});',
    'for(let {x} = 0 in {});',
    'for({a: 0} of 0);',
    'for (let {x}.y of x);',
    'for(let.a of 0);',
    'for(let a of b, c);',
    'for (let {x:y});',
    'for (const a,b,c;;);',
    'for (+a().b of c);',
    'for (void a.b of c);',
    'for(x = 0 of {});',
    'for ({...rest, b} of [{}]) ;',
    'for (var { x: (y.z) = foo() } of [{}]) {}',
    'for (var { x: (y) = foo() } of [{}]) {}',
    'for(x of [], []) {}',
    'for (({x}) of [{x:1}]) {}',
    'for (var ({x}) of [{x:1}]) {}',
    'for(var x of [], []) {}',
    'for(let x of [], []) {}',
    'for (var i, j of {}) {}',
    'for(o.p = 0 of {});',
    'for(o[0] = 0 of {});',
    'for ((a++) of c);',
    'for (let of x) y',
    'for(o.p = 0 in {});',
    'for(o[0] = 0 in {});',
    'for ((x=a?b:c) in y)z;',
    'for (5 in {});',
    "for ('x' in {});",
    'for (true in {});',
    'for (false in {});',
    'for (null in {});',
    'for (x in y of) ;',
    'for (let[a+b] in x);',
    'for (let() in x);',
    'for([] = 0 in {});',
    'for([,] = 0 in {});',
    'for([a = 0] = 0 in {});',
    'for([...a] = 0 in {});',
    'for([...[]] = 0 in {});',
    'for([...[a]] = 0 in {});',
    'for({} = 0 in {});',
    'for({p: x} = 0 in {});',
    'for({p: x = 0} = 0 in {});',
    'for({x} = 0 in {});',
    'for({x = 0} = 0 in {});',
    `for ("foo".x = y in y) {}`,
    `for ({}.x = y in y) {}`,
    'for ("foo".x in y',
    `for ([].x = y in y) {}`,
    'for (a() in b) break',
    'for(o[0] = 0 in {});',
    'for(f() = 0 in {});',
    'for(({a}) in 0);',
    'for (const foo, zoo in x);',
    'for({x} = 0 in {});',
    'for ({p: x = 0} = 0 in {});',
    'for(([a]) in 0);',
    'for(var [] = 0 in {});',
    'for(var [,] = 0 in {});',
    'for(var [a] = 0 in {});',
    'for(var [a = 0] = 0 in {});',
    'for(var [...a] = 0 in {});',
    'for(var [...[]] = 0 in {});',
    'for(var [...[a]] = 0 in {});',
    'for(var {} = 0 in {});',
    'for(var {p: x} = 0 in {});',
    'for(var {p: x = 0} = 0 in {});',
    'for(var {x} = 0 in {});',
    'for(var {x = 0} = 0 in {});',
    'for(let x = 0 in {});',
    'for(let [] = 0 in {});',
    'for (var [x] = 1 in []) {}',
    'for (let x = 1 in []) {}',
    'for (let [x] = 1 in []) {}',
    'for (let {x} = 1 in []) {}',
    'for (const x = 1 in []) {}',
    'for (const [x] = 1 in []) {}',
    'for (const {x} = 1 in []) {}',
    'for ((this) in []) {}',
    'for (this in []) {}',
    'for(let [,] = 0 in {});',
    'for(let [a] = 0 in {});',
    'for(let [a = 0] = 0 in {});',
    'for(let [...a] = 0 in {});',
    'for(let [...[]] = 0 in {});',
    'for(let [...[a]] = 0 in {});',
    'for({x} = 0 in {});',
    'for ({p: x = 0} = 0 in {});',
    'for ({x} = 0 in {});',
    'for(this in 0); ',
    'for(let a = 0 in b);',
    'for(const a = 0 in b);',
    'for (function(){} in x);',
    'for (let [...{ x } = []] in [[]]) {}',
    'for ([...[a]] = 0 in {});',
    'for ([] = 0 in {});',
    'for (let [...{ x } = []] in [[]]) {}'
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseScript(`${arg}`);
      });
    });
  }

  for (const arg of [
    'for(x in y);',
    'for (x in [1,2,3]) {}',
    'for (x in {a: 1}) {}',
    'for ({j} in x) { let [foo] = [j] }',
    'for ([x] in [[1],[2],[3]]) {}',
    'for ([x] in {ab: 1}) {}',
    'for ([...x] in {ab: 1}) {}',
    'for (x in { x : foo().y } = {});',
    'for (x in { x : foo()[y] } = {});',
    'for (x in { x : y.z } = {});',
    'for (x in { x : y[z] } = {});',
    'for (x in { x : { y } } = {});',
    'for (x in { x : { foo: y } } = {});',
    'for (x in { x : { foo: foo().y } } = {});',
    'for (x in { x : { foo: foo()[y] } } = {});',
    'for (x in { x : { foo: y.z } } = {});',
    'for (x in { x : { foo: y[z] } } = {});',
    'for (yield in x);',
    'for (x in { x : [ y ] } = {});',
    'for (var {x, y = z} in obj);',
    'for (x in { x : [ foo().y ] } = {});',
    'for (x in { x : [ foo()[y] ] } = {});',
    'for (x in { x : [ y.z ] } = {});',
    'for (x in { x : [ y[z] ] } = {});',
    'for (x in { x : y = 10 } = {});',
    'for (x in { x : foo().y = 10 } = {});',
    `for ({a: b.c} in d) e`,
    `for ([a.b] of c) d`,
    `for (a in b=c);`,
    'for (x in { x : foo()[y] = 10 } = {});',
    'for (x in { x : y.z = 10 } = {});',
    'for (x in { x : y[z] = 10 } = {});',
    'for (x.y in { attr: null }) {}',
    'for ({}.x in y) {}',
    'for ([].bar in obj);',
    'for ((x) in { attr: null }) {}',
    'for (/foo/g[x] in c) d;',
    'for ("foo".x in y);',
    'for (/foo/g.x in c) d;',
    'for ({ eval = 0 } in [{}]) ;',
    'for (/foo/.x in c) d;',
    'for ("foo"[x] in c) d;',
    'for ("foo".x in c) d;',
    'for (456[x] in c) d;',
    'for (456..x in c) d;',
    'for ({}.b in c) d;',
    'for (var a in b);',
    'for (let in x) y',
    'for (var i = 1 in {}) {}',
    'for (var i = void 0 in [1, 2, 3]) {}',
    'for (var i = yield in [1, 2, 3]) {}',
    'for ({x: a.b} in obj);',
    'for ({x} in obj);',
    'for (var [] in {b, y, [.4]: h -= 2e308}) for (; ((this() ? 2e308.m ++ : eval[/B^B=/gim])); (() => class {})(null, ...arguments, ...true, ..."9Â]CÕ")) try {} finally {}',
    'for(`${x in y}`;;);',
    'for (let [,,foo] in arr);',
    'for (let [foo,,] in arr);',
    'for (let [,] in x);',
    `for (r in ((false))) {}`,
    'for ([x.y] in obj);',
    'for ([x] in obj);',
    'for ((let)[x] in x);',
    'for (let[x] in x);',
    'for ((let)[x].foo in x);',
    'for (let [...foo] in obj);',
    'for (x in { x : { y = 10 } = {} } = {});',
    'for (x in { x : { foo: y = 10 } = {} } = {});',
    'for (x in { x : { foo: foo().y = 10 } = {} } = {});',
    'for (x in { x : { foo: foo()[y] = 10 } = {} } = {});',
    'for (x in { x : { foo: y.z = 10 } = {} } = {});',
    'for (x in { x : { foo: y[z] = 10 } = {} } = {});',
    'for (x in { x : [ y = 10 ] = {} } = {});',
    'for (x in { z : { __proto__: x, __proto__: y } = z } = {});',
    'for (x in { x : [ y[z] = 10 ] = {} } = {});',
    'for (x in { x : [ y.z = 10 ] = {} } = {});',
    'for (x in { x : [ foo()[y] = 10 ] = {} } = {});',
    'for (x in { x : [ foo().y = 10 ] = {} } = {});',
    'for (x in [ x ] = {});',
    'for (var [foo, bar=b] in arr);',
    'for (var [foo=a, bar=b] in arr);',
    'for (x in [ foo().x ] = {});',
    'for (x in [ foo()[x] ] = {});',
    'for (x in [ x.y ] = {});',
    'for (x in [ x[y] ] = {});',
    'for (let {x : y} in obj);',
    'for (let {x : y = z} in obj);',
    'for (x in [ { x } ] = {});',
    'for (let [foo=a] in arr);',
    'for (let [foo,] in arr);',
    'for (let [foo=a, bar] in arr);',
    'for (let [foo, bar=b] in arr);',
    'for (let [foo] in arr);',
    'for (x in [ { x : y } ] = {});',
    'for (x in [ { x : foo().y } ] = {});',
    'for (x in [ { x : foo()[y] } ] = {});',
    'for (x in [ { x : x.y } ] = {});',
    'for (x in [ { x : x[y] } ] = {});',
    'for (x in [ [ x ] ] = {});',
    'for (x in [ [ foo().x ] ] = {});',
    'for (x in [ [ foo()[x] ] ] = {});',
    'for (x in [ [ x.y ] ] = {});',
    'for (const foo in x);',
    'for (x in [ [ x[y] ] ] = {});',
    'for (x in [ x = 10 ] = {});',
    'for (x in [ { x : x.y = 10 } = {} ] = {});',
    'for (let {x = y, z = a} in obj);',
    'for (let {x, y = z} in obj);',
    'for (let {x, y : z} in obj);',
    'for (let {x, y} in obj);',
    'for (let {} in obj);',
    'for (x in [ [ x = 10 ] = {} ] = {});',
    'for (x in [{x:x = 1, y:y = 2}, [z = 3, z = 4, z = 5]] = {});',
    'for (x in [x,,y] = {});',
    'for (x in [x, y = 42, z] = {});',
    'for (x in { x : x, y : y } = {});',
    'for (x in [(x),,(y)] = {});',
    'for (x in [(x)] = {});',
    'for (x in {42 : x} = {});',
    'for (x in {[foo()] : z} = {});',
    'for (x in {[foo()] : (z)} = {});',
    'for (x in {[foo()] : foo().bar} = {});',
    'for (x in [x,y,...z] = {});',
    'for (x in [x,,...z] = {});',
    'for (x in [((x, y) => z).x] = {});',
    'for (let.x in {}) {}',
    'for (x in { ...d.x } = {});',
    'for (x in { ...c[0]} = {});',
    'for (x in { x: (y) } = {});',
    'for (x in { x: (foo.bar) } = {});',
    'for (x in [ ...(a) ] = {});',
    'for (x in [ ...(foo.bar) ] = {});',
    'for (x in [ (y) ] = {});',
    'for (a in b=c);',
    'for (var a = (++effects, -1) in x);',
    'for ({a: b.c} in d) e',
    'for(let [a = 1, ...b] in []) {}',
    'for({a=0} in b);',
    'for(ind in (hash={2:"b",1:"a",4:"d",3:"c"}))__str+=hash[ind]',
    'for ([arguments] in [[]]) ;',
    'for (let x in null, { key: 0 }) {}',
    'for(let [a=b in c] in null);',
    'for(var a = 0 in b, c);',
    'for ([...{ x = yield }] in [[{}]]) ;',
    'for ({x}.y in z);',
    '2; for (var b in { x: 0 }) { 3; }',
    'for(x in list) process(x);',
    'for(x of "foo" in {}) {}',
    'for (x in {a: b}) {}',
    'for(const x in [1,2,3]) {}',
    'for (x in [ (foo.bar) ] = z = {});',
    'for ({ x: [ x ] } in [{ x: null }]) {}',
    'for ({x} = obj;;);',
    'for (let x in a,b) c',
    'for ([][b] in c) d;',
    'for ([].b in c) d;',
    'for ([] in y);',
    'for (x in [ { x : foo().y = 10 } = {} ] = z = {});',
    'for (x in { x : x, y : y = 42 } = z = {});',
    'for (x in [{x:x, y:y}, [,x,z,]] = z = {});',
    'for (x in [x,y,...z] = z = {});',
    'for (x in [(({ x } = { x: 1 }) => x).a] = z = {});',
    'for (x in [ (foo.bar) ] = z = {});',
    'for (x in {[1+1] : z} = z = {});',
    'for (x in {[1+1] : (z)} = z = {});',
    'for (x in {[foo()] : z} = z = {});',
    'for (x in {[foo()] : (z)} = z = {});',
    'for (var [,,foo] in arr);',
    'for (var [,foo] in arr);',
    'for ([a.b].foo in c) d',
    'for ({a: b.c}.foo in d) e',
    'for (x.y in [23]) {}',
    'for ((x.y) in [23]) {}',
    'for ([x.y] in [23]) {}',
    'for ([x].y in z);',
    'for ([(x), y] in [x = y]) {}',
    'for ([z, (y), z] in [x = y]) {}',
    'for ([z, (y), z.y] in [x = y]) {}',
    'for ((a in b).x in {});',
    'for (yield[g]--;;);',
    'for (x--;;);',
    'for(a in b);',
    'for (x in null, { key: 0 }) {}',
    'for (x.y in { attr: null }) {}',
    'for ({}.x in y) {}',
    'for ((x) in { attr: null }) {}',
    'for (var {x : y} in obj);',
    'for (function* y() { new.target in /(?:()|[]|(?!))/iuy };; (null))  {}',
    'for (var [] in x);',
    'for (var [foo,] in arr);',
    'for (var a = b in c);',
    'for (var [foo,,] in arr);',
    'for (var [,] in x);',
    'for (var [...foo] in obj);',
    'for (var {} in obj);',
    'for (let {x,} in obj);',
    'for (var {x, y} in obj);',
    'for ([a,b] in x) a;',
    'for ({a,b} in x) a;',
    'for (const [...x] in y){}',
    'for (const {...x} in y){}',
    'for (456[x] in c) d;',
    'for (456..x in c) d;',
    'for ([].w ^= s;;) x;',
    'for ([][y] <<= p;;) x;',
    'for ([].u |= c;;) x;',
    'for ({}[y] ^= x;;) x;',
    'for ({}.u |= c;;) x;',
    'for (let().foo in x);',
    'for (let.foo in x);',
    'for (let in x);',
    'for (let in x) y',
    'for(var x in [], []) {}',
    'for(let x in [], []) {}',
    'for(const x in [], []) {}',
    'for (let x in y, z) {}',
    'for (var [x]   in 1, 2) {}',
    'for (var x     in 1, 2) {}',
    'for (var x = 1 in []) {}',
    'for (x of { x : [ foo().y ] } = {});',
    'for (x of { x : [ foo()[y] ] } = {});',
    'for (x of { x : [ y.z ] } = {});',
    'for(let in 0);',
    'for(var a = 0 in b);',
    'for(var a in b, c);',
    'for (function(){ }[foo];;);',
    'for (function(){ }[x in y];;);',
    'for (function(){ if (a in b); };;);',
    'for (function(){ a in b; };;);',
    'for (function(){ a in b; }.foo;;);',
    'for (function(){ }[foo] in x);',
    'for (function(){ }[x in y] in x);',
    'for (function(){ if (a in b); }.prop in x);',
    'for (function(){ a in b; }.prop in x);',
    'for (var i = 1 in {}) {}',
    'for (var i = void 0 in [1, 2, 3]) {}',
    'for (var i = yield in [1, 2, 3]) {}',
    `for (r in ((false))) {}`,
    'for (let a = (b in c && d in e); ;);',
    'for (let a = (b in c); ;);',
    'for (let a = (b in c && d); ;);',
    'for (let a = (b in c); ;);',
    'for (let a = ((b in c) && (d in e)); ;);',
    'for (let().x in y);',
    'var s = 0; for (let key in a) { s += a[key] };',
    'for (var a in b in c) break',
    'for (var a = (b in c) in d) break',
    'for (a in b) break',
    'for (a().l[4] in b) break',
    'for (class x { [a in b](){} }.x in c);',
    'for (class x { [a](){} }.x in c);',
    'for ((foo = []).bar in {}) {}',
    'for (var {a, b} in c);',
    'for (of of of){}',
    'for (of; of; of){}',
    'for (var of of of){}',
    'for (var of; of; of){}',
    'for (of.of of of){}',
    'for (of[of] of of){}',
    'for (var [of] of of){}',
    'for (var {of} of of){}',
    'for (of in of){}',
    'for (var of in of){}',
    'for (var [of] in of){}',
    'for (var {of} in of){}',
    'for ([of] in of){}',
    'for ({of} in of){}',
    `for ([a,b] in c);
    for ([a,b] of c);
    for ([a,b];;);
    for (var [a,b] in c);
    for (var [a,b] of c);
    for (var [a,b] = c;;);
    for (let [a,b] in c);
    for (let [a,b] of c);
    for (let [a,b] = c;;);
    for (const [a,b] in c);
    for (const [a,b] of c);
    for (const [a,b] = c;;);`,
    `for ({a,b} in c);
    for ({a,b} of c);
    for ({a,b};;);
    for (var {a,b} in c);
    for (var {a,b} of c);
    for (var {a,b} = c;;);
    for (let {a,b} in c);
    for (let {a,b} of c);
    for (let {a,b} = c;;);
    for (const {a,b} in c);
    for (const {a,b} of c);
    for (const {a,b} = c;;);`,
    'for ((let.x) of []) {}',
    'for (var k in { a:1 }) {}',
    'for (let = 1; let < 1; let++) {}',
    'for (let in {}) {}',
    'for (var let = 1; let < 1; let++) {}',
    'for (var {x = y} in obj);',
    'for (var let in {}) {}',
    'for (var [let] = 1; let < 1; let++) {}',
    'for (var [let] in {}) {}',
    'for (let f in { key: 0 }) {}'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseScript(`${arg}`);
      });
    });
  }

  it('Rest preceded by an identifier', () => {
    t.deepEqual(parseScript('for (let [foo, ...bar] in obj);'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ForInStatement',
          initializer: {
            type: 'ForDeclaration',
            declarations: [
              {
                type: 'LexicalBinding',
                binding: {
                  type: 'ArrayBindingPattern',
                  leafs: [
                    {
                      type: 'BindingIdentifier',
                      name: 'foo'
                    },
                    {
                      type: 'BindingRestElement',
                      argument: {
                        type: 'BindingIdentifier',
                        name: 'bar'
                      }
                    }
                  ]
                },
                initializer: null
              }
            ],
            kind: 'let'
          },
          expression: {
            type: 'IdentifierReference',
            name: 'obj'
          },
          statement: {
            type: 'EmptyStatement'
          }
        }
      ],
      webCompat: true
    });
  });

  it('Rest as the only destruct', () => {
    t.deepEqual(parseScript('for (let [...foo] in obj);'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ForInStatement',
          initializer: {
            type: 'ForDeclaration',
            declarations: [
              {
                type: 'LexicalBinding',
                binding: {
                  type: 'ArrayBindingPattern',
                  leafs: [
                    {
                      type: 'BindingRestElement',
                      argument: {
                        type: 'BindingIdentifier',
                        name: 'foo'
                      }
                    }
                  ]
                },
                initializer: null
              }
            ],
            kind: 'let'
          },
          expression: {
            type: 'IdentifierReference',
            name: 'obj'
          },
          statement: {
            type: 'EmptyStatement'
          }
        }
      ],
      webCompat: true
    });
  });

  it('Two vars', () => {
    t.deepEqual(parseScript('for (let [foo,bar] in arr);'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ForInStatement',
          initializer: {
            type: 'ForDeclaration',
            declarations: [
              {
                type: 'LexicalBinding',
                binding: {
                  type: 'ArrayBindingPattern',
                  leafs: [
                    {
                      type: 'BindingIdentifier',
                      name: 'foo'
                    },
                    {
                      type: 'BindingIdentifier',
                      name: 'bar'
                    }
                  ]
                },
                initializer: null
              }
            ],
            kind: 'let'
          },
          expression: {
            type: 'IdentifierReference',
            name: 'arr'
          },
          statement: {
            type: 'EmptyStatement'
          }
        }
      ],
      webCompat: true
    });
  });

  it('for(var a in b);', () => {
    t.deepEqual(parseScript('for(var a in b);'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ForInStatement',
          initializer: {
            type: 'ForDeclaration',
            declarations: [
              {
                type: 'VariableDeclaration',
                binding: {
                  type: 'BindingIdentifier',
                  name: 'a'
                },
                initializer: null
              }
            ],
            kind: 'var'
          },
          expression: {
            type: 'IdentifierReference',
            name: 'b'
          },
          statement: {
            type: 'EmptyStatement'
          }
        }
      ],
      webCompat: true
    });
  });
});
