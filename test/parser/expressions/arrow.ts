import * as t from 'assert';
import { parseScript, parseModule, recovery } from '../../../src/escaya';

describe('Expressions - Arrow', () => {
  // Invalid cases
  for (const arg of [
    'x = (a)-c=>{};',
    '(...x = y) => x',
    '(...a)-c=>{};',
    'x = (...a)+c=>{}',
    'x = (...a)-c=>{};',
    '(a,b)+c=>{}',
    'x = (a,b)", "=>{}',
    '(a,,) =>',
    '(a()=0)=>0',
    'x = (a,b)-c=>{};',
    '({ident: {x}/x}) => x',
    '([(x)]) => x',
    '(x) => {}.x',
    '() => {}.x',
    '() => {} * x',
    '() => {} ** x',
    '((x, y), z) =>  a',
    '({a} = b,=c) => {}',
    '({foo: typeof}) => null',
    '({foo: void}) => null',
    '({foo: function}) => null',
    '({foo: default}) => null',
    '({foo: class}) => null',
    '({foo: null}) => null',
    '([{x: y.z}] = a) => b',
    'a = b\n=>\nc',
    'a\n= b\n=> c',
    '()=>{}++',
    '()=>{}--',
    '(a)`${c}template-tail`=>{}',
    '(a)`template-head${c}template-tail`=>{};',
    '({x: {x: y}.length})  => {}',
    '({x: x + y})  => {}',
    '({x: void x})  => {}',
    '({x: function(){}})  => {}',
    '0 || () => 0',
    '0 || (x) => 0',
    '(a=/i/) = /i/',
    '(x => y) = {}',
    'async("foo".bar) => x',
    'a?c:d=>{}=>{};',
    'async(foo) => { super.prop };',
    '([...z6],{true,...z7}) => {}',
    '([...z],{},{[true]:a,true,q:[...t],},r) => {}',
    '([...z],[...a],q,[...t],{r:{[(a--)]:{true,[(--a)]:js,ts:r,},} = (b = a),...x9},z0,[...z1],[...z],[[...z],...qq]) => {}',
    '(z,[...a],[...q],[...t],{true},[...r] = (--a),[...js]) => {}',
    '([...z],{a:[...q],true,true,true,},t,[...r],[...js],{true,ts:r,...x9},z0,[...z1],{...z}) => {}',
    '({[async(...x)&&(a--)]:[...z],a:{[22&&true+async(...x)]:[...q],true},t:{[0]:r,true},true},[...js],ts,[...r],[...x9],z0) => {}',
    '([...z] = (a--)?((b = a)):((b ^= a)&&(!a))^(a--),[...a],[...q],[t,{true,true,...r},...js],{[(a--)?((a--)):((!a)?(22):((b = a)))]:{true,...ts}},[...r],[...x9],{z0:z1,},{...z},{...z}) => {}',
    '([...t],r,{...js},{true},{...ts},[...r]) => {}',
    '([...t],r,js,{true,[(!a)?((a--)):((b = a)&&(~a))?((a--)?((false^async(...x))):((++a))):(0)]:[...ts],[(a--)?(async(...x)):(async(...x))]:[...r]},[...x9],[...z0],[...z1]) => {}',
    '({true,[async(...x)^(--a)]:{[(b = a)]:{z:a},true,q:[...t],r:js},ts:{...r},true},[...x9],z0) => {}',
    '([...z],[...a],q,[...t],{true,true},r,[...js],[],{...ts}) => {}',
    '(z,[],{[((a--)||(~a))]:{true,a:q},t:[...r],[(b = a)-((b = a))||0&&0?(async(...x)):(0-0)?(0||0?((b = a)):((a--))):(22)&&/x/+true?(false):(async(...x))]:{js:[...ts],true,r:{x9:z0,true,[0-0?(0?(0):(0)):((a--))]:z1,true},[(!a)]:z,},...z},{[/x/g]:qq,[/x/g]:{z5:z6},...z7},{true,...z8},z9,{a0:[...a1] = (a--),a2:{a3:{a4:a5,a6:a7,[(++a)]:a8,a9:q0,...q1},...q2},true,}) => {}',
    '({z:a,true,q:[...t],},{r:js,ts:r,...x9}) => {}',
    '([...r],{...x9},{z0:z1,[(b = a)?(((a--))):(async(...x)||false)+0]:z,true,...z}) => {}',
    '({true,[(b = a)?((b -= a)):((!a))]:{[(b -= a)]:z,...a},q:t,...r},js,ts,[...r],{...x9},[...z0],z1,z,z,qq) => {}',
    '([...r],[...js],ts,{true,[22?((a--)?((!a)):(/x/)&&(b = a)):((a--))&&(--a)&&0-(a--)]:[...r],x9:{z0:{true,true,true},[((b = a))]:{z1:z},[(a--)^22?((0?(0):(0))):(async(...x)?((!a)):(async(...x)))]:[...z],true,}},qq,z5,[...z6],z7,z8,z9) => {}',
    '(a,{true,q:[...t] = ((b = a))?(/x/):(async(...x)) = (~a),r:{...js}},{[(--a)]:ts,[/x/g]:{[async(...x)]:{...r},x9:{true,z0:z1},z:[...z],...qq},z5:[...z6],z7:z8,z9:{[(!a)]:{true,true,true,true},},},{a0:{...a1},...a2},[...a3],{a4:a5,a6:a7,[(a--)]:{[async(...x)]:a8,true,a9:q0,},...q1}) => {}',
    '(z,{...a},{[(((++a)))]:{q:{...t},r:{...js},true = (!a)},[(a--)^(a--)]:{true,...ts},...r}) => {}',
    '({true,},z,{[(++a)]:[{true,true,true,...a},...q],true}) => {}',
    '({...z},a,{...q},{t:{r:[...js],...ts},true,},{[async(...x)]:[...r],x9:{z0:{true,...z1},z:{true,[0?(0):(0)-async(...x)]:z,...qq},},true,true,...z5},[z6],z7,{[(a--)^(a--)?(((b = a))):((b = a))]:[...z8],...z9}) => {}',
    '([...r],x9,{[(b += a)]:{z0:z1},[(b += a)]:{z:[...z],true,true,qq:{...z5} = (b -= a)?(q):(0+0),...z6} = (a--),[(b = a)]:z7},{z8:[...z9] = x,...a0},[...a1]) => {}',
    '({},{true,[async(...x)]:{[(async(...x))]:z},...a},[q,...t],r,{},[...js],{[(a--)]:ts,[(~a)]:[[...r],...x9],[((--a))]:z0,...z1},[...z]) => {}',
    '([...z],[],{},{[(b -= a)]:{[async(...x)?(/x/g):(0&&0^(!a))?((a--)):((true))]:a},[(a--)]:{[(++a)]:q,[(a--)]:[...t],r:{...js},ts:{r:x9,true,true,...z0},z1:[],},true},{},z,[...z],[...qq],[...z5]) => {}',
    '({[(a--)]:[...z],true,true,...a},[...q],t,[...r],{[(a--)]:{[(++a)]:js,true,ts:[...r],...x9},...z0},z1) => {}',
    '({...z},{qq:{true = 22,},...z5},[...z6],[...z7],z8,[...z9],a0,{a1:a2,}) => {}',
    '({z8:[]},{true,z9:{a0:a1,a2:[],},...a3}) => {}',
    '([...z],[...a],{true,[async(...x)?((b = a)-(a--)):(22^(--a))]:[...q],...t},{[(b = a)]:[...r],[/x/]:{[((~a))]:{},[(!a)]:js,[(~a)+((a--))?((a--)):((0^0,(b += a)))]:ts,},r:[...x9],z0:z1,[((++a))]:z = async(...x)+true},z,qq,z5,z6,z7) => {}',
    ' (z,{},[...a],{[(b -= a)]:q,t:{r:{[((0))]:js,},},[(a--)]:ts,...r},{[/x/g]:{true = 0,...x9},[(a--)||22]:{true = (a--),...z0}},{z1:{z:z,...qq}},{[(++a)]:z5},[...z6],{true,true,[(!a)]:[...z7],...z8},[...z9]) => {}',
    '({...z},[[...a],...q],t,{},r,{[async(...x)?(async(...x)+async(...x)):(async(...x))]:{true,[(b ^= a)]:[...js],ts:[...r]},true,true,x9:[...z0],z1:z,},z,qq,z5) => {}',
    '([z],a,[...q],{[((b = a))]:{true,t:{[(b -= a)]:r},...js},true,ts:[...r]},x9,[...z0]) => {}',
    '([...ts],r,[...x9],[...z0],{true,z1:{z:[...z] = (a--),true}},{qq:[...z5],...z6},[z7,],z8,z9) => {}',
    '([...a6],a7,[],{[(a--)]:{true,a8:[...a9],...q0},...q1},[[...q2],...q3],q4,[...q5],[...q6]) => {}',
    '([...js],ts,{r:{true,x9:{...z0},true},z1:z,[true]:{...z},...qq},[...z5]) => {}',
    '(z,{a:q,...t},{[((--a))]:{r:{true,[(0?(0):(0))]:js,[(b += a)]:ts,true},...r},x9:[...z0],z1:[...z],z:[...qq] = (~a)?((b = a)):((0-0+(~a))||(b = a)^(b = a)),},{z5:[...z6],},[]) => {}',
    '({[async(...x)]:[...z],a:q,true,},{true,[async(...x)]:[{[(a--)]:t,},...r]},{true,...js},ts,[...r]) => {}',
    '([...z0],{true,z1:[...z],[(b = a)?((a--)):(async(...x))]:z,}) => {}',
    '({t:[...r],true,true},{js:[...ts],true,true},r) => {}',
    '({true = (a--),...r},[...js]) => {}',
    '(z,{true,...a},[...q],t) => {}',
    '(z,[...a],[...q],[t,...r],js,ts,r,x9,[...z0],{[/x/]:[...z1],true,true,...z}) => {}',
    '(r,[...js],{true,ts:{r:{[22]:x9,true,true,true,z0:z1,},...z},[(b = a)?(22):((a--))]:[...z],[async(...x)]:{qq:[...z5],z6:z7,...z8}},{...z9},{...a0}) => {}',
    '({[async(...x)]:{true = async(...x),...r}},x9,[...z0],{true,z1:{true,z:{...z},} = (a--),true},qq,[...z5]) => {}',
    '(z,[...z],{[(b = a)?((b -= a)?(((!a)+async(...x))):(((b ^= a)?((b = a)):((a--)||/x/g)))):(/x/)]:[...qq],true,z5:z6 = ((a--))}) => {}',
    '({...qq},{z5:[...z6],[(async(...x))]:{true,true,true,...z7},true,[((~a))]:z8,},{...z9},{true,...a0},[...a1]) => {}',
    '({foo: enum}) => null',
    '({foo: while}) => null',
    '({foo: true}) => null',
    '(class{}) => x;',
    '(delete x.y) => x;',
    '(function(){}) => x;',
    '(foo = await bar) => {}',
    '({x} = await bar) => {}',
    '([x] = await bar) => {}',
    '[] => {}',
    '(foo ? bar : baz) => {}',
    '(a, foo ? bar : baz) => {}',
    '(foo ? bar : baz, a) => {}',
    '(a.b, c) => {}',
    'foo(x = x ==> x)',
    'foo(foo => x => x => {x} => x)',
    'foo({x} = 20 => x)',
    'foo([x] = 20 => x)',
    'foo([x = 25] = 20 => x)',
    'foo(([x = 25]) =>)',
    'foo(([x = 25]) => x =>)',
    'foo(([x = 25]) => x => x =>)',
    '-a => {}',
    '{} => {}',
    'a++ => {}',
    '()',
    '((x)) => 0',
    '((x, y)) => 0',
    '(x, (y)) => 0',
    '((x, y, z)) => 0',
    '(x, (y, z)) => 0',
    '((x, y), z) => 0',
    '32 => {}',
    'foo(([x = 25]) => x => x => {)',
    // 'async ({await}) => 1;',
    '(foo = [{m: 5 + t(await bar)}]) => {}',
    'let f = () => { let [...await f] = []; }',
    'let f = () => { const [...await f] = []; }',
    'let f = () => { let { f: await f } = {}; }',
    'let f = () => { var { [f]: await f } = {}; }',
    'let f = () => { var { f: ...await f } = {}; }',
    'let f = () => { let { [f]: ...await f } = {};}',
    '"use strict"; let f = () => { let { [f]: ...await f } = {};}',
    '(new x) => x;',
    '(null) => x;',
    '(void x) => x;',
    '({a: {a=b}.x}) => x',
    '([x].length) => x;',
    '({}.length) => x;',
    '({x: y}.length) => x;',
    '([...x.y]) => z',
    `([...x.y] = z) => z`,
    '([{a=b}.x]) => x',
    '(x, [{a=b}.x]) => x',
    '({get x() {}})=>x;',
    '({ident: {x}.join(x)}) => x',
    'delete (x) => {}',
    '({a: b => []} = [2])',
    '(foo, break) => {}',
    `({x = y}.z) => obj`,
    `(q, {x: y}.length) => x;`,
    `(q, {x = y}.z) => obj`,
    `([...x.y] = z) => z`,
    `([...x.y]) => z`,
    `(([a, ...b = 0]) => {})`,
    `({a: {x = y}}.z) => obj`,
    `(localVar |= defaultValue) => {}`,
    '({get a(){}}) => 0;',
    '(...[ 5 ]) => {}',
    '({x: const}) => null',
    `([a.a]) => 42`,
    '({a=b}.x) => x',
    '({a=b}[x]) => x',
    '({a=b}(x)) => x',
    '([{a=b}].x) => x',
    '([{a=b}][x]) => x',
    '([{a=b}](x)) => x',
    '(q, {a=b}.x) => x',
    '(q, {a=b}[x]) => x',
    '(q, {a=b}(x)) => x',
    '(q, [{a=b}].x) => x',
    '(q, [{a=b}][x]) => x',
    '(q, [{a=b}](x)) => x',
    '(o.f=1)=>0',
    '({a: (x) * a[3](((((a /= [b.c] = ([x * 2]()=> a)))))) })',
    '({}=>0)',
    '([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0',
    '({a:b[0]})=>0',
    '([a,...b,])=>0',
    'f = (...x = 10) => x',
    'f = (q, ...x = 10) => x',
    '({ggnzrk, w: (ggnzrk)}) => { }',
    '(nmlwii, [((yycokb) = (1))] = (nmlwii)) => { }',
    '([x, ...((yArgs))]) => {}',
    '(x, {e: a.b}) => 0',
    '(x, [a.b]) => 0',
    '({e: a.b}) => 0',
    '([a.b]) => 0',
    '({...this}) => x;',
    '([...this]) => x;',
    '({x, ...this}) => x;',
    '([x, ...this]) => x;',
    '[{x = y}].z => obj',
    '[{x = y}.z] = obj',
    '[{x = y}] => z',
    '[x, {y = y}].z => obj',
    '[x, {y = y}.z] = obj',
    '[x, {y = y}] => z',
    'foo(([x = 25]) => x => x =>)',
    '({x = y}.z) => obj',
    '(x, {x = y}.z = obj)',
    '({x = y}.z = obj)',
    '({x = y}).z',
    '([{x = y}].z) => obj',
    '([{x = y}]).z',
    '({a: {x = y}.z})',
    '({a: {x = y}}.z)',
    '(q, {a: {x = y}}.z)',
    '(x, {...[y] }) => {}',
    '({...[x] }) => {}',
    '({...{x} }) => {}',
    '({...(x) }) => {}',
    '(z, {...(x) }) => {}',
    '({x: y.z}) => b',
    '(z, {x: y.z}) => b',
    '(q, {x: x + y})  => {}',
    '(q, {x: void x})  => {}',
    '({x: function(){}})  => {}',
    '({x: this})  => {}',
    '({x: y.z} = a) => b',
    '([x].length) => y',
    '(z, [x].length) => y',
    '({}.length) => y',
    '(z, {}.length) => y',
    '({x: y}.length) => y',
    '(z, {x: y}.length) => y',
    '(false) => y',
    '(x, false) => y',
    '(x, {ident: [foo, bar] += x} = y)',
    '(x, {ident: [foo, bar] += x})',
    '(x, {ident: [foo, bar]/x}) => x',
    '(x, {ident: [foo, bar] += x} = y)',
    '(x, {ident: [foo, bar] += x})',
    '(x, {ident: [foo, bar]/x}) => x',
    '(x, {ident: [foo, bar].join(y)}) => x',
    '({a:b[0]}) => x',
    '([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0;',
    '([...x.y]) => z',
    '(...x, y) => x',
    '([], ...x, y) => x',
    '(x, ...y, z) => x',
    '(a[b]) => x;',
    '([a + b] = x) => a;',
    '(q, [a + b] = x) => a;',
    '(x--, y) => x;',
    '!()=>{}',
    'function x(){([(a)]) => {} }',
    '([(a)]) => {};',
    '(x, /x/g) => x',
    '(a=/i/) = /i/',
    '(...a)-c=>{};',
    'x = (...a)+c=>{}',
    'x = (...a)-c=>{};',
    '(a()=0)=>0',
    '(a,...b)+c=>{}',
    '(a,...b)+c=>{}',
    '(a=1 => 42)',
    '(a,...b)+c=>{}',
    'a + b => {}',
    `(a,...a)/*\u202a*/`,
    `(a,...a)/*\n*/ => 0`,
    '("a", b) => {}',
    '(a, b++) => {}',
    '[] => {}',
    '(foo ? bar : baz) => {}',
    '(a, foo ? bar : baz) => {}',
    '(foo ? bar : baz, a) => {}',
    '(a.b, c) => {}',
    "(a['b'], c) => {}",
    "(c, a['b']) => {}",
    '(...a = b) => b',
    '(...rest - a) => b',
    '(a, ...b - 10) => b',
    'let x = {y=z} => d',
    'let x = {y=z}',
    '(..a, ...b) => c',
    '([0])=>0;',
    '({0})=>0;',
    '({a:b[0]}) => x',
    'f = ([...[x], y] = [1, 2, 3]) => {};',
    'f = ([...[ x ] = []] = []) => {};',
    'f = ([...{ x }, y]) => {};',
    'f = ([...{ x }, y]) => {};',
    '1 + ()',
    '((x)) => a',
    '(function *g(z = ( [x=(yield)]) => {}) { });',
    '(function *g(z = ( x=yield) => {}) { });',
    '(x, (y, z)) => a',
    '((x, y), z) =>  a',
    'f = ([...{ x } = []]) => {};',
    '(function *g([x = class extends (a ? null : yield) { }] = [null]) { });',
    '(function *g(x = class { [y = (yield, 1)]() { } }) { });',
    '(function *g(x = class extends (yield) { }) { });',
    '()=c=>{}=>{}',
    '()[1]=>{}',
    '()c++=>{}',
    '()-c=>{}',
    '(a,b)(c)=>{}',
    '(a,...b)[c]=>{}',
    '=> 0',
    '() =>',
    '=> {}',
    ', => {}',
    '() => {"value": 42}',
    '(()) => 0',
    '(localVar |= defaultValue) => {}',
    '([{x: y.z} = a]) => b',
    '([{x: y.z}]) => b',
    '([{x: y.z}] = a) => b',
    '([{"foo": y.z} = a]) => b',
    '({"foo": y.z} = a) => b',
    '([{"foo": y.z}]) => b',
    '([{"foo": y.z}] = a) => b',
    '([a, b] => 42)',
    '([a, b] = [] => 42)',
    '(if) => {}',
    '(a, if) => {}',
    '(a + b, c) => {}',
    '(q, a + b) => {}',
    '(q, a + b, c) => {}',
    '(...a => 42)',
    'if => {}',
    '(a, if) => {}',
    '(a + b) => {}',
    '(a + b, c) => {}',
    '({...{a, b}}) => x',
    '(q, {...{a, b}}) => x',
    '(a, b - c) => {}',
    '(a++) => {}',
    '(...rest - a) => b',
    '(q, ...rest - a) => b',
    '([0])=>0;',
    '({0})=>0;',
    '(x, [0])=>0;',
    '(x, {0})=>0;',
    'f = (q, [...[x], y] = [1, 2, 3]) => {};',
    'f = (q, [...[ x ] = []] = []) => {};',
    'f = (q, [...{ x }, y]) => {};',
    'f = ([...[x], y] = [1, 2, 3]) => {};',
    'f = (q, [...[x], y] = [1, 2, 3]) => {};',
    'f = (q, [...[ x ] = []] = []) => {};',
    'f = ([...[ x ] = []] = []) => {};',
    'f = ([...{ x }, y]) => {};',
    '([{x: y.z}]) => b',
    '(q, [{x: y.z}]) => b',
    '([{x: y.z}] = a) => b',
    '({x: y.z} = a) => b',
    '([{1: y.z} = a]) => b',
    '({333: y.z} = a) => b',
    '({ ...[x] }) => {}',
    '(...a = b) => b',
    '(a++, b) => {}',
    '(a, b++) => {}',
    '({...(a,b)}) => {}',
    '({...{a,b}}) => {}',
    '({...[a,b]}) => {}',
    '(q, {...(a,b)}) => {}',
    '(q, {...{a,b}}) => {}',
    '(q, {...[a,b]}) => {}',
    '(a = ...NaN, b = [...[1,2,3]], ...rest) => {};',
    '(a = (...NaN), ...b = [...[1,2,3]], rest) => {};',
    '(a = [...NaN], ...b = [...[1,2,3]], rest) => {};',
    '(a, ...b, ...rest) => {};',
    '(...rest = ...NaN) => {};',
    '({...[a, b]}) => x',
    '(q, {...[a, b]}) => x',
    '(foo ? bar : baz) => {}',
    '(a, foo ? bar : baz) => {}',
    '(foo ? bar : baz, a) => {}',
    '(q, foo ? bar : baz, a) => {}',
    '(q, a.b, c) => {}',
    '(c, a.b) => {}',
    '(a.b, c) => {}',
    '(-a, b) => {}',
    '"a" => {}',
    '("a") => {}',
    '!(a.b, c) => {}',
    '++!(a.b, c) => {}',
    '++(a.b, c) => {}',
    '(a.b, c) => ++{}',
    '(c, a.b) => {}',
    ')',
    ') => 0',
    '=> 0',
    '=>',
    '=> {}',
    '([x.y]=z) => z',
    ') => {}',
    '([...(x), y] = z) => 0',
    '(q, [...(x), y] = z) => 0',
    '([...x.y]) => z',
    '(q, [...x.y]) => z',
    '([...x.y] = z) => z',
    `([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0;`,
    `bar ? (=> 0) : baz;`,
    `(...a, ...b) => {}`,
    `(...a, x, ...b) => {}`,
    `(x, ...a, ...b) => {}`,
    `(a, ...b,) => {}`,
    `() => {} 1`,
    '(b = (a,)) => {}',
    `(...rest - a) => b`,
    `(...x,) => x`,
    `({a:b[0]})=>0`,
    `(q, {a:b[0]})=>0`,
    `(q, {}=>0)`,
    `({}=>0)`,
    '() => {({...{b = 0}.x} = {})}',
    `([x]=await y)=>z`,
    `() <= 0`,
    `(...a = b) => b`,
    '(a\n=> a)(1)',
    '(a/*\n*/=> a)(1)',
    `() ? 0`,
    `1 + ()`,
    '({ident: {x}.join(1)}) => x',
    '(x = delete ((break) = f)) => {}',
    '(x = (continue) = f) => {}',
    '(a,...b)+c=>{}',
    '() => { let [x] }',
    '(a,...b)+c=>{}',
    '([a.b]) => 0',
    '(32) => {}',
    '(a, 32) => {}',
    '({}.length) => y',
    '(function(){}) => y',
    '(null) => y',
    '(,) => x',
    '(x + y) => y',
    '(false) => x',
    '({ident: [foo, bar].join("")}) => x',
    '({ident: [foo, bar]/x/g}) => x',
    '({...(a,b)}) => {}',
    '(...x = y) => x',
    '([0])=>0;',
    `_ => _
    /foo/`,
    `_ => {}
    /foo`,
    '([[[[[[[[[[[[[[[[[[[[{a:b[0]}]]]]]]]]]]]]]]]]]]]])=>0;',
    'if => {}',
    '(a, if) => {}',
    '(a++) => {}',
    "(c, a['b']) => {}",
    '(...a = b) => b',
    "() => {'value': 42}",
    '([x].length) => y',
    '(x) => {} (x) => {}',
    '({x = y}.z) => obj',
    '(x) => ok (x) => ok',
    '([{x = y}].z) => obj',
    '({a: {x = y}}.z) => obj',
    '(x, y) => {}()',
    'x => {}()',
    '([x].length) => y',
    '(x) => {} + x',
    '({...(a,b)}) => {}',
    '({...{a,b}}) => {}',
    ')',
    ') => 0',
    '=> 0',
    '=>',
    '=> {}',
    ') => {}',
    '(a\n=> a)(1)',
    '(a/*\n*/=> a)(1)',
    '((a)\n=> a)(1)',
    '((a)/*\n*/=> a)(1)',
    '((a, b)\n=> a + b)(1, 2)',
    '((a, b)/*\n*/=> a + b)(1, 2)',
    '({...[x] }) => {}',
    '({x: y.z}) => b',
    '([{x: y.z}] = a) => b',
    '([{x: y.z}]) => b',
    `[]=>0`,
    `() ? 0`,
    '[] => {}',
    'f = ([...[ x ] = []]) => {};',
    '({a:b[0]}) => x',
    '((x)) => x;',
    '(++x, y) => x;',
    `()
    =>x`,
    '(localVar |= defaultValue) => {}'
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseScript(`${arg}`);
      });
    });
    it(`${arg}`, () => {
      t.throws(() => {
        parseModule(`${arg}`);
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js', { module: true });
      });
    });
  }

  // Valid cases
  for (const arg of [
    'let => x',
    'let => x.y',
    'let => x.y',
    '() => b',
    '(a) => b',
    '(...a) => b',
    '(a, ...b) => {}',
    '(x = delete ((eval) = f)) => {}',
    '(6)[x => (y)] in 3;',
    '6[(x=>y)]in 3',
    '({ident: {x: y}.join(1)})',
    '()=>{} \n /foo/',
    'let => x = b',
    'let => x, let => x',
    '({...obj} = {}) => {}',
    '(() => {}).x',
    '([a]) => b;',
    '([a=[b.c]=d]) => e;',
    '( () => x )',
    '([...x]) => x',
    '(z = [...x.y]) => z',
    '(bar, yield) => {}',
    'f = ([[,] = g()]) => {};',
    '(a) => 00;',
    '(() => 5)() === 5 ? a : b;',
    '(x, ...[y = b = c = d]) => 1',
    '([x = 0]) => {}',
    'a, b => 0',
    'a, b, (c, d) => 0',
    '(a, b, (c, d) => 0)',
    '(a, b) => 0, (c, d) => 1',
    '(a, b => {}, a => a + 1)',
    '((a, b) => {}, (a => a + 1))',
    'foo ? bar : baz => {}',
    '({}) => {}',
    '(a, {}) => {}',
    '({}, a) => {}',
    '([]) => {}',
    '(a, []) => {}',
    '([], a) => {}',
    '(a = b) => {}',
    '(a = b, c) => {}',
    '(a, b = c) => {}',
    '({a}) => {}',
    '(x = 9) => {}',
    '(x, y = 9) => {}',
    '(x = 9, y) => {}',
    '(x, y = 9, z) => {}',
    '(x, y = 9, z = 8) => {}',
    '(...a) => {}',
    '(x, ...a) => {}',
    '(x = 9, ...a) => {}',
    '(x, y = 9, ...a) => {}',
    '(x, y = 9, {b}, z = 8, ...a) => {}',
    'a, b, (c, d) => 0;',
    '(a, b) => 0, (c, d) => 1;',
    '(a, b => {}, a => a + 1);',
    '((a, b) => {}, (a => a + 1));',
    '(a, (a, (b, c) => 0));',
    'foo ? bar : baz => {};',
    '(a, {}) => {};',
    '({a}) => {};',
    '(x = 9) => {};',
    '(x = 9, y) => {};',
    '(x, y = 9, z = 8) => {};',
    '({a} = {}) => {};',
    '([x = 0]) => {};',
    '({a} = {}) => {}',
    '([x] = []) => {}',
    '({a = 42}) => {}',
    'const a = () => {return (3, 4);};',
    'bar ? ( (x, y) => (u, v) => x*u + y*v ) : baz;',
    'async foo => bar',
    '(async foo => bar)',
    `() => {}`,
    `() => {(async foo => bar)}`,
    `a => {}`,
    `a => {a => {a => {a => {a => {a => {}}}}}}`,
    `async () => {}`,
    `(...await) => x`,
    `([a = await]) => x`,
    `({await}) => x`,
    `({a: b = await}) => x`,
    `async () => {async () => {async () => {async () => {async () => {}}}}}`,
    `async => {}`,
    '({ async foo(a, c, b){} });',
    `async => {}
   async => {}`,
    `() => () => () => {}`,
    `() => () => ({a = b} = c) => b * c`,
    `() => () => () => { async(a-vb) }`,
    `() => {}
    async()
    async => {}
    async => {}
    a => {}
    a => {}`,
    `() => {}`,
    `() => {}
    async()
    async => {}
    async => {}
    a => {}
    a => {}`,
    `() => {}`,
    `() => {}
   async()
   async => {}
   async => {}
   a => {}
   a => {}`,
    `() => {}`,
    `() => {}
  async()
  async => {}
  async => {}
  a => {}
  a => {}`,
    '(async => async)',
    `() => {}
  a()
  async()`,
    `(z = [...x.y]) => z`,
    `a => a => a => async a => a`,
    `a => a => a => a => a => a => a => a => a => a => a => a => a => a => a => async a => a`,
    'var f = (function() { return z => arguments[0]; }(5));',
    'async(...{x}) => x',
    'async(...[x]) => x',
    '(...{x}) => x',
    'new (() => {});',
    'bar ? ( (x) => x ) : baz;',
    '(x = 9) => {}',
    '([x = 0]) => {}',
    '(a, (a, (b, c) => 0))',
    `a => 0`,
    `() => () => 0`,
    '() => 0, 1',
    '() => 0 + 1',
    '(a,b) => 0 + 1',
    `(a,b,...c) => 0 + 1`,
    '() => (a) = 0',
    'a => b => c => 0',
    '(e) => "test"',
    '(a, ...[]) => 1',
    '(a, ...[{b = (c) - 2}]) => 1',
    '(x, ...[y = b = c = d]) => 1',
    '(x, ...[y = b = c = d => 1]) => 1',
    '(x, ...[]) => (y, ...[]) => 1',
    "(x)=>{'use strict';}",
    '(() => 5)() === 5;',
    '(() => 5)() === 5 ? a : b;',
    '(() => 5)() === 5 ? a : b => a + b - yield / 1;',
    '() => a + b - yield / 1',
    '(() => { try { Function("0 || () => 2")(); } catch(e) { return true; } })();',
    'var f = (function() { return z => arguments[0]; }(5));',
    'yield => { "use strict"; 0 }',
    "interface => { 'use strict'; 0 }",
    '({y}) => x;',
    '([x = 10]) => x',
    '([x = 10]) => x = ([x = 10]) => x',
    '({x = 10, y: { z = 10 }}) => [x, z]',
    `({})[x => x]`,
    `() => () => 0`,
    `() => x => (a, b, c) => 0`,
    `y => () => (a) => 0`,
    `function * foo() { yield ()=>{}; }`,
    '() => { `use strict`; with (x) y; }',
    `function foo() { }; foo((x, y) => "abc"); foo(b => "abc", 123);`,
    `(a, b) => { return a * b; }`,
    `a = () => {return (3, 4);};`,
    `"use strict";
((one, two) => {});`,
    `([])=>0;`,
    `(function (x) { return x => x; })(20)(10)`,
    `(function () { return x => x; })()(10)`,
    ` (function () {  return x => x; })()(10)`,
    `() => true ? 1 : (() => false ? 1 : (0))`,
    `l = async() => true ? 1 : (() => false ? 1 : (0))`,
    `([,,])=>0`,
    `([a,...b])=>0;`,
    `([a,b])=>0;`,
    `([a]) => [0];`,
    `({a,b=b,a:c,[a]:[d]})=>0;`,
    `(() => {}) || true;
    (() => {}) ? a : b;`,
    '(() => {}) + 2',
    'new (() => {});',
    'bar ? ( (x) => x ) : baz;',
    'bar ? ( (x, y) => (u, v) => x*u + y*v ) : baz;',
    'bar ? ( (a, b) => 0, (c, d) => 1 ) : baz;',
    'bar ? ( (a, (a, (b, c) => 0)) ) : baz;',
    'bar ? ( foo ? bar : baz => {} ) : baz;',
    'bar ? ( (a, {}) => {} ) : baz;',
    'bar ? ( (x, y = 9) => {} ) : baz;',
    'bar ? ( (...a) => {} ) : baz;',
    'bar ? ( ([x] = []) => {} ) : baz;',
    'bar ? ( (x = 9, ...a) => {} ) : baz;',
    '(x, y = 9, {b}, z = 8, ...a) => {}',
    '(x = 9) => {}',
    '([x = 0]) => {}',
    '(a, (a, (b, c) => 0))',
    `a => 0`,
    `() => () => 0`,
    '() => 0, 1',
    '() => 0 + 1',
    '(a,b) => 0 + 1',
    `(a,b,...c) => 0 + 1`,
    '() => (a) = 0',
    'a => b => c => 0',
    '(e) => "test"',
    '(a, ...[]) => 1',
    "(x)=>{'use strict';}",
    '(() => 5)() === 5;',
    'a, b => 0',
    'a, b, (c, d) => 0',
    '(a, b, (c, d) => 0)',
    '(a, b) => 0, (c, d) => 1',
    '(a, b => {}, a => a + 1)',
    '((a, b) => {}, (a => a + 1))',
    '(x, y = 9, ...a) => {}',
    '(x, y = 9, {b}, z = 8, ...a) => {}',
    '({a} = {}) => {}',
    '([x] = []) => {}',
    '({a = 42}) => {}',
    '([x = 0]) => {}',
    '(a, (a, (b, c) => 0))',
    '() => a + b - yield / 1',
    'f = (function() { return z => arguments[0]; }(5));',
    '({y}) => x;',
    '([x = 10]) => x',
    '({x = 10, y: { z = 10 }}) => [x, z]',
    '({x = 10}) => x',
    `([y]) => x;`,
    '1 ? 0 : a => {}, 17, 42;',
    '17, 42, 1 ? 0 : a => {};',
    '({ ...0 ? 1 : a => {} })',
    'function f1(x = 0 ? 1 : a => {}) { return x; }',
    '(x=1) => x * x;',
    '(eval = 10) => 42;',
    '(a, {}) => {}',
    '({}, a) => {}',
    '([]) => {}',
    '(a, []) => {}',
    '([], a) => {}',
    '(a = b) => {}',
    '(a = b, c) => {}',
    '(a, b = c) => {}',
    '({a}) => {}',
    '(x = 9) => {}',
    '(a, b=(c)=>{}) => {}',
    '(async function foo(a) { await a });',
    '(a,b) =>{}',
    'x = (a,b) =>{}',
    '(a,...b) =>{}',
    'x = (a,...b) =>{}',
    'foo((x, y) => {});',
    'e => { 42; };',
    'e => ({ property: 42 });',
    '(a, b) => { 42; };',
    '(x) => ((y, z) => (x, y, z));',
    '(a) => 00;',
    'e => "test";',
    'e => t => "test";',
    'a =>{}',
    '(...a) =>{}',
    'x = a =>{}',
    '(a,b) => [a]',
    '() => { value: b}',
    '(x, y) => { x.a = y; }',
    '(x, y) => x.a = y',
    'x => (y, z) => z * (x + y)',
    '(a = b, c) => {}',
    'x => x * x',
    '(x) => x',
    '(x) => x * x',
    '(x, y) => x + y',
    '(x, y, z) => x, y, z',
    '(x, y) => x.a = y',
    "() => ({'value': 42})",
    'x => y => x + y',
    '(x, y) => (u, v) => x*u + y*v',
    '(x, y) => z => z * (x + y)',
    'x => (y, z) => z * (x + y)',
    '(x, ...a) => {}',
    '({a} = {}) => {}',
    '({a} = {}) => {}',
    '(interface, eval) => {}',
    'yield => {}',
    'arguments => {}',
    '(...[]) => 0',
    '(()=>0)',
    '((a)=>0)',
    '() => 0',
    '(...a) => 0',
    '(a, b) => { 42; }',
    'arguments => 42',
    '(x) => ((y, z) => (x, y, z))',
    'foo(() => {})',
    'foo((x, y) => {})',
    'x => { function x() {} }',
    '(a, ...b) => {}',
    '(...a) => {}',
    `async (eval) => "use strict";`,
    '(x) => { function x() {} }',
    '([x, y] = z) => x;',
    '([...x]) => x',
    '([x, ...y]) => x',
    '([[x, y] = z]) => x;',
    '(x, y)=>x;',
    '(a = 1, b = 2) => x;',
    'a = (b) => c;',
    '({x});',
    '({ident: {x: y}}) => x',
    '({ident: {x}}) => x',
    '({a} = b,) => {}',
    '(a, b, (c, d) => 0)',
    '([a]) => 0',
    'eval => {}',
    'arguments => {}',
    'yield => {}',
    '([a,[b],...c])=>0',
    'foo(([a,b]) => 42)',
    'foo((a=1) => 42)',
    '(...a) => 42',
    '([a, b], ...c) => 42',
    '({a, b}, ...c) => 42',
    '({a, b}) => (([a, b]) => 42)',
    'foo(([a, b]) => 42);',
    '(a, b, ...c) => 42',
    'interface => {}',
    '(eval) => {}',
    '(arguments) => {}',
    '(yield) => {}',
    '(interface) => {}',
    '(eval, bar) => {}',
    '(bar, eval) => {}',
    '(bar, arguments) => {}',
    '(bar, yield) => {}',
    '(bar, interface) => {}',
    '_ => {}\n/foo/',
    '_ => {}\n/foo/g',
    'f(new /z/())',
    'f(new /z/.foo)',
    '(arguments, interface) => {}',
    '(() => null)();',
    '(() => {})()',
    'async let => {}',
    '() => { [a, b] = [1, 2] }',
    '() => [a, b] = [1, 2]',
    '(...args) => console.log( args );',
    'double = (x) => x * 2',
    'Y = F => (x=>F(y=>(x(x))(y)))(x=>F(y=>(x(x))(y)))',
    'factorial = x =>  x < 1 ? 1 : x * factorial(x-1)',
    'a => (a + 1)',
    'sum = ( ...nums ) => nums.reduce( ( t, n ) => t + n, 0 );',
    `'use strict';
     setTimeout( () => console.log( this ) );
      function foo () {
      'use strict';
      setTimeout( () => console.log( this ) );
    }`,
    '([x = 0]) => {}',
    '(a, (a, (b, c) => 0))',
    '() => {}',
    '() => { return 42 }',
    'x => { return x; }',
    '(x) => { return x; }',
    '(x, y) => { return x + y; }',
    '(x, y, z) => { return x + y + z; }',
    '(x, y) => { x.a = y; }',
    '() => 42',
    'x => x',
    'x => x * x',
    '(x) => x',
    '(x) => x * x',
    '(x, y) => x + y',
    '(x, y, z) => x, y, z',
    '(x, y) => x.a = y',
    "() => ({'value': 42})",
    'x => y => x + y',
    '(x, y) => (u, v) => x*u + y*v',
    '(x, y) => z => z * (x + y)',
    'x => (y, z) => z * (x + y)',
    '([a]) => [0]',
    '([a,b])=>0',
    '({})=>0',
    'foo = (eval) => eval',
    'af = eval => eval',
    'af = arguments => arguments',
    '(x) => { return x }',
    'af = (...x) => { return x.length; }',
    '(() => 1)(), 1',
    '(a => a + 1)(1), 2',
    '(() => { return 3; })(), 3',
    '(a => { return a + 3; })(1), 4',
    '() => f1({x: 1})',
    '() => f10({x: 6}, 2)',
    '((a, b) => a + b)(1, 4), 5',
    'foo(({x}, [y], z) => x)',
    'foo(({x = 30}, [y], z) => x)',
    'foo(([x] = 20, y) => x)',
    'foo(foo => x => (x = 20) => (x = 20) => x)',
    'foo(foo => x => x => x => {x})',
    '((a, b) => { return a + b; })(1, 5), 6',
    `var test = async a => await test();`,
    'foo((a=1) => 42)',
    '([a,[b],...c])=>0',
    '(a, b=(c)=>{}) => {}',
    '({x = y}) => z',
    '(() => 1)(), 1',
    'for ([{x = y}] in y);',
    '[(x, y) => ok].x',
    '[() => ok].x',
    '[(x, y) => {}].x',
    '(x=(await)=y)=>z',
    'foo(() => ok)',
    '([x],) => x',
    '[x => {}].x',
    '[x => ok].x',
    'x = {arrow: (x) => ok}.y',
    'x = {arrow: async () => ok}.y',
    '[(x, y) => {}].x',
    '([{x = y}]) => z',
    `() => { let
      {} = y }`,
    'foo((x) => {})',
    'foo((x) => ok)',
    'foo((x => {}))',
    'foo(x => {})',
    `await => async.await[foo]`,
    `async g => (x = [await y])`,
    'foo(() => ok).bar',
    'foo((x) => {}).bar',
    'foo((x) => ok).bar',
    'foo((x => {})).bar',
    'foo(x => {}).bar',
    '(x => {}), (x => {})',
    '(x => {}) * x',
    'x * ((async => {}))',
    '(a = b,) => x',
    '({a} = b,) => x',
    'x * ((x) => ok)',
    'a, (x) => ok',
    'let => {}',
    '() => { let x }',
    'let => a + b',
    'let => {}, let => {}',
    'f = ([[,] = g()]) => {}',
    'a => a + x',
    '(a = await/r/g) => {}',
    'a => a / x',
    'a => x.foo',
    '(() => {}) << x',
    'a => x[foo]',
    '() => {}\n+function(){}',
    '(interface)',
    '(x = yield = x) => x',
    '([x = yield]) => x',
    '([x, {y: [yield]}])',
    '([], a) => {}',
    `(expect, subject, typeName) => {
      typeName = /^reg(?:exp?|ular expression)$/.test(typeName)
        ? 'regexp'
        : typeName;
      expect.argsOutput[0] = output => {
        output.jsString(typeName);
      };
      if (!expect.getType(typeName)) {
        expect.errorMode = 'nested';
        expect.fail(output => {
          output
            .error('Unknown type:')
            .sp()
            .jsString(typeName);
        });
      }
    }`,
    '(a, b = c) => {}',
    'let x = ({y=z}=e) => d',
    'a, (x, y) => {}',
    '(arguments) => {}',
    'arguments => {}',
    '(a, arguments) => {}',
    'arguments => {"use strict";}',
    'eval => {}',
    'a, (x, y) => ok',
    '(x => {}) (x => {})',
    '((x => {})) * x',
    '((x, y) => ok) * x',
    '(x)=>x;',
    'x * ((x, y) => ok)',
    'x * (x => {})',
    `_ => {}
    /foo/`,
    'x = {arrow: (x) => ok}',
    'x = {arrow: (x => {})}',
    'x = {arrow: (x, y) => ok}',
    '([{x = y}]) => z',
    '({a,b=b,a:c,[a]:[d]})=>0;'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseScript(`${arg}`);
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js', { module: true });
      });
    });
  }

  it('Double wrapped group in the middle', () => {
    t.deepEqual(parseScript('x = ((y)) = z'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AssignmentExpression',
            left: {
              type: 'IdentifierReference',
              name: 'x'
            },
            operator: '=',
            right: {
              type: 'AssignmentExpression',
              left: {
                type: 'ParenthesizedExpression',
                expression: {
                  type: 'ParenthesizedExpression',
                  expression: {
                    type: 'IdentifierReference',
                    name: 'y'
                  }
                }
              },
              operator: '=',
              right: {
                type: 'IdentifierReference',
                name: 'z'
              }
            }
          }
        }
      ],
      webCompat: true
    });
  });

  it('Assign with dud group', () => {
    t.deepEqual(parseScript('a = ((b)) = c;'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AssignmentExpression',
            left: {
              type: 'IdentifierReference',
              name: 'a'
            },
            operator: '=',
            right: {
              type: 'AssignmentExpression',
              left: {
                type: 'ParenthesizedExpression',
                expression: {
                  type: 'ParenthesizedExpression',
                  expression: {
                    type: 'IdentifierReference',
                    name: 'b'
                  }
                }
              },
              operator: '=',
              right: {
                type: 'IdentifierReference',
                name: 'c'
              }
            }
          }
        }
      ],
      webCompat: true
    });
  });
});
