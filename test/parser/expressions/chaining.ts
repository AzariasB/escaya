import * as t from 'assert';
import { parseScript, recovery } from '../../../src/escaya';

describe('Expressions - Optional chaining', () => {
  // Invalid cases
  for (const arg of [
    'obj?.0',
    'obj?.foo = 0',
    'obj?.foo.bar = 0',
    'obj?.().foo = 0',
    'obj?.foo++',
    'x?.[y] = foo',
    'a.?',
    'a.[]',
    'null?.`hello`;',
    'null?.fn`hello`;',
    'a?.`hello`;',
    'a = { x = flag?.[] = true } = value;',
    'a?.fn`hello`;',
    '({x: [y]?.a = 0} = 1)',
    '[a, x?.z] = f(() => { [a, b.c] = [d.e, (f.g) = h]; }); ',
    '([a, b] = f?.x(() => { [a, b?.c] = [d.e, (f.g) = h]; }));',
    '[...[x?.this[0], ...x?.this[1]]] = []',
    "({ a: x?.obj['a'] } = {})",
    '[a, ...b?.a] = [1, 2, ...c];',
    '({..."x"?.x} = x);',
    '([x.y = a] = ([x.y = a?.y] = ([x.y?.y = a] = z)))',
    '([...[]?.x] = x);',
    '({...[][x?.y]} = (x?.i) = (y));',
    '({0: y?.a} = 0)',
    'obj?.0',
    'obj?.foo = 0',
    'obj?.foo.bar = 0',
    'obj?.().foo = 0',
    'obj?.foo++',
    '++obj?.foo',
    'for (obj?.foo in {});',
    'for (obj?.foo.bar in {});',
    'for (obj?.foo.bar of []);',
    '({0: x?.a, 1: x} = 0)',
    '({a:let?.foo} = 0);',
    'x?.[y] = foo',
    'a.?',
    'a.[]',
    'async?.(bar: string) => {}',
    'a?.[]',
    '0, [{ set y(val) {}}?.y] = [23];',
    '0, { x: y?.z = 42 } = { x: 23 };',
    '0, { x: { set y(val) { }}?.y = 42} = {x: 42};',
    '0, { x: { set y(val) {}}?.y} = {x: 42};',
    'for ([x?.y = 42] in [[23]]) ;',
    'for ([x?.y = 42] in [[23]]) ;',
    'for ([{ set y(val) {}}?.y] in [[23]]) ;',
    'for ({ x: y?.z = 42 } in [{ x: 23 }]) ;',
    'for ({ x: y?.z } in [{ x: 23 }]) ;',
    'obj?.foo\n`template`',
    'async .?() => {}',
    'import?.("foo")',
    //'async(x?.x)=>x?.z',
    'a?.{a} = c',
    'foo?.bar *= x',
    '[foo?.bar] = x',
    'foo?.bar = x',
    'log(import?.meta)',
    'a:?[b]',
    'o.x?[y]+z',
    'obj:?[expr]',
    'o.x?[y]+z',
    '?.a?.b?.c',
    '?.(a.b.c)',
    'a[?b[c]]',
    '[x?.?.y = 1]',
    '[x?.x?.y = 1]',
    '[x?.y = 1]',
    '[x?.y = 1]',
    'a?.b => (a == null ? a : a.b)',
    '?. ?[] ?() ?:',
    'a.?2.3',
    'async?.await = foo',
    'async?.[x] = foo',
    'async?.() = foo',
    'function f() { return import?.("foo").then(party); }',
    // 'new foo?.bar(foo)',
    // 'new foo.bar?.(foo)',
    // 'new foo.bar?.(foo)',
    // 'new obj?.()',
    // 'new obj?.foo()',
    '[x?.?.y]',
    'class x extends y { constructor() { super?.(foo) } }',
    'a?.bar`foo`',
    //'a?.++',
    `a?.b
  /c/`,
    'a:?.b',
    'async .?() => {}',
    //'a?..200',
    'log(import?.meta)',
    // 'new foo?.bar',
    //'a?.--',
    '[x?.?.y]',
    'a.? (?) [?]',
    'a.?2.3',
    'a:?.b',
    '[x?.?.y = 1]',
    'async .?() => {}',
    '({0: x?.a, 1: x} = 0)',
    '({a:let?.foo} = 0);',
    'x?.[y] = foo',
    'foo?.bar *= x',
    '[foo?.bar] = x',
    'foo?.bar = x',
    //'obj?.\\u{0062}',
    //'obj?.\\u0061',
    'log(import?.meta)',
    'function f() { return import?.("foo").then(party); }'
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseScript(`${arg}`);
      });
      it(`${arg}`, () => {
        t.doesNotThrow(() => {
          recovery(`${arg}`, 'recovery.js');
        });
      });
    });
  }

  // Valid cases
  for (const arg of [
    'null?.(1, ...a)',
    'arr?.[0]',
    'obj?.[undefined]',
    'arr ?. length',
    `['hi']?.[0]`,
    `() => true?.()`,
    `null?.()().a['b']`,
    `({}).a?.(...a)`,
    `delete o1?.x`,
    `delete o1.z?.()`,
    `({ x: 'hi' })?.['x']`,
    `({})?.constructor`,
    `0?.valueOf()`,
    `null?.valueOf()`,
    `1?.valueOf()`,
    `a?.b(...args).c(...args);`,
    `(a?.b).c`,
    `for (const key of {}?.a) ;`,
    `for (const key of obj?.a) {}`,
    `for (const key of obj?.a);`,
    `for (obj?.a; undefined?.a; obj?.a) { count2++; }`,

    `null?.a`,
    `(obj?.a)?.b`,
    `(fn()?.a)?.b`,
    `(function * a () {}?.name)`,
    `async?.(package())`,
    `async?.(async())`,
    `async?.(async?.a, async?.a)`,
    `async?.("string", async?.a, async?.a)`,
    `o3?.a?.b === o4?.a?.b === undefined`,
    `x in (o3?.a)`,
    `a?.[++x]`,
    `a?.b.c(++x).d;`,
    `undefined?.[++x]`,
    `foo?.x?.y?.z?()=>{foo}:bar;`,
    `if (a?.b?.c === 'foobar') {}`,
    `[a, ...b] = [1, 2?.a, 3];`,
    `({ a: null }).a?.(...a)`,
    `() => 5?.(...[])`,
    `null.call?.({ suffix: "!" }, "world")`,
    `o2.x?.["y"];`,
    `x?.[y?.z];`,
    `a ?? foo.bar?.baz ?? a.c`,
    `f({})?.a["b"]`,
    `delete null?.foo`,
    `f?.(arg0, arg1)`,
    `1?.["valueOf"]()`,
    `() => ({})?.a["b"]`,
    `null?.()().a["b"]`,
    `({...{}[x?.y]} = x?.y??z);`,
    `(a?.b).c`,
    `async?.(async?.a, async?.a)`,
    `async?.(async?.a, "string", a=>x?.z)`,
    `async?.(async=>x?.z, "string", async(yield)=>x?.z)`,
    `async?.(async()=>x?.await)`,
    `({a: 33})?.a`,
    `false?.4:5`,
    `var a = b.c("string")?.d.e || 0;`,
    `func?.()`,
    `arr[0]?.a`,
    `(class Foo {}?.name)`,
    `0?.()`,
    `0?.valueOf()`,
    `false?.()`,
    `[]?.()`,
    `(a?.b).c;`,
    `(a?.b).c();`,
    `a?.b[3].c?.(x).d`,
    `({..."x"[x]} = x);`,
    `x?.({ a: obj.a } = {})`,
    `for ((obj?.foo).bar of []);`,
    `(obj?.foo).bar++`,
    `(obj?.foo).bar++`,
    `(obj?.foo).bar = 0`,
    `class Foo extends Base { method() { super.method?.(); } }`,
    `class Foo extends Base { method() { super.method?.(); } }`,
    `function a(b) { new.target?.(); }`,
    `obj?.aaa?.bbb`
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseScript(`${arg}`);
      });
      it(`${arg}`, () => {
        t.doesNotThrow(() => {
          recovery(`${arg}`, 'recovery.js');
        });
      });
    });
  }
});
