import * as t from 'assert';
import { parseScript, recovery } from '../../../src/escaya';

describe('Declarations - Class', () => {
  // Invalid cases
  for (const arg of [
    'class A{ b(){ return super?.b; } }',
    'super',
    'super[]',
    'async function* x() { super() }',
    '(function*() { super() })',
    'class L extends super.foo {;async [3.](){}}',
    'class X extends super() {async *[0](){};}',
    'class $ extends super.foo {async *.2(){}* async *set(){};;async 3.(){}}',
    'class x extends y { constructor(){ return function() { return () => super[bar]; } }}',
    'class x extends y { constructor(){ return async function(a=super[foo]) {}; }}',
    'x={ dsda(){ return async function(a=super[foo]){} }}',
    'class x extends y { constructor(){ return async function() { super[foo]; } }}',
    'class x { fo(){ return async function() { super[foo]; } }}',
    'x = {[super[foo]]: x};',
    'delete super[foo]',
    'x[super[foo]]',
    'x={ fo(){ return async function() { super[foo]; } }}',
    'class x extends y { constructor(){ return () => async function() { super[foo]; } }}',
    'class x extends y { constructor(){ return async function() { return async function() { super[foo]; } } }}',
    'class x extends y { foo(){ return () => async function() { super[foo]; } }}',
    'x={ foo(){ return () => async function() { super[foo]; } }}',
    'class x { constructor(){ return async function() { super[foo]; } }}',
    'class x { dsda(){ function g(a=super[foo]) {} }}',
    'x={ fo(){ function g() { super[foo]; } }}',
    'x={ foo(){ return () => { function g() { super[foo]; } } }}',
    'class x { constructor(){ return () => { function g() { super[foo]; } } }}',
    'class x { constructor(){ function g() { super[foo]; } }}',
    'function g() { super[foo]; }',
    'class x extends y { constructor(){ function *g(a=super[foo]) {} }}',
    'class x extends y { constructor(){ return function() { function *g() { super[foo]; } } }}',
    'function f(x=super[bar]){ }',
    'x = function(){ super[bar]; }',
    'let f = () => super[bar];',
    'let f = (a=super[bar]) => a;',
    'class I {get set async *async(){};;}',
    'class q extends super.foo {async *get(){};async U(){}}',
    `class x { foo(){ function f(){ super.foo } }}`,
    `class x { constructor(){ function f(){ super.foo } }}`,
    'class v extends super() {set 1(F){};;}',
    'class _ {get [1](){}async [super.foo](){}}',
    'class d extends super() {set async(E){}set set(a){}* async *constructor(){};set get(S){}}',
    'class l extends super() {set set(y){};;get set(){}async *_(){}}',
    '() => class Z extends super.foo {async set(){};set set(d){}set get .2(){}}',
    'class I extends super() {;async *Z(){}}',
    'class u extends super() {* get async(){}get b(){};get [super.foo](){}}',
    'function *a(){ a, class extends super() {;;;;set [super()](U){}} }',
    'N(class K extends super() {get 1(){};;})',
    'class x extends super { }',
    'class x extends super y { }',
    'class x extends foo(super) { }',
    'class x extends foo(super y) { }',
    'class x { foo(x=super){} }',
    'class x { foo(x=super y){} }',
    'class x { foo(x=new (super)()){} }',
    'class x { [super](){} }',
    'class x { [super y](){} }',
    'class f { constructor(){  class super { }  }}',
    'class f { constructor(){  class x extends super { }  }}',
    'class f { constructor(){  class x extends super y { }  }}',
    'class f { constructor(){  class x extends feh(super) { }  }}',
    'class f { constructor(){  class x extends feh(super y) { }  }}',
    'class f { constructor(){  class x { foo(x=super){} }  }}',
    'class f { constructor(){  class x { foo(x=super y){} }  }}',
    'class f { constructor(){  class x { foo(x=new (super)()){} }  }}',
    'class f { constructor(){  class x { [super](){} }  }}',
    'class f { constructor(){  class x { [super y](){} }  }}',
    'class f { bar(){ class super {} }}',
    'class f { bar(){ class x extends super { }  }}',
    'class f { bar(){ class x extends super y { }  }}',
    'class f { bar(){ class x extends feh(super) { }  }}',
    'class f { bar(){ class x extends feh(super y) { }  }}',
    'class f extends bar { constructor(){ class x extends feh(super y) { }  }}',
    'class f extends bar { xxx(){ class x extends super { }  }}',
    'class f extends bar { xxx(){ class x extends super y { }  }}',
    'class f extends bar { xxx(){ class x extends feh(super) { }  }}',
    // 'class f extends bar { xxx(){ class x { foo(super){} }  }}',
    'class f extends bar { xxx(){ class x { foo(x=super){} }  }}',
    'class x extends super.foo { }',
    //'class x { foo(super.foo){} }',
    'class C { constructor() { super(); } }',
    'class C { method() { super(); } }',
    'class C { method() { () => super(); } }',
    'class C { get x() { super(); } }',
    'class C { set x(_) { super(); } }',
    '({ method() { super(); } })',
    '({ *method() { super(); } })',
    '({ f: function() { super(); } })',
    '({ f: function*() { super(); } })',
    // 'class f extends bar { constructor(){ class x { foo(x=super.foo y){} }  }}',
    'class f extends bar { constructor(){ class x { super.foo(){} }  }}',
    'class f extends bar { constructor(){ class x { [super.foo y](){} }  }}',
    'class f extends bar { x(){ class super.foo { }  }}',
    'class f extends bar { x(){ class x extends super.foo y { }  }}',
    'class f extends bar { x(){ class x extends feh(super.foo y) { }  }}',
    //'class f extends bar { x(){ class x { foo(x=super.foo y){} }  }}',
    'class f extends bar { x(){ class x { super.foo(){} }  }}',
    'class f extends bar { x(){ class x { [super.foo y](){} }  }}',
    'class x { foo(){ super(); } }',
    'async(foo) => { super.prop };',
    'class x extends y { foo(){ super(); } }',
    '!{ a() { !function* (a = super.b()){} } };',
    'async(foo) => { super() };',
    '(async function*() { super(); });',
    'class A extends B { constructor() { (super)() } }',
    'function wrap() { function foo(a = super(), b = super.foo()) {}}',
    '({ a() { (super).b(); } });',
    'class X { x(){class X { constructor(){super();} }} }',
    '!{ a() { !function* (a = super.b()){} } };',
    '({ f: function*() {() => new super; } })',
    '(function*() { super(); })',
    'class f { bar(){ class x extends super.foo y {} }}',
    'class f { bar(){ class x extends feh(super.foo y) {} }}',
    'class C { method() { () => super(); } }',
    'super[27]()',
    'class f { bar(){ class super() {}  }}',
    'while (true) {() => new super.x();}',
    'class f { bar(){ class x extends super() {} }}',
    'class f { bar(){ class x extends feh(super()) {} }}',
    'class f { bar(){ class x { foo(x=new (super())()){} } }}',
    'class f extends bar { constructor(){ class x { foo(super()){} } }}',
    'class f extends bar { x(){ class super() {} }}',
    'class f extends bar { x(){ class x { [super() y](){} } }}',
    'class f extends bar { x(){ class x { [super()](){} } }}',
    'class f extends bar { x(){ class x { super()(){} } }}',
    'class f extends bar { x(){ class x { foo(x=new (super())()){} } }}',
    'class f extends bar { x(){ class x { foo(x=super() y){} } }}',
    'class f extends bar { x(){ class x { foo(super()){} }  }}',
    'class f extends bar { x(){ class x extends feh(super() y) { } }}',
    'class f extends bar { x(){ class x extends feh(super()) {} }}',
    'class f extends bar { x(){ class x extends super() y { }  }}',
    'class f extends bar { x(){ class x extends super() { }  }}',
    'class f extends bar { x(){ class super() {} }}',
    'class f extends bar { constructor(){ class x { super()(){} }  }}',
    'class f extends bar { constructor(){ class x { foo(x=super()){} } }}',
    'class f extends bar { constructor(){ class x { foo(super()){} } }}',
    'class f extends bar { constructor(){ class x extends super() y {} }}',
    'class f extends bar { constructor(){ class super() {} }}',
    'class f { constructor(){ class x { foo(x=super()){} } }}',
    'super = x',
    'class f { constructor(){ class x { foo(x=super() y){} } }}',
    'class f { bar(){ class x { [super()](){} }  }}',
    'class f extends bar { x(){ class x extends feh(super() y) { } }}',
    'x={ foo: function(){ super.foo; }}',
    'g=function f(x = super()){ }',
    'g={f: function f(){ super() }]',
    //'class f { bar(){ class x { foo(super){} }  }}',
    'class f { bar(){ class x { foo(x=super){} }  }}',
    'class f { bar(){ class x { foo(x=super y){} }  }}',
    'class f { bar(){ class x { foo(x=new (super)()){} }  }}',
    'class f { bar(){ class x { [super](){} }  }}',
    'class f { bar(){ class x { [super y](){} }  }}',
    'class f extends bar { constructor(){ class super { }  }}'
    // 'class f extends bar { xxx(){ class x { foo(super){} }  }}',
    // 'class f { bar(){  class x { foo(x=super..foo){} }  }}',
    // 'class f { bar(){  class x { foo(x=super..foo bar){} }  }}',
    //`class A extends B { *g2(a = 1 + (yield 2)) { } }`,
    // 'class x { foo(super){} }',
    // 'class f { constructor(){  class x { foo(super){} }  }}',
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseScript(`${arg}`);
      });
    });

    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
  }

  // Valid cases
  for (const arg of [
    'class a extends b { c() { [super.d] = e } }',
    `class x extends y { constructor() { super() } }`,
    `class x extends y { constructor() { super(this) } }`,
    `class x { foo(x=super[foo]){ }}`,
    `class x { constructor(){ super[foo] }}`,
    `class x { foo(x=super.foo){ }}`,
    `class x { constructor(){ super.foo }}`,
    `class x extends y { constructor(x = super(), y = this) { } }`,
    `class x extends y { constructor(x = this) { super() } }`,
    `class x extends y { constructor(x = super()) { } }`,
    `class x { foo(){ super.foo }}`,
    `class C { constructor() {new super.x } }`,
    `class f { constructor(){  class x { foo(x=super.foo){} }  }}`,
    `class a extends b { c() { [super.d] = e } }`,
    `class f { bar(){  class x extends super.foo { }  }}`,
    `class f { bar(){  class x { foo(x=new (super.foo)()){} }  }}`,
    `class f extends bar { constructor(){  class x extends feh(super.foo) { }  }}`,
    `class f extends bar { xxx(){  class x extends super.foo { }  }}`,
    `class f extends bar { xxx(){  class x { foo(x=super.foo){} }  }}`,
    `class f extends bar { constructor(){  class x extends super() { }  }}`,
    'class f { constructor(){  class x { [super.foo](){} }  }}',
    'class f { constructor(){  class x { [super.package](){} }  }}',
    'class f { constructor(){  class x { [super.bilat](){} }  }}',
    'class f { constructor(){  class x { [super.implements](){} }  }}',
    'class f { constructor(){  class x { [super.async](){} }  }}',
    'class f { constructor(){  class x { [super.await](){} }  }}',
    'class f { constructor(){  class x { [super.yield](){} }  }}',
    'class f { constructor(){  class x { [super.function](){} }  }}',
    'class f { constructor(){  class x { [super.let](){} }  }}',
    'class f { constructor(){  class x { [super.class](){} }  }}',
    'class f { constructor(){  class x { [super.public](){} }  }}',
    'class f { constructor(){  class x { [super.if](){} }  }}',
    'class f { constructor(){  class x { foo(x=new (super.foo)()){} }  }}',
    'class f { constructor(){  class x { foo(x=super.foo){} }  }}',
    'class f { constructor(){  class x extends feh(super.foo) { }  }}',
    'class f { constructor(){  class x extends super.foo { }  }}',
    'class f { constructor(){  class x { foo(x=new (super.foo)()){} }  }}',
    'class f { constructor(){  class x { foo(x=super.foo){} }  }}',
    'class f { constructor(){  class x extends feh(super.foo) { }  }}',
    'class f { constructor(){  class x extends super.foo { }  }}',
    'class f extends bar { constructor(){  class x extends super.foo { }  }}',
    'class f { bar(){  class x { [super.foo](){} }  }}',
    'class f { bar(){  class x { foo(x=new (super.foo)()){} }  }}',
    'class f { bar(){  class x { foo(x=super.foo){} }  }}',
    'class f { bar(){  class x extends feh(super.foo) { }  }}',
    'class f { bar(){  class x extends super.foo { }  }}',
    'class f { constructor(){  class x { [super.foo](){} }  }}',
    'class f extends bar { xxx(){  class x { [super.foo](){} }  }}',
    'class x extends y { y(){ return (a=super[bar]) => a; }}',
    'class x extends y { constructor(){ return (a=super[bar]) => a; }}',
    'class x extends y { constructor(){ return () => super[bar]; }}',
    'class x extends y { y(){ return (a=super[bar]) => a; }}',
    'class x { y(){ return (a=super[bar]) => a; }}',
    'x={ y(){ return (a=super[bar]) => a; }}',
    'class x extends y { fo(){ return () => super[bar]; }}',
    'class x { fo(){ return () => super[bar]; }}',
    'x={ fo(){ return () => super[bar]; }}',
    'class x extends y { constructor(){ return () => () => super[bar]; }}',
    'class x extends y { foo(){ return () => () => super[bar]; }}',
    'x={ foo(){ return () => () => super[bar]; }}',
    'x={ foo(){ super[foo]; }}',
    'x = { foo(){ return {[super[foo]]: x}; }}',
    'x = { foo(){ [a = super[foo]] = c; }}',
    'x = { foo(){ delete super[foo]; }}',
    'x = { foo(){ ([a = super[foo]] = c); }}',
    'x = { foo(){ return x[super[foo]]; }}',
    'class f extends bar { xxx(){  class x { foo(x=new (super.foo)()){} }  }}',
    'class f extends bar { xxx(){  class x { foo(x=super.foo){} }  }}',
    'class f extends bar { xxx(){  class x extends feh(super.foo) { }  }}',
    'class f extends bar { xxx(){  class x extends super.foo { }  }}',
    'class f extends bar { constructor(){  class x { [super.foo](){} }  }}',
    'class f { bar(){  class x { [super.foo](){} }  }}',
    'class f { bar(){  class x { foo(x=super.foo){} }  }}',
    'class f { bar(){  class x { foo(x=super.foo){} }  }}',
    'q(class V extends z {;;;get set(){}})',
    'class Q {;;;async *u(){};}',
    'class g {;get get(){}}',
    '$ = class r {async set(){};;;}',
    'class d extends {} {async [{}](){};get async(){};}',
    'class f extends bar { constructor(){  class x { foo(x=new (super.foo)()){} }  }}',
    'class f extends bar { constructor(){  class x { foo(x=super.foo){} }  }}',
    'class f extends bar { constructor(){  class x extends feh(super.foo) { }  }}',
    'class a extends b { constructor(){   class x extends y { [super()](){} }    }}',
    'class a extends b { constructor(){      class x extends super() {}    }}',
    'class a extends b { constructor(){   class x { [super()](){} }    }}',
    'class a extends b { foo(){      class x extends super.foo {}    }}',
    'class a { foo(){      class x extends super.foo {}    }}',
    'class a extends b { foo(){   class x extends y { [super.foo](){} }    }}',
    'class a extends b { foo(){   class x { [super.foo](){} }    }}',
    'class a { foo(){   class x extends y { [super.foo](){} }    }}',
    'class f extends bar { constructor(){  class x { [super()](){} }  }}',
    'class f extends bar { constructor(){  class x extends feh(super()) { }  }}',
    'class f extends bar { constructor(){  class x extends super() { }  }}',
    `class f { constructor(){  class x { foo(x=new (super.foo)()){} }  }}`,
    `class a extends b { foo(){   class x { [super.foo](){} }    }}`,
    'class a extends b { constructor(){      class x extends super() {}    }}',
    'class a extends b { constructor(){   class x { [super()](){} }    }}',
    'class a extends b { foo(){      class x extends super.foo {}    }}',
    'class a { foo(){      class x extends super.foo {}    }}',
    'class a extends b { foo(){   class x extends y { [super.foo](){} }    }}',
    'class a extends b { foo(){   class x { [super.foo](){} }    }}',
    'class a { foo(){   class x extends y { [super.foo](){} }    }}',
    'class f extends bar { constructor(){  class x { [super()](){} }  }}',
    `class x { foo(x=super.foo){ }}`,
    `class x extends y { constructor() { super() } }`,
    `class x { constructor(){ super.foo }}`,
    `class x { constructor(){ super[foo] }}`,
    `class x { foo(){ super.foo }}`,
    'class f { constructor(){  class x { [super.class](){} }  }}',
    'class f { bar(){  class x { [super.foo](){} }  }}',
    'class f { bar(){  class x { foo(x=super.foo){} }  }}',
    'class a { foo(){   class x extends y { [super.foo](){} }    }}'
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseScript(`${arg}`);
      });
    });
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        recovery(`${arg}`, 'recovery.js');
      });
    });
  }
});
