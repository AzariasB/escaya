import * as t from 'assert';
import { parseScript } from '../../../src/escaya';

describe('Expressions - Parenthesized', () => {
  // Invalid cases
  for (const arg of [
    '({ident: [foo, bar] += x} = y)',
    // '({ident: [foo, bar] + x} = y)',
    '([0])=>0;',
    '({x = y}).z',
    '[{x = y}]',
    '({x = y}.z = obj)',
    '(/x/) => x',
    '(x, /x/g) => x',
    '(x, /x/g) => x',
    '({...[]} = x);',
    '({...obj1,} = foo)',
    '({...obj1,a} = foo)',
    '({...obj1,...obj2} = foo)',
    '({ident: {x}.join("")}) => x',
    '({ident: {x:y} += x})',
    '({ident: {x}/x/g}) => x',
    '(...a = x,) => {}',
    '({...(a,b)} = foo)',
    '({a: 1} = []);',
    '(...{a: b}.c = [])',
    '([x, y]) = z;',
    '{x, y} = z;',
    '({x, y}) = z;',
    `(x={200: await z}) => t`,
    '([a \n/b/]);',
    '(a \n/b/);',
    '( (x) = y ) => {}',
    '(x=(await z)=y)',
    '(...a)',
    '(a, ...b)',
    '()',
    '(a,b+=2',
    '(case)=2',
    '(a, ...b)',
    '({x=y})=z',
    '(a,b)+=2',
    '([a]) = 2',
    '({a}) = 2',
    '([x]++)',
    // '([a,[b],...b])=>1',
    // '([a],...a)=>1',
    '({...{z}} = { z: 1})',
    '( { ...{ x = 5 } } = {x : 1})',
    '({...{}} = {})',
    '({ async = true })',
    '({...obj1,a} = foo)',
    '({a: {a: 1} = []})',
    '({a:(a,y) = 0} = 1)',
    '([].length) => x;',
    '(...{a: b}.c = [])',
    `({a: b * x} = d)`,
    '({...x = 1} = {})',
    `(q, {a: b * x} = d)`,
    '({...a, x } = { x: 1 })',
    '(q, {...a, x } = { x: 1 })',
    '({...a, x, ...b } = { x: 1 })',
    '(q, {...a, x, ...b } = { x: 1 })',
    '(q, {...a, x, ...b } = { x: 1 })',
    '({a, ...rest.b + rest.b} = o)',
    '({a}=1)=1',
    '({a:a}=1)=1',
    '(a.())',
    '(a = 1) = t ',
    '({[b]}})',
    '({[b], x})',
    '({a: (b) = 0} = 1) => x',
    '({a: (b.x) = 0} = 1) => x',
    '({a: [b.x] = 0}) => x',
    '({a:{x = y}.z} = x);',
    '({a: {a: b.x} = 0}) => x',
    '([{x: y.z}]) => b',
    '([{x: y.z}] = a) => b',
    '([{x: y.z} = a]) => b',
    '([x()]) => x',
    '([x().foo]) => x',
    '([x[y]] = z) => {}',
    'function f([x[y]] = z) {}',
    '(({ x = 10 } = { x = 20 }) => x)({})',
    '((a=b))= (a)',
    '([...x.y]) => z',
    '((a[b]/b))= (a)',
    '[a]= (a?.b=x)',
    '(a)= (a?.b=x)',
    '({a})= (a)',
    '[(a/b)]= (a)',
    '(a?.b)= (a)',
    '([a]) = (a)',
    '([a]) = (a)[a/b]',
    '([a])/= (a)',
    '(a?.b)= (a)',
    '(a[b] ? c : d) = (a)',
    '(a.x++)++',
    '({1: [b.c = x]} = 2 / (3 = ((a)) = a))',
    '({ x: x ||= 2 ] = { x: 2 })',
    '({ x: x &&= 2 ] = { x: 2 })',
    '({ x: x ||= 2 ] = { x: 2 })',
    '({a:this}=0)',
    '({a:this}=0)',
    '({a: this} = 0);',
    '({...a})=x',
    '(...[a) = a',
    '(...a) = a',
    '(a,b)=(c,d);',
    '({a = 0});',
    '({a} += 0);',
    '({,a,} = 0)',
    '([...++x]= {});',
    '([ ...(++y) ]= {});',
    '([ ...(++y) ]= {});',
    '({*=f(){}})',
    '({a}=1=1)',
    '({a:a}=1=1)',
    `(x) = (1) += z`,
    `(x) += (1) = z`,
    '({1}) = {}',
    '({+2 : x}) = {};',
    '({x+=y})',
    '({,} = {});',
    '({ x: y } = {}) = {}',
    '(({ x: y } = {})) = {}',
    '(({ x: y }) = {}) = {}',
    '([a]) = {}',
    '(([a])) = {}',
    '([a] = []) = {}',
    '(([a] = [])) = {}',
    '(([a]) = []) = {}',
    '({a: {d = 1,c = 1}.c = 2} = {});',
    '({a: ({d = 1,c = 1}.c) = 2} = {});',
    '({...rest, b} = {})',
    '(({ x = 10 } = { x = 20 }) => x)({})',
    '({Object = 0, String = 0}) = {};',
    '({x, y}) = {}',
    '({a,b}) = {a:2,b:3}',
    '({...obj1,...obj2} = foo)',
    '({...obj1,a} = foo)',
    '({ foo }) = {}',
    '({ [...a] = [] })',
    '({x:y} += x)',
    '({x}) = foo',
    '({x: {..}})',
    '({x: [..]})',
    '({ * *x(){} })',
    '({...[a, b]} = x)',
    '({...[a,b]} = foo)',
    '({a: 1} = []);',
    '({foo += bar})',
    '([x]) = 0',
    '({a = b})',
    '(x, ...);',
    '(..., x)',
    '(...a, b)',
    '(a, ...a) = b',
    '(...a,...a)',
    '((x,x)) = 5',
    '(((x,x))) = 5',
    '({a: {b = 0}.x} = {});',
    `(a = b,)`,
    `([x],)`,
    `({a},)`,
    `(a,)`,
    `(a = b,)`,
    '(a',
    '(a:) --b',
    '((a()',
    '(++)',
    '++()',
    '({...(a,b)} = foo)',
    '({...})',
    '({...obj1,a} = foo)',
    '({a: b = 0, c = 0});',
    ' ({(a):0})',
    '(++x)=b',
    '(--x)=b',
    '(x++)=b',
    '(x--)=b',
    '(a=b.c)=d;',
    'a=(a=b.c)=d;',
    '({a:for} = 0)',
    '({[foo]: bar()} = baz)',
    '({[foo]: a + b} = baz)',
    '({[a,b]:0})',
    `(x) = (1) = z`,
    '({"a"} = 0)',
    // '({a: b += 0} = {})',
    '(...abc,)',
    '(...a=b=c)',
    '(...abc,)',
    '(...abc=,)',
    '(...abc,=)',
    '(...abc,,,,,,,=)',
    '(...abc,,,,,,,=====)',
    '(...a=b=c)',
    '(...abc,)',
    '(...)',
    '({a:1},)',
    '(a:) --b',
    '(a++',
    'a(1,,);',
    `([x] = y,)`,
    `({a} = b,)`,
    `(a,) = x`,
    `(a,b,) = x`,
    `(a = b,) = x`,
    `([x],) = x`,
    `({a},) = x`,
    `([x] = y,) = x`,
    `({a} = b,) = x`,
    '([a]) = 0',
    '({set a([a.b]){}})',
    '({b}) = b;',
    '([a]) = x',
    '("a") = "b"',
    '({a([a.b]){}})',
    '({x:true = 5})',
    '([[a](b.c) = [[a] = [[a] = ([[a] = x]]]]))',
    '([[a](b) = [[a] = [[a] = ([[a] = x]]]]))',
    '([[a] = [[a] = [[a] = ([[a] = x]]]]))',
    '([...a, ,] = [...a, ,])',
    '({*a([a.b]){}})',
    '({a, b}) = {a: 1, b:2}',
    '([b]) = b;',
    '({a: [a + 1] = []});',
    '({a}) = 0',
    '({a}) = 2;',
    '({a, b}) = {a: 1, b:2};',
    '({a}) = 1;',
    '({x : , y} = {});',
    '({get foo() {}} = {});',
    '({set foo(a) {}} = {});',
    '({set ["foo"](a) {}} = {})',
    '({a:this}=0)',
    '({ x }) = { x: 5 };',
    '(a,b,c,);',
    '({(a)} = 0)',
    '({ src: ([dest]) } = obj)',
    '({a:(b = 0)} = 1)',
    '([a += a] = a)',
    '({[a]: {...[a[]]}})',
    '({...{}} = {});',
    '(((...a))',
    '(((a, ...b)))',
    `({a}) = 0;`,
    `([a]) = 0;`,
    `({a} += 0);`,
    '({a: 0} = 0);',
    '({get a(){}} = 0)',
    '({set a(b){}} = 0)',
    '({a(b){}} = 0)',
    '(((...a)))',
    '({...a}) = b',
    '([...x=y]) = z',
    '({a: ("string") / a[3](((((a /= [b.c => a] = ([x / 2]())))))) })',
    '(new.target) = 1',
    '({ident: {x}.join("")}) => x',
    '({ident: {x:y} += x})',
    '({ident: {x}/x/g}) => x',
    '({...obj1,} = foo)',
    '({...(a,b)} = foo)',
    '({...(a,b)} = foo)',
    '({ a = 42,  b: c = d, })',
    '({a},)',
    '({...{a, b}} = x)',
    '({a},) = x',
    '(...a = x,) = x',
    '([a + b] = x);',
    '([b]) = b;',
    '([x],) = x',
    '(a = b,)',
    '(a,,) = x',
    '(,,)',
    '(,) = x',
    '(,,) = x',
    '(a,) = x',
    '(...a = x,) = x',
    '({a} = b,) = x',
    '(...);',
    '(a[b],c)+=2',
    '(a,b)=2',
    '(a=1)+=2',
    '(a=1)=2',
    '({get p(...[]) {}})',
    '({set p(...[]) {}})',
    '...x => x',
    '([{x = y}.z] = obj)',
    '[{x = y}]',
    //'([x]++)',
    '(()) => 0',
    '({...x.y} = z) => z',
    '({ x = 123 });',
    '({ident: [foo, bar] += x})',
    '({...{x} }) => {}',
    '({...(x) }) => {}',
    '((x={15: (await foo)}) => x',
    '({x: 15.foo()} = x)',
    '({x: 15.foo} = x)',
    '([{a:b[0]}])=>0',
    '(foo ? bar : baz, a) => {}',
    '({a: (1) = x })',
    '({a: 1 = x })',
    '({ x: x }) = a;',
    '({foo: {x:y} += x})',
    '({foo: {} += x})',
    '({get a(){}})=0',
    '({x}) = {x: 1};',
    '([a]) = []',
    '-(5) ** 6;',
    '([a]) = 0',
    '({a}) = 0',
    '(a = b) = c;',
    '({ a: (a = d) } = {})',
    '({...[x] }) => {}',
    '(c, a.b) => {}',
    '({x: 15.foo()} = x)',
    'x = {x: 15.foo()} = x',
    'x = ({}) = b',
    '({15: 15.foo()}=x)',
    '({foo: {x:y} += x})',
    '({x}) = {x: 1};',
    '({a: {x = y}}).z',
    '([x.y = a] = (...z))',
    '(([x])=y in z);',
    '(0, {a = 0}) = 0',
    '({a = 0}, {a = 0}, 0) => 0',
    'async (a, ...b=fail) => a;',
    '({x:{1:y()=x},x:{7:3}})>x',
    '([a + 1] = []);',
    '([1, a] = []);',
    '[((a)] = [];',
    '(a,b,) = x',
    '({...[]} = x);',
    '(...x);',
    '({[foo]: bar()} = baz)',
    '({[foo]: a + b} = baz)',
    '({x})=y',
    '(a,b,)',
    '(a = b,) = x',
    '({[].length} = x);',
    '({[x].length} = x);',
    '({{}.length} = x);',
    '({{x: y}.length} = x);',
    '({delete(){}} = y);',
    '({yield(){}} = y);',
    '({a: {b = 0}.x} = {})',
    '({3200: fail() = x} = x)',
    '({foo: fail() = x} = x)',
    '({get * bar(){})',
    'x({*[foo',
    '({set * bar(x){})',
    '({static * bar(x){})',
    '({*(){}})',
    '({   async *[x"',
    '({   async *[x',
    '( new x ) = x',
    '( this ) = x',
    '({a({e: a.b}){}})',
    '({*a({e: a.b}){}})',
    '({set a({e: a.b}){}})',
    '(...a,)',
    '(...a,) = x',
    '([x] = y,)',
    '({a} = b,)',
    '([x],)',
    '({ a = 0 });',
    //'(y, x)++',
    '({a = 0});',
    '({a,,} = 0)',
    '({,a,} = 0)',
    '({a,,a} = 0)',
    '({a = 5})',
    '({a.b} = 0)',
    '({0} = 0)',
    '({async **=f(){}})',
    '({async *=f(){}})',
    '({*=f(){}})',
    '({a:function} = 0)',
    '({function} = 0)',
    '(a = b) = c;',
    '(([a]) = [])',
    '([{x = y}].z = obj)',
    '([{x = y}.z])',
    '([{x = y}].z)',
    '({x = y}.z)',
    '(a=/i/) = /i/',
    '(null) = x',
    '({a},) = x',
    '({...(a,b)} = foo)',
    '(do = "sentinal 453543")',
    '(1) = y = x',
    '(x) = (1) = z',
    '([...[[][][]] = x);',
    "'(...(...('z'))",
    "((...'z'))",
    '((...z))',
    "'(...(...z))",
    '([x.y = a] = (...z))',
    "(c, a['b']) => {}",
    '({a: {x = y}}.z) => obj',
    '({a: {x = y}.z})',
    '({a: 1 = x })',
    '(y) = (1) = x',
    '(1) = x',
    '(a,) = x',
    '([x] = y,) = x',
    '({a},)',
    '(,)',
    '({x = y}.z)',
    '([{x = y}])',
    `({15: 15.foo}=x)`,
    '(()) => 0',
    '({...{}} = {})',
    '({...obj1,...obj2} = foo)',
    '({a: {x = y}}.z = obj)',
    '({a: {x = y}.z})',
    '({a: {x = y}}.z)',
    '({a: {x = y}})',
    '([{x = y}]).z',
    '({[x](){}} = z);',
    '({x:{1:y()=x},x:{7:3}})>x',
    //'([[].length]) => x;',
    '({ obj:20 }) = 42',
    '( (x) ) => {}',
    '( { get x() {} } = 0)',
    '([...{a = b} = c]) => d;',
    '()',
    '(...a)',
    '(...a, b)',
    '(a, ...a) = b',
    '(...a,...a)',
    '({...a}) = b',
    '(a,b)+=2',
    '(a,b)=2',
    '(a=1)+=2',
    '(a=1)=2',
    '();',
    '()',
    '(...x);',
    '(...);'
  ]) {
    it(`${arg}`, () => {
      t.throws(() => {
        parseScript(`${arg}`);
      });
    });
  }

  // Valid cases
  for (const arg of [
    '({x = y} = z)',
    '({a: {x = y}} = z)',
    '({...a,b,c})',
    '({ident: {x: y}})',
    '(false)',
    `a = (
  b,
  c
)`,
    '([]())',
    '({}())',
    '([](a))',
    '({}(a))',
    '([](a,b))',
    '({}(a,b))',
    '(a())',
    '(a(b))',
    '([a.b] = x);',
    '(x--);',
    '([target()[targetKey(a=b)]] = x);',
    '([].length) = y',
    '([x].length) = y',
    '({}.length) = z',
    '({x: y}.length) = z',
    '({x});',
    '(2 * 3 ** 2, 18)',
    '(1, 2, 3, 4, 5)',
    '([...x=y])',
    '([a])',
    '(([a]))',
    '([a] = [])',
    '(([a] = []))',
    '(x--, y);',
    '((x));',
    '(++x);',
    '({} + 1);',
    '([] + 1);',
    '(q, {} + 1);',
    '(([(((null))), , (([(2).r = (((308)) ? this : (x)), aihgi] = ({}))), (8), (y)]))',
    '(q, [] + 1);',
    'async ([] + 1);',
    '(a(b,c))',
    '(a([]))',
    '(a({}))',
    '(a.a())',
    '([ foo()[x] ] = z = {})',
    '([ foo().x ] = z = {})',
    '([ foo().x ]= z = {})',
    '([ foo()[x] ] = {})',
    '([ x.y ]= z = {})',
    '([ foo()[x] ]= z = {})',
    '(x = (yield) = f) => {}',
    '([ x[y] ] = z = {})',
    '([ [ foo().x ] ]= z = {})',
    '([ x[y] ]= z = {})',
    '([ [ foo()[x] ] ]= z = {})',
    '([ [ foo()[x] ] ] = {})',
    '([ [ x.y ] ]= z = {})',
    '([ [ x[y] ] ]= z = {})',
    '([ foo().x = 10 ]= z = {})',
    '([ foo()[x] = 10 ]= z = {})',
    '([ x.y = 10 ]= z = {})',
    '([ foo()[x] = 10 ] = {})',
    '({a: 1, b: 1}, y = { ...x, b: 1 });',
    '({a: 1}, y = { a: 2, ...x });',
    '({a: 3}, y = { a: 2, ...x, a: 3 });',
    '({a: 1, b: 1}, y = { a:2, ...x, b: 1 });',
    '({a: 1, b: 1}, y = { ...x, ...z });',
    '({a: 2, b: 2}, y = { ...x, ...z, a:2, b: 2 });',
    '({a: 1, b: 1}, y = { a: 1, ...x, b: 2, ...z });',
    '({ a: 1 }, y = { ...x });',
    '({0: 0, 1: 1}, y = { ...[0, 1] });',
    '(x + y) >= z',
    '(x + y) <= z',
    '(x + y) != z',
    '(x + y) == z',
    '(x + y) == z',
    '(x) / y',
    '(false)',
    '([{}]);',
    '([delete foo.bar]);',
    '({ x, y, ...z } = o)',
    '([...[][x]] = x)',
    '(a = 1, b = 2);',
    '(a.b) = 1;',
    '(a) = 1;',
    '(a[b]) = 1;',
    '(a.b().c().d) = 1;',
    '(a.b().c().d) = 1;',
    '(this.a) += 1;',
    '(this.a) = 1;',
    '(this[b]) = 1;',
    '([x, y] = z);',
    '([[x, y] = z]);',
    '(a.b) += 1;',
    '(a.b().c().d) += 1;',
    `([].x);`,
    '(delete foo.bar);',
    '({});',
    '([...[].x] = x)',
    '([...{}[x]] = x)',
    '([...{}.x] = x)',
    '({...[][x]} = x)',
    '({...[].x} = x)',
    '({...a.x} = x)',
    '({...{}[x]} = x)',
    '([...[].x] = x, [...[].x] = x)',
    '([...{}[x]] = x, [...{}[x]] = x)',
    '([...{}.x] = x, [...{}.x] = x)',
    '(x.foo)',
    '(x + foo)',
    '(x.foo = y)',
    '(typeof x)',
    '(...{destruct}) => x',
    'async(...ident) => x',
    ' async(...[destruct]) => x',
    '([a]) => b;',
    '([a] = b) => c;',
    '([a=[b.c]=d]) => e;',
    '({...[][x, y]} = x)',
    '({...{}[x, y]} = z)',
    '({...[0][x]} = {})',
    '(a.a(b))',
    '(a.a(b,c))',
    '(a.a([]))',
    '(a=b)',
    '(a=b=c)',
    '(a=(b=c))',
    '((a??b.c)??a.b)',
    '((a??b))',
    '(a.a({}))',
    '(a,b)',
    '(a,b,c, 1,2,3)',
    '(a[b])',
    '(a[{}])',
    '(a[[]])',
    '(a[1])',
    '({...{}.x} = x);',
    '({...[0][x]} = {});',
    '({...[0].x} = {});',
    '((a))()',
    '({} = 0);',
    '({foo: true ** false});',
    '({ x: x } = a);',
    '({ x } = a);',
    'new c(x)(y)',
    '"use strict"; ({ x: a, x: b } = q);',
    `({
      a,
      a:a,
      a:a=a,
      [a]:{a},
      a:some_call()[a],
      a:this.a
    } = 0);`,
    'a = (b = c)',
    '({a:(b) = c})',
    '({a:(b) = 0} = 1)',
    '({a:(b) = c} = 1)',
    '({ a: (b) } = {})',
    '(async)=2',
    '({200:exp})',
    '({[foo]: x} = y)',
    '({[foo]: bar} = baz)',
    '(true)',
    '[(a) = 0] = 1',
    '[(a.b)] = 0',
    '([a]) => b;',
    '[{x: y.z}] = a',
    '(foo.x)',
    'async ({x=z}, y) => x;',
    'async (foo = yield)',
    'delete ((foo) => foo)',
    '(delete /a/g.x);',
    '(...x) => x',
    'async("foo".bar);',
    '({...x=y});',
    '(4..x)()',
    '({ x = 123 } = a);',
    '({ x: y.z } = a)',
    '({ x: (y) } = a);',
    '(await = "foo")',
    '"use strict"; (await = "foo")',
    '(x, y, ...z) => foo',
    '({ a: (b) } = {})',
    '(async)=2',
    '({200:exp})',
    '[{x: y.z}]',
    '(x + foo)',
    '({a} + foo)',
    '(q, {a} + foo)',
    '(q, {...x.y} = z)',
    '(q, {...x=y});',
    '(q, {...x+=y});',
    '(q, [...x]);',
    '(q, [...x]) => x',
    '({...x.y} = z)',
    '({...x=y});',
    '({...x+=y});',
    '([...x]);',
    '([...x]) => x',
    '({...x+y});',
    '([...x+y]);',
    '([...x]);',
    '([...x=y]);',
    '(0, a)',
    '(a,a)',
    '({...x, ...y});',
    '({...x, y});',
    '({[x]:y} = z);',
    '({x} = y);',
    '([ foo()[x] = 10 ] = z = {});',
    '([ x.y = 10 ] = z = {});',
    '([ x[y] = 10 ] = z = {});',
    '([ [ foo()[x] = 10 ] = {} ] = z = {})',
    '([ [ x.y = 10 ] = {} ]= z = {})',
    '([ [ foo()[x] = 10 ] = {} ] = {})',
    '([ [ foo()[x] = 10 ] = {} ]= z = {})',
    '([ [ x[y] = 10 ] = {} ]= z = {})',
    '([ [ x.y = 10 ] = {} ] = {})',
    '({ x : [ foo().y ] }= z = {})',
    '({ x : [ foo()[y] ] }= z = {})',
    '({ x : [ y.z ] }= z = {})',
    '({ x : [ y.z ] } = {})',
    '([x.y = a] = ([x.y = a?.y] = ([x.y = a] = z)))',
    '([x.y = a] = ([x.y = a?.y] = ([x.y = a] = z)))',
    'class C { constructor(props) { ([super.client] = props)} }',
    '({ x : [ y[z] = 10 ] = {} }= z = {})',
    '({ x : [ y.z = 10 ] = {} }= z = {})',
    '({ x : [ foo()[y] = 10 ] = {} } = {})',
    '({ x : [ foo()[y] = 10 ] = {} }= z = {})',
    '({ x : [ foo().y = 10 ] = {} }= z = {})',
    '({ x : [ foo().y = 10 ] = {} } = z = {})',
    '({ x : [ y[z] ] }= z = {})',
    '({ x : [ y.z = 10 ] = {} } = {})',
    '([ [ foo().x = 10 ] = {} ]= z = {})',
    '([ x[y] = 10 ] = {})',
    '([ x[y] = 10 ]= z = {})',
    '([ [ foo().x = 10 ] = {} ] = z = {});',
    '([(x),,(y)] = z = {});',
    '([x,,...z] = z = {});',
    '([z, (y), z])',
    '({ y: x = 1 })',
    'c = ({b} = b);',
    '({b} = b);',
    '([b] = b);',
    '(a.b) = {}',
    '(f().a) = 1;',
    '(obj[0]) = 1;',
    '(obj.a) = 1;',
    '({a:((((a1))))} = {a:20})',
    '({a:a1 = r1 = 44} = {})',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    'f = (argument1, [a,b,c])',
    'f = (argument1, { x : x, y : y = 42 })',
    'f = (argument1, [{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]])',
    '(argument1, [a,b,...rest])',
    'f = ( {[x] : z} )',
    '(a, b, c, 1, 2, 3);',
    '({[x]:y});',
    `a = (
      b,
      c
    )`,
    '({ a, ...b } = c)',
    '({ a } = c)',
    '({a, ...b})',
    '(let.a) += 1;',
    '({0: y} = 0)',
    '({ ...c[0]})',
    '({ ...d.x })',
    '({ x: (y) = [] })',
    '({ x: (foo.bar) })',
    '([a = 1])',
    '({ x: (y) })',
    '({x, ...y} = {})',
    '(x + y);',
    '(null);',
    '(new x)',
    '(class{})',
    '(arguments)',
    '([{x:x, y:y, ...z}, [a,b,c]] = {})',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    '([{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {});',
    '([{x:x, y:y}, [a,b,c]])',
    '({[1+1] : z, ...x} = {})',
    '({arguments: x, ...z} = {});',
    '({a: {eval}.x} = {});',
    '({...{eval}.x} = {});',
    '({ a: 1 }).a === 1',
    '({ x : [ y = 10 ] = {} })',
    '({ x : [ foo().y = 10 ] = {} })',
    '({ x : [ foo()[y] = 10 ] = {} })',
    '({ x : [ y.z = 10 ] = {} })',
    '({ z : { __proto__: x, __proto__: y } = z })',
    '({ x : [ y[z] = 10 ] = {} })',
    '([ x ])',
    '([ foo().x ])',
    '([ foo()[x] ])',
    '([ x.y ])',
    '([ x[y] ])',
    '([ { x } ])',
    '([ { x : y } ])',
    '([ { x : foo().y } ])',
    '([ { x : foo()[y] } ])',
    '([ { x : x.y } ])',
    '([ { x : x[y] } ])',
    '([ { x = 10 } = {} ])',
    '([ { x : y = 10 } = {} ])',
    '([ { x : foo().y = 10 } = {} ])',
    '([ { x : foo()[y] = 10 } = {} ])',
    '([ { x : x.y = 10 } = {} ])',
    '([ { x : x[y] = 10 } = {} ])',
    '([ [ x = 10 ] = {} ])',
    '([ [ foo().x = 10 ] = {} ])',
    '([ [ foo()[x] = 10 ] = {} ])',
    '({ x : y, ...z })',
    '({ x : y = 1, ...z })',
    '({...x})',
    '({a: [b = 1, c = 2][1]} = {a:[]});',
    '({a: [b = 1, c = 2].b} = {a:[]});',
    '({0: x, 1: x} = 0)',
    '({a:let} = 0);',
    '([[]]=0)',
    '({x: y = 0} = 1)',
    '({x: y = z = 0} = 1)',
    '({x: [y] = 0} = 1)',
    '((a,a),(a,a))',
    '((((((((((((((((((((((((((((((((((((((((a))))))))))))))))))))))))))))))))))))))))',
    '({ x : y } = z = {});',
    '({ x : foo()[y] } = z = {});',
    '({ x : { foo: foo().y } });',
    '[...{a}] = [{}]',
    '({x:z = 1, x1:y = 20} = {});',
    '(q, { x = 10 } = {});',
    '({ x } = { x: 3 });',
    '({ x = 10 } = {});',
    '([a ** b]);',
    '({a, b} = {a: 1, b: 2});',
    '({ident: [foo, bar].join(s)})',
    '({ident: {x}})',
    '({ident: {x:y}/x/g})',
    '(a / b);',
    '({ident: {x:y}**x})',
    '(foo + (bar + boo) + ding)',
    '({ident: {x: y}.join(z)})',
    '({ responseText: text } = res)',
    '(foo, [bar, baz] = doo);',
    '([ ...(a) ] = z = {});',
    '([ (foo.bar) ] = z = {});',
    '(1)',
    '[(a)] = 0',
    '([...x.y] = z)',
    '({123(){}})',
    '({123: expr})',
    '({[key](){}})',
    '({[key]: a.b} = c)',
    '({...key = x})',
    '({...key.prop} = x)',
    '({...key})',
    '([(x).foo = x] = x)',
    '(a = b)',
    '((((((((((x))))))))));',
    '({a:(b)} = 0)',
    '({a:(b.c)} = 0)',
    '({a:(b = 0)})',
    '([(x)] = z = {});',
    '([...{}.x] = x);',
    '([...[]] = x);',
    '({x = 1} = {});',
    '({ __proto__: x, __proto__: y } = {})',
    '({x:y} = {});',
    '({a:(b)} = 0)',
    '({a:(b) = 0} = 1)',
    '(typeof x)',
    '({web: true,  __proto__: x, __proto__: y});',
    '({a:(b.c)} = 0)',
    '({a:(b = 0)})',
    'delete (foo)',
    '({x, y = 1, z = 2} = {});',
    '({[foo()] : z} = z = {});',
    '({[foo()] : (z)} = z = {});',
    '({[foo()] : foo().bar} = z = {});',
    '({x: y} = 0)',
    '({x} = 0)',
    '({x, y = 1, z = 2} = {});',
    '({42 : x} = {})',
    '([a,,...rest] = {})',
    '({var: x = 42} = {})',
    '({x, ...y, a, ...b, c})',
    '([...[]] = x);',
    '({...[].x} = x);',
    '({...a[x]} = x);',
    '({...a.x} = x);',
    '({...[({...[].x} = x)].x} = x);',
    '({...a.x} = x);',
    '({...x.x, y})',
    '([target()[targetKey()]] = source())',
    '() => {([(x), y] = x)}',
    '([ (foo.bar) ] = {})',
    '([ (y) ]= z = {})',
    '([(({ x } = { x: 1 }) => x).a]= z = {})',
    '([(({ x } = { x: 1 }) => x).a] = z = {})',
    '([((x, y) => z).x]= z = {})',
    '([(x)] = {})',
    '([(x)]= z = {})',
    '([(x),,(y)] = {})',
    '([ (foo.bar) ]= z = {})',
    '([x.y = a] = ([x.y = a] = ([x.y = a] = z)))',
    '({...{}.x} = x);',
    '([...[].x] = x);',
    '([...[([...[].x] = x)].x] = x);',
    '([...{}.x] = x);',
    '({...[][x]} = x);',
    '({...[][x]} = x = y);',
    '({...[][x]} = x = (y));',
    '({...[][x]} = (x) = (y));',
    '({...{}[x]} = x);',
    '({...{}[x = (y)[z]]} = x);',
    '([...[({...{}[x = (y)[z]]} = x)][x]] = x);',
    '([...[][x]] = x);',
    '([...{}[x]] = x);',
    '({...{b: 0}.x} = {});',
    '({...[0].x} = {});',
    '({...{b: 0}[x]} = {});',
    '({...[0][x]} = {});',
    '({...[1][2]} = {});',
    `({a:b,...obj}) => {}`,
    `({a,...obj}) => {}`,
    `({...obj} = {}) => {}`,
    `({a:b,...obj} = foo)`,
    `({...a, ...b})`,
    `({...a}=x)`,
    `({obj: x, ...a})`,
    '(a.b = {});',
    '(a[i] = {});',
    '({ a: obj.a } = {})',
    '({ a: this.a } = {})',
    '( [a] = []);',
    '({x, x1:y = 20} = {});',
    '({ a: {prop: 1}.prop } = {})',
    '(x|y)^y',
    '({x,} = 0)',
    '({x,y} = 0)',
    '({x,y,} = 0)',
    '({d=0,f:h().a} = 0)',
    '({yield} = 0);',
    '({yield = 0} = 0);',
    '({x=0, y:z} = 0)',
    '({x: y,} = 0)',
    '({[a]: a} = 1)',
    '({ foo, bar } = foo);',
    '({[a = b]: {}})',
    '({[a = (b)]: {}})',
    '({[(a)()]: {}})',
    '({a = [b]} = c)',
    '({a = [b]} = 1)',
    'a += (b + c)',
    'a + (b += c)',
    'a -= b -= c',
    'a -= (b + c)',
    '({[a]:b, ...rest})',
    '({ }).x',
    '({ x = y } = {});',
    '({ x: [ x ] } = { x: null });',
    '({ x: { x } } = { x: null });',
    '({ x: { x } } = { x: undefined });',
    '({ x: { x } } = {});',
    '({ x: [ x ] } = { x: undefined });',
    '({[(a)(x = (y))]: {}})',
    '({a = [b]} = 1 * (c = d))',
    '({a = [b]} = 1 * (d = (e)))',
    '({1: [b.c = x]} = 1 / (d = ((a)) = a))',
    '({1: [b.c = x]} = 2 / (dd = ((a)) = 3))',
    '({1: [b.c = x]} = 2 ** (dd = ((a)) = 3))',
    '({1: [b.c = x]} = 1 * (d = ((a)) = a))',
    '([ [ foo()[x] = 10 ] = {} ])',
    '([ [ 12()[x] = 10 ] = {} ])',
    '({a: {b: (c)}})',
    '({x} = {x:3});',
    '({...x}[y])',
    '({} = undefined);',
    '({x, y:[y]} = {x:5, y:[6]});',
    '({ test = 1 } = {})',
    '({x = 0} = 1)',
    '({x = 0,} = 1)',
    '({var: x} = 0)',
    '({b, c, d, ...{a} })',
    '((a)) = b',
    '({}.length)',
    '({}.x)',
    '([].x)',
    '([x].foo) = x',
    '({*15(){}})',
    '({x, ...y}) => x',
    '({...x.y} = z) ',
    '(z = {...x.y}) => z',
    '(foo[x])',
    '(foo) += 3',
    '({a:(b) = c} = 1)',
    `(x) += (y) = z`,
    '(x) = (y) += z',
    '(a.b) = 0',
    '(1) + (2  ) + 3',
    '((((((((((((((((((((((((((((((((((((((((((((((((((0))))))))))))))))))))))))))))))))))))))))))))))))))',
    '({a: {x = y}} = z)',
    '({a: {x = y}}) => z',
    '4 + 5 << (6)',
    '(a) + (b)',
    '((a))()',
    '"use strict"; (await) = 1',
    '((a))((a))',
    '((a)) = 0',
    '(a) = 0',
    'void (a)',
    '(a)++',
    '(a) ? (b) : (c)',
    '(a++)',
    '(void a)',
    '({Foo} = {});',
    '({foo, bar} = {foo: 0, bar: 1});',
    '({} = 0);',
    '({ responseText: text } = res);',
    '({f({x} = {x: 10}) {}})',
    '({f: function({x} = {x: 10}) {}})',
    'f = function({x} = {x: 10}) {};',
    '([a.b])',
    '(a[b])',
    '([x])',
    '({x})',
    `({}.length)`,
    '({a, a})',
    '({a, a: 1})',
    '({a: 1, a})',
    '({a: 1, a})',
    `({a: b = x} = d)`,
    `({a: b = x} / d)`,
    `({a: b * x})`,
    `(q, {a: b = x} = d)`,
    `(q, {a: b = x} / d)`,
    `(q, {a: b * x})`,
    `({a: b} = d)`,
    `(x) = (y) += z`,
    `(x) = (y) = z`,
    `(x) += (y) = z`,
    `(foo.x)`,
    `(foo[x])`,
    `(foo) += 3`,
    '(++this.x)',
    '--(((x)));',
    '({a: 1 || 1}.a = 1)',
    '(q, {a: 1 || 1}.a = 1)',
    '(4,(5,a(3,4))),f[4,a-6]',
    '((((a))((b)()).l))()',
    '({...{}})',
    '({a:b,...obj} = foo)',
    '({1: x})',
    '({1: x}=1)',
    '({1: x}=null)',
    '({1: x})',
    '({1: x}=1)',
    '({1: x}=null)',
    '({a: b}=null)',
    '({[x]: 1})',
    '({a}=1)()',
    '({a:a}=1)()',
    `([...x.y] = z)`,
    `(z = [...x.y] = z) => z`,
    `([...x, ...y]);`,
    '([x, ...y]) => x',
    `([...x+=y]);`,
    `([...x=y]);`,
    `([...x]);`,
    '({1: ({}) / (1)});',
    '({1: ({}) ? (1) : [1]});',
    '({1: (x * y - z)});',
    '([arguments] = []);',
    '({})(a = b);',
    '({1: (x = x) });',
    '({ q } = { x = 10 } = {});',
    '({ x = 10 } = {})',
    '(q, { x = 10 } = {})',
    '({ a, b: x })',
    '(x = {eval})',
    '({eval} = x)',
    '({ async x() {} })',
    '({ async x() {} })',
    '({ async [foo]() {} })',
    '({ get 500() {} })',
    '({ set 500(b) {} })',
    '({ set [foo](d) {} })',
    '({a: {b} = 0}) => x',
    '({a: {b: c} = 0}) => x',
    '([x[y]] = z)',
    '(q, [x[y]] = z)',
    '({a: {arguments}.x} = {});',
    '({...{arguments}.x} = {});',
    '({a: (b) = 0})',
    '({a: (b.x) = 0})',
    '({a: (b) = 0} = 1)',
    '({a: (b.x) = 0} = 1)',
    '([...{a = b} = c])',
    '({a: {a: b.x} = 0})',
    '({a: {b: c} = 0})',
    '({a: {b} = 0})',
    '({a: {b}})',
    '({a: {b}, c})',
    '({a: [b] = 0})',
    '({a: [b.x] = 0})',
    '({a: [b] = 0}) => x',
    '({...{b: 0}[x]} = {});',
    '({...{b: 0}.x} = {});',
    '([target()[targetKey()]] = x);',
    '({...x.x, y})',
    '({...x.x = y, y})',
    '({...x = y, y})',
    '([x.y = a] = z)',
    '([x.y = a] = ([x.y = a] = ([x.y = a] = z)))',
    '([{x = y}] = z)',
    '({..."x".x} = x);',
    '(a.b) += 1;',
    '(this.a) += 1;',
    '({...{}.x} = x);',
    '([...[].x] = x);',
    '([...[([...[].x] = x)].x] = x);',
    '({...[({...[].x} = x)].x} = x);',
    '({...[].x} = x);',
    '([...[]] = x);',
    '({...(a,b),c})',
    '([...{}.x] = x);',
    '({...a.x} = x);',
    '({..."x"[x]} = x);',
    '({...[][x]} = x);',
    '({...[][x]} = x = y);',
    '({...[][x]} = x = (y));',
    '({...[][x]} = (x) = (y));',
    '({...{}[x]} = x);',
    '({...{}[x = (y)[z]]} = x);',
    '({a: {x = y}} = z)',
    '([...[({...{}[x = (y)[z]]} = x)][x]] = x);',
    '([...[][x]] = x);',
    '([...{}[x]] = x);',
    '([...{}[x]] = "x");',
    '({...{b: 0}.x} = {});',
    '({...[0].x} = {});',
    '({...{b: 0}[x]} = {});',
    '({...[0][x]} = {});',
    '({...[1][2]} = {});',
    '(let)[x].foo in x;',
    '({x: y.z} = b)',
    'foo({get [bar](){}, [zoo](){}});',
    'foo({[bar](){}, get [zoo](){}});',
    'foo({set [bar](c){}, [zoo](){}});',
    'foo({[bar](){}, set [zoo](e){}});',
    'a = (  b, c  )',
    '([...[].x] = x);',
    '({a:(b) = c})',
    '({a:(b) = 0} = 1)',
    '(x, y, ...z) => foo',
    '({ a: (b) } = {})',
    '(async)=2',
    '({200:exp})',
    '({a:(b) = c} = 1)',
    '({*ident(){}})',
    '({*[expr](){}})',
    '({*20(){}})',
    '(x=(await)=y)',
    '({[foo]: x} = y)',
    'x=x=x',
    '({"a b c": bar})',
    '(null)',
    '(x, /x/)',
    '(/x/g)',
    '({ a: {prop: 1}.prop } = {})',
    `({ async* f(a, b, ...c) { await 1; } })`,
    '([(x())[y] = a,] = z);',
    '({ident: {x:y}/x})',
    '(async ());',
    '({ident: [foo, bar]/x/g})',
    '({ident: [foo, bar].join("")})',
    '({[x]: y}) => z;',
    '({[foo]: bar} = baz)',
    '([...x]);',
    '([...x]) => x',
    '(z = [...x.y] = z) => z',
    '(z = [...x.y]) => z',
    '({...obj.x} = foo)',
    '({...obj} = foo)',
    '({...x+y});',
    '({...x, ...y});',
    '({...x, y});',
    '(z = [...x.y]) => z',
    '([...x=y]);',
    '({ x : foo()[y] } = z = {});',
    '({ x : { foo: foo().y } });',
    '(await) = 1',
    '("\\u{10FFFF}")',
    '({a} = b,) => {}',
    '([x] = y,) => {}',
    '({a},) => {}',
    '([x],) => {}',
    '(obj[0]) = 1;',
    '(obj.a) = 1;',
    '({a:((((a1))))} = {a:20})',
    '({a:a1 = r1 = 44} = {})',
    '({a, a:a, a:a=a, [a]:{a}, a:b()[a], a:this.a} = 0);',
    '[{x:x = 1, y:y = 2}, [a = 3, b = 4, c = 5]] = {};',
    'f = (argument1, [a,b,c])',
    '({[x]:y});',
    '({ident: [foo, bar] + x})',
    '({ident: {x: y}})',
    '([a / b]);',
    `([a
      /b/g]);`
  ]) {
    it(`${arg}`, () => {
      t.doesNotThrow(() => {
        parseScript(`${arg}`);
      });
    });
  }

  it('Assignment to something that must destruct', () => {
    t.deepEqual(parseScript('({a: {x = y}} = z)'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'ParenthesizedExpression',
            expression: {
              type: 'AssignmentExpression',
              left: {
                type: 'ObjectAssignmentPattern',
                properties: [
                  {
                    type: 'AssignmentProperty',
                    static: false,
                    key: {
                      type: 'IdentifierName',
                      name: 'a'
                    },
                    value: {
                      type: 'ObjectAssignmentPattern',
                      properties: [
                        {
                          type: 'BindingElement',
                          binding: {
                            type: 'IdentifierName',
                            name: 'x'
                          },
                          initializer: {
                            type: 'IdentifierReference',
                            name: 'y'
                          }
                        }
                      ]
                    },
                    computed: false
                  }
                ]
              },
              operator: '=',
              right: {
                type: 'IdentifierReference',
                name: 'z'
              }
            }
          }
        }
      ],
      webCompat: true
    });
  });

  it('Double wrapped group in the middle', () => {
    t.deepEqual(parseScript('x = ((y)) = z'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AssignmentExpression',
            left: {
              type: 'IdentifierReference',
              name: 'x'
            },
            operator: '=',
            right: {
              type: 'AssignmentExpression',
              left: {
                type: 'ParenthesizedExpression',
                expression: {
                  type: 'ParenthesizedExpression',
                  expression: {
                    type: 'IdentifierReference',
                    name: 'y'
                  }
                }
              },
              operator: '=',
              right: {
                type: 'IdentifierReference',
                name: 'z'
              }
            }
          }
        }
      ],
      webCompat: true
    });
  });

  it('Assign with dud group', () => {
    t.deepEqual(parseScript('a = ((b)) = c;'), {
      type: 'Script',
      directives: [],
      leafs: [
        {
          type: 'ExpressionStatement',
          expression: {
            type: 'AssignmentExpression',
            left: {
              type: 'IdentifierReference',
              name: 'a'
            },
            operator: '=',
            right: {
              type: 'AssignmentExpression',
              left: {
                type: 'ParenthesizedExpression',
                expression: {
                  type: 'ParenthesizedExpression',
                  expression: {
                    type: 'IdentifierReference',
                    name: 'b'
                  }
                }
              },
              operator: '=',
              right: {
                type: 'IdentifierReference',
                name: 'c'
              }
            }
          }
        }
      ],
      webCompat: true
    });
  });
});
